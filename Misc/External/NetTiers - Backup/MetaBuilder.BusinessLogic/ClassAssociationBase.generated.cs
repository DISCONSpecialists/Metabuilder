
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ClassAssociation.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using MetaBuilder.BusinessLogic.Validation;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'ClassAssociation' table. [No description found the database]	
	///</summary>
	[Serializable]


	[DataObject, CLSCompliant(true)]
	public abstract partial class ClassAssociationBase : EntityBase, IClassAssociation, IEntityId<ClassAssociationKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ClassAssociationEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ClassAssociationEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClassAssociationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ClassAssociation> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ClassAssociationEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ClassAssociationEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClassAssociationBase"/> instance.
		///</summary>
		public ClassAssociationBase()
		{
			this.entityData = new ClassAssociationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClassAssociationBase"/> instance.
		///</summary>
		///<param name="_parentClass"></param>
		///<param name="_childClass"></param>
		///<param name="_associationTypeID"></param>
		///<param name="_caption"></param>
		///<param name="_associationObjectClass"></param>
		///<param name="_copyIncluded"></param>
		///<param name="_isDefault"></param>
		///<param name="_isActive"></param>
		public ClassAssociationBase(System.String _parentClass, System.String _childClass, 
			System.Int32 _associationTypeID, System.String _caption, System.String _associationObjectClass, 
			System.Boolean _copyIncluded, System.Boolean _isDefault, System.Boolean? _isActive)
		{
			this.entityData = new ClassAssociationEntityData();
			this.backupData = null;

			this.ParentClass = _parentClass;
			this.ChildClass = _childClass;
			this.AssociationTypeID = _associationTypeID;
			this.Caption = _caption;
			this.AssociationObjectClass = _associationObjectClass;
			this.CopyIncluded = _copyIncluded;
			this.IsDefault = _isDefault;
			this.IsActive = _isActive;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClassAssociation"/> instance.
		///</summary>
		///<param name="_parentClass"></param>
		///<param name="_childClass"></param>
		///<param name="_associationTypeID"></param>
		///<param name="_caption"></param>
		///<param name="_associationObjectClass"></param>
		///<param name="_copyIncluded"></param>
		///<param name="_isDefault"></param>
		///<param name="_isActive"></param>
		public static ClassAssociation CreateClassAssociation(System.String _parentClass, System.String _childClass, 
			System.Int32 _associationTypeID, System.String _caption, System.String _associationObjectClass, 
			System.Boolean _copyIncluded, System.Boolean _isDefault, System.Boolean? _isActive)
		{
			ClassAssociation newClassAssociation = new ClassAssociation();
			newClassAssociation.ParentClass = _parentClass;
			newClassAssociation.ChildClass = _childClass;
			newClassAssociation.AssociationTypeID = _associationTypeID;
			newClassAssociation.Caption = _caption;
			newClassAssociation.AssociationObjectClass = _associationObjectClass;
			newClassAssociation.CopyIncluded = _copyIncluded;
			newClassAssociation.IsDefault = _isDefault;
			newClassAssociation.IsActive = _isActive;
			return newClassAssociation;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CAid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CAid
		{
			get
			{
				return this.entityData.CAid; 
			}
			
			set
			{
				if (this.entityData.CAid == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.CAid, this.entityData.CAid);
				this.entityData.CAid = value;
				this.EntityId.CAid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.CAid, this.entityData.CAid);
				OnPropertyChanged("CAid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String ParentClass
		{
			get
			{
				return this.entityData.ParentClass; 
			}
			
			set
			{
				if (this.entityData.ParentClass == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.ParentClass, this.entityData.ParentClass);
				this.entityData.ParentClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.ParentClass, this.entityData.ParentClass);
				OnPropertyChanged("ParentClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChildClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String ChildClass
		{
			get
			{
				return this.entityData.ChildClass; 
			}
			
			set
			{
				if (this.entityData.ChildClass == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.ChildClass, this.entityData.ChildClass);
				this.entityData.ChildClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.ChildClass, this.entityData.ChildClass);
				OnPropertyChanged("ChildClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssociationTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AssociationTypeID
		{
			get
			{
				return this.entityData.AssociationTypeID; 
			}
			
			set
			{
				if (this.entityData.AssociationTypeID == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.AssociationTypeID, this.entityData.AssociationTypeID);
				this.entityData.AssociationTypeID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.AssociationTypeID, this.entityData.AssociationTypeID);
				OnPropertyChanged("AssociationTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Caption property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Caption
		{
			get
			{
				return this.entityData.Caption; 
			}
			
			set
			{
				if (this.entityData.Caption == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.Caption, this.entityData.Caption);
				this.entityData.Caption = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.Caption, this.entityData.Caption);
				OnPropertyChanged("Caption");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssociationObjectClass property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AssociationObjectClass
		{
			get
			{
				return this.entityData.AssociationObjectClass; 
			}
			
			set
			{
				if (this.entityData.AssociationObjectClass == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.AssociationObjectClass, this.entityData.AssociationObjectClass);
				this.entityData.AssociationObjectClass = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.AssociationObjectClass, this.entityData.AssociationObjectClass);
				OnPropertyChanged("AssociationObjectClass");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CopyIncluded property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean CopyIncluded
		{
			get
			{
				return this.entityData.CopyIncluded; 
			}
			
			set
			{
				if (this.entityData.CopyIncluded == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.CopyIncluded, this.entityData.CopyIncluded);
				this.entityData.CopyIncluded = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.CopyIncluded, this.entityData.CopyIncluded);
				OnPropertyChanged("CopyIncluded");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDefault property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsDefault
		{
			get
			{
				return this.entityData.IsDefault; 
			}
			
			set
			{
				if (this.entityData.IsDefault == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.IsDefault, this.entityData.IsDefault);
				this.entityData.IsDefault = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.IsDefault, this.entityData.IsDefault);
				OnPropertyChanged("IsDefault");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return true. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(ClassAssociationColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClassAssociationColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for ParentClass.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Class ParentClassSource
      	{
            get { return entityData.ParentClassSource; }
            set { entityData.ParentClassSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for ChildClass.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Class ChildClassSource
      	{
            get { return entityData.ChildClassSource; }
            set { entityData.ChildClassSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AssociationType"/>.
		/// </summary>
		/// <value>The source AssociationType for AssociationTypeID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AssociationType AssociationTypeIDSource
      	{
            get { return entityData.AssociationTypeIDSource; }
            set { entityData.AssociationTypeIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for AssociationObjectClass.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Class AssociationObjectClassSource
      	{
            get { return entityData.AssociationObjectClassSource; }
            set { entityData.AssociationObjectClassSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ObjectAssociation objects
		///	which are related to this object through the relation FK_ObjectAssociation_ClassAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ObjectAssociation> ObjectAssociationCollection
		{
			get { return entityData.ObjectAssociationCollection; }
			set { entityData.ObjectAssociationCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AllowedArtifact objects
		///	which are related to this object through the relation FK_AllowedArtifact_ClassAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AllowedArtifact> AllowedArtifactCollection
		{
			get { return entityData.AllowedArtifactCollection; }
			set { entityData.AllowedArtifactCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ClassFromAllowedArtifact objects
		///	which are related to this object through the junction table AllowedArtifact
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Class> ClassClassCollection_From_AllowedArtifact
		{
			get { return entityData.ClassClassCollection_From_AllowedArtifact; }
			set { entityData.ClassClassCollection_From_AllowedArtifact = value; }	
		}

		/// <summary>
		///	Holds a collection of MetaObjectFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MetaObject> ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get { return entityData.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation; }
			set { entityData.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }	
		}

		/// <summary>
		///	Holds a collection of MetaObjectFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MetaObject> ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get { return entityData.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation; }
			set { entityData.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ParentClass", "Parent Class"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ParentClass", "Parent Class", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ChildClass", "Child Class"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChildClass", "Child Class", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Caption", "Caption", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AssociationObjectClass", "Association Object Class", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ClassAssociation"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CAid", "ParentClass", "ChildClass", "AssociationTypeID", "Caption", "AssociationObjectClass", "CopyIncluded", "IsDefault", "IsActive"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClassAssociationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ClassAssociation) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ClassAssociation>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ClassAssociation);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClassAssociation Entity 
		///</summary>
		protected virtual ClassAssociation Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ClassAssociation copy = new ClassAssociation();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CAid = this.CAid;
				copy.ParentClass = this.ParentClass;
				copy.ChildClass = this.ChildClass;
				copy.AssociationTypeID = this.AssociationTypeID;
				copy.Caption = this.Caption;
				copy.AssociationObjectClass = this.AssociationObjectClass;
				copy.CopyIncluded = this.CopyIncluded;
				copy.IsDefault = this.IsDefault;
				copy.IsActive = this.IsActive;
			
			if (this.ParentClassSource != null && existingCopies.Contains(this.ParentClassSource))
				copy.ParentClassSource = existingCopies[this.ParentClassSource] as Class;
			else
				copy.ParentClassSource = MakeCopyOf(this.ParentClassSource, existingCopies) as Class;
			if (this.ChildClassSource != null && existingCopies.Contains(this.ChildClassSource))
				copy.ChildClassSource = existingCopies[this.ChildClassSource] as Class;
			else
				copy.ChildClassSource = MakeCopyOf(this.ChildClassSource, existingCopies) as Class;
			if (this.AssociationTypeIDSource != null && existingCopies.Contains(this.AssociationTypeIDSource))
				copy.AssociationTypeIDSource = existingCopies[this.AssociationTypeIDSource] as AssociationType;
			else
				copy.AssociationTypeIDSource = MakeCopyOf(this.AssociationTypeIDSource, existingCopies) as AssociationType;
			if (this.AssociationObjectClassSource != null && existingCopies.Contains(this.AssociationObjectClassSource))
				copy.AssociationObjectClassSource = existingCopies[this.AssociationObjectClassSource] as Class;
			else
				copy.AssociationObjectClassSource = MakeCopyOf(this.AssociationObjectClassSource, existingCopies) as Class;
		
			//deep copy nested objects
			copy.ObjectAssociationCollection = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollection, existingCopies); 
			copy.AllowedArtifactCollection = (TList<AllowedArtifact>) MakeCopyOf(this.AllowedArtifactCollection, existingCopies); 
			copy.ClassClassCollection_From_AllowedArtifact = (TList<Class>) MakeCopyOf(this.ClassClassCollection_From_AllowedArtifact, existingCopies); 
			copy.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			copy.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ClassAssociation Entity 
		///</summary>
		public virtual ClassAssociation Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ClassAssociation Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ClassAssociation DeepCopy()
		{
			return EntityHelper.Clone<ClassAssociation>(this as ClassAssociation);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClassAssociationEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClassAssociationEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClassAssociationEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClassAssociationColumn column)
		{
			switch(column)
			{
					case ClassAssociationColumn.CAid:
					return entityData.CAid != _originalData.CAid;
					case ClassAssociationColumn.ParentClass:
					return entityData.ParentClass != _originalData.ParentClass;
					case ClassAssociationColumn.ChildClass:
					return entityData.ChildClass != _originalData.ChildClass;
					case ClassAssociationColumn.AssociationTypeID:
					return entityData.AssociationTypeID != _originalData.AssociationTypeID;
					case ClassAssociationColumn.Caption:
					return entityData.Caption != _originalData.Caption;
					case ClassAssociationColumn.AssociationObjectClass:
					return entityData.AssociationObjectClass != _originalData.AssociationObjectClass;
					case ClassAssociationColumn.CopyIncluded:
					return entityData.CopyIncluded != _originalData.CopyIncluded;
					case ClassAssociationColumn.IsDefault:
					return entityData.IsDefault != _originalData.IsDefault;
					case ClassAssociationColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClassAssociationColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CAid != _originalData.CAid;
			result = result || entityData.ParentClass != _originalData.ParentClass;
			result = result || entityData.ChildClass != _originalData.ChildClass;
			result = result || entityData.AssociationTypeID != _originalData.AssociationTypeID;
			result = result || entityData.Caption != _originalData.Caption;
			result = result || entityData.AssociationObjectClass != _originalData.AssociationObjectClass;
			result = result || entityData.CopyIncluded != _originalData.CopyIncluded;
			result = result || entityData.IsDefault != _originalData.IsDefault;
			result = result || entityData.IsActive != _originalData.IsActive;
			return result;
		}	
		
		///<summary>
		///  Returns a ClassAssociation Entity with the original data.
		///</summary>
		public ClassAssociation GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClassAssociation(
				_originalData.ParentClass,
				_originalData.ChildClass,
				_originalData.AssociationTypeID,
				_originalData.Caption,
				_originalData.AssociationObjectClass,
				_originalData.CopyIncluded,
				_originalData.IsDefault,
				_originalData.IsActive
				);
				
			return (ClassAssociation)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClassAssociationBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClassAssociationBase)
				return ValueEquals(this, (ClassAssociationBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClassAssociationBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CAid.GetHashCode() ^ 
					this.ParentClass.GetHashCode() ^ 
					this.ChildClass.GetHashCode() ^ 
					this.AssociationTypeID.GetHashCode() ^ 
					((this.Caption == null) ? string.Empty : this.Caption.ToString()).GetHashCode() ^ 
					((this.AssociationObjectClass == null) ? string.Empty : this.AssociationObjectClass.ToString()).GetHashCode() ^ 
					this.CopyIncluded.GetHashCode() ^ 
					this.IsDefault.GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClassAssociationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClassAssociationBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClassAssociationBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClassAssociationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClassAssociationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClassAssociationBase Object1, ClassAssociationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CAid != Object2.CAid)
				equal = false;
			if (Object1.ParentClass != Object2.ParentClass)
				equal = false;
			if (Object1.ChildClass != Object2.ChildClass)
				equal = false;
			if (Object1.AssociationTypeID != Object2.AssociationTypeID)
				equal = false;
			if ( Object1.Caption != null && Object2.Caption != null )
			{
				if (Object1.Caption != Object2.Caption)
					equal = false;
			}
			else if (Object1.Caption == null ^ Object2.Caption == null )
			{
				equal = false;
			}
			if ( Object1.AssociationObjectClass != null && Object2.AssociationObjectClass != null )
			{
				if (Object1.AssociationObjectClass != Object2.AssociationObjectClass)
					equal = false;
			}
			else if (Object1.AssociationObjectClass == null ^ Object2.AssociationObjectClass == null )
			{
				equal = false;
			}
			if (Object1.CopyIncluded != Object2.CopyIncluded)
				equal = false;
			if (Object1.IsDefault != Object2.IsDefault)
				equal = false;
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClassAssociationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClassAssociationComparer GetComparer()
        {
            return new ClassAssociationComparer();
        }
        */

        // Comparer delegates back to ClassAssociation
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ClassAssociation rhs, ClassAssociationColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClassAssociationColumn.CAid:
            		return this.CAid.CompareTo(rhs.CAid);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.ParentClass:
            		return this.ParentClass.CompareTo(rhs.ParentClass);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.ChildClass:
            		return this.ChildClass.CompareTo(rhs.ChildClass);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.AssociationTypeID:
            		return this.AssociationTypeID.CompareTo(rhs.AssociationTypeID);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.Caption:
            		return this.Caption.CompareTo(rhs.Caption);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.AssociationObjectClass:
            		return this.AssociationObjectClass.CompareTo(rhs.AssociationObjectClass);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.CopyIncluded:
            		return this.CopyIncluded.CompareTo(rhs.CopyIncluded);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.IsDefault:
            		return this.IsDefault.CompareTo(rhs.IsDefault);
            		
            		                 
            	
            	
            	case ClassAssociationColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClassAssociationKey> Members
		
		// member variable for the EntityId property
		private ClassAssociationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClassAssociationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClassAssociationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ClassAssociation")
					.Append("|").Append( this.CAid.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- CAid: {0}{9}- ParentClass: {1}{9}- ChildClass: {2}{9}- AssociationTypeID: {3}{9}- Caption: {4}{9}- AssociationObjectClass: {5}{9}- CopyIncluded: {6}{9}- IsDefault: {7}{9}- IsActive: {8}{9}{11}", 
				this.CAid,
				this.ParentClass,
				this.ChildClass,
				this.AssociationTypeID,
				(this.Caption == null) ? string.Empty : this.Caption.ToString(),
				(this.AssociationObjectClass == null) ? string.Empty : this.AssociationObjectClass.ToString(),
				this.CopyIncluded,
				this.IsDefault,
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ClassAssociation' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ClassAssociationEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CAid : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ClassAssociation"</remarks>
		public System.Int32 CAid;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ParentClass : 
		/// </summary>
		public System.String		  ParentClass = string.Empty;
		
		/// <summary>
		/// ChildClass : 
		/// </summary>
		public System.String		  ChildClass = string.Empty;
		
		/// <summary>
		/// AssociationTypeID : 
		/// </summary>
		public System.Int32		  AssociationTypeID = (int)0;
		
		/// <summary>
		/// Caption : 
		/// </summary>
		public System.String		  Caption = null;
		
		/// <summary>
		/// AssociationObjectClass : 
		/// </summary>
		public System.String		  AssociationObjectClass = null;
		
		/// <summary>
		/// CopyIncluded : 
		/// </summary>
		public System.Boolean		  CopyIncluded = false;
		
		/// <summary>
		/// IsDefault : 
		/// </summary>
		public System.Boolean		  IsDefault = false;
		
		/// <summary>
		/// IsActive : 
		/// </summary>
		public System.Boolean?		  IsActive = true;
		#endregion
			
		#region Source Foreign Key Property
				
		private Class _parentClassSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for ParentClass.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Class ParentClassSource
      	{
            get { return this._parentClassSource; }
            set { this._parentClassSource = value; }
      	}
		private Class _childClassSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for ChildClass.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Class ChildClassSource
      	{
            get { return this._childClassSource; }
            set { this._childClassSource = value; }
      	}
		private AssociationType _associationTypeIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AssociationType"/>.
		/// </summary>
		/// <value>The source AssociationType for AssociationTypeID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AssociationType AssociationTypeIDSource
      	{
            get { return this._associationTypeIDSource; }
            set { this._associationTypeIDSource = value; }
      	}
		private Class _associationObjectClassSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for AssociationObjectClass.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Class AssociationObjectClassSource
      	{
            get { return this._associationObjectClassSource; }
            set { this._associationObjectClassSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ObjectAssociationCollection
		
		private TList<ObjectAssociation> _objectAssociationCAid;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _objectAssociationCAid
		/// </summary>
		
		public TList<ObjectAssociation> ObjectAssociationCollection
		{
			get
			{
				if (_objectAssociationCAid == null)
				{
				_objectAssociationCAid = new TList<ObjectAssociation>();
				}
	
				return _objectAssociationCAid;
			}
			set { _objectAssociationCAid = value; }
		}
		
		#endregion

		#region AllowedArtifactCollection
		
		private TList<AllowedArtifact> _allowedArtifactCAid;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _allowedArtifactCAid
		/// </summary>
		
		public TList<AllowedArtifact> AllowedArtifactCollection
		{
			get
			{
				if (_allowedArtifactCAid == null)
				{
				_allowedArtifactCAid = new TList<AllowedArtifact>();
				}
	
				return _allowedArtifactCAid;
			}
			set { _allowedArtifactCAid = value; }
		}
		
		#endregion

		#region ClassClassCollection_From_AllowedArtifact
		
		private TList<Class> classClassCollection_From_AllowedArtifact;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table classClassCollection_From_AllowedArtifact
		/// </summary>
		
		public TList<Class> ClassClassCollection_From_AllowedArtifact
		{
			get
			{
				if (classClassCollection_From_AllowedArtifact == null)
				{
				classClassCollection_From_AllowedArtifact = new TList<Class>();
				}
	
				return classClassCollection_From_AllowedArtifact;
			}
			set { classClassCollection_From_AllowedArtifact = value; }
		}
		
		#endregion 

		#region ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		
		private TList<MetaObject> objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		/// </summary>
		
		public TList<MetaObject> ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get
			{
				if (objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation == null)
				{
				objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = new TList<MetaObject>();
				}
	
				return objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation;
			}
			set { objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }
		}
		
		#endregion 

		#region ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		
		private TList<MetaObject> childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		/// </summary>
		
		public TList<MetaObject> ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get
			{
				if (childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation == null)
				{
				childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = new TList<MetaObject>();
				}
	
				return childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation;
			}
			set { childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClassAssociationEntityData _tmp = new ClassAssociationEntityData();
						
			_tmp.CAid = this.CAid;
			
			_tmp.ParentClass = this.ParentClass;
			_tmp.ChildClass = this.ChildClass;
			_tmp.AssociationTypeID = this.AssociationTypeID;
			_tmp.Caption = this.Caption;
			_tmp.AssociationObjectClass = this.AssociationObjectClass;
			_tmp.CopyIncluded = this.CopyIncluded;
			_tmp.IsDefault = this.IsDefault;
			_tmp.IsActive = this.IsActive;
			
			#region Source Parent Composite Entities
			if (this.ParentClassSource != null)
				_tmp.ParentClassSource = MakeCopyOf(this.ParentClassSource) as Class;
			if (this.ChildClassSource != null)
				_tmp.ChildClassSource = MakeCopyOf(this.ChildClassSource) as Class;
			if (this.AssociationTypeIDSource != null)
				_tmp.AssociationTypeIDSource = MakeCopyOf(this.AssociationTypeIDSource) as AssociationType;
			if (this.AssociationObjectClassSource != null)
				_tmp.AssociationObjectClassSource = MakeCopyOf(this.AssociationObjectClassSource) as Class;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._objectAssociationCAid != null)
				_tmp.ObjectAssociationCollection = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollection); 
			if (this._allowedArtifactCAid != null)
				_tmp.AllowedArtifactCollection = (TList<AllowedArtifact>) MakeCopyOf(this.AllowedArtifactCollection); 
			if (this.classClassCollection_From_AllowedArtifact != null)
				_tmp.ClassClassCollection_From_AllowedArtifact = (TList<Class>) MakeCopyOf(this.ClassClassCollection_From_AllowedArtifact); 
			if (this.objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation != null)
				_tmp.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation); 
			if (this.childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation != null)
				_tmp.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClassAssociationEntityData _tmp = new ClassAssociationEntityData();
						
			_tmp.CAid = this.CAid;
			
			_tmp.ParentClass = this.ParentClass;
			_tmp.ChildClass = this.ChildClass;
			_tmp.AssociationTypeID = this.AssociationTypeID;
			_tmp.Caption = this.Caption;
			_tmp.AssociationObjectClass = this.AssociationObjectClass;
			_tmp.CopyIncluded = this.CopyIncluded;
			_tmp.IsDefault = this.IsDefault;
			_tmp.IsActive = this.IsActive;
			
			#region Source Parent Composite Entities
			if (this.ParentClassSource != null && existingCopies.Contains(this.ParentClassSource))
				_tmp.ParentClassSource = existingCopies[this.ParentClassSource] as Class;
			else
				_tmp.ParentClassSource = MakeCopyOf(this.ParentClassSource, existingCopies) as Class;
			if (this.ChildClassSource != null && existingCopies.Contains(this.ChildClassSource))
				_tmp.ChildClassSource = existingCopies[this.ChildClassSource] as Class;
			else
				_tmp.ChildClassSource = MakeCopyOf(this.ChildClassSource, existingCopies) as Class;
			if (this.AssociationTypeIDSource != null && existingCopies.Contains(this.AssociationTypeIDSource))
				_tmp.AssociationTypeIDSource = existingCopies[this.AssociationTypeIDSource] as AssociationType;
			else
				_tmp.AssociationTypeIDSource = MakeCopyOf(this.AssociationTypeIDSource, existingCopies) as AssociationType;
			if (this.AssociationObjectClassSource != null && existingCopies.Contains(this.AssociationObjectClassSource))
				_tmp.AssociationObjectClassSource = existingCopies[this.AssociationObjectClassSource] as Class;
			else
				_tmp.AssociationObjectClassSource = MakeCopyOf(this.AssociationObjectClassSource, existingCopies) as Class;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ObjectAssociationCollection = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollection, existingCopies); 
			_tmp.AllowedArtifactCollection = (TList<AllowedArtifact>) MakeCopyOf(this.AllowedArtifactCollection, existingCopies); 
			_tmp.ClassClassCollection_From_AllowedArtifact = (TList<Class>) MakeCopyOf(this.ClassClassCollection_From_AllowedArtifact, existingCopies); 
			_tmp.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			_tmp.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClassAssociationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClassAssociationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClassAssociationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClassAssociationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClassAssociationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClassAssociationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ClassAssociationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClassAssociationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClassAssociationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClassAssociationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClassAssociationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClassAssociationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClassAssociationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ClassAssociation"/> object.
	/// </remarks>
	public class ClassAssociationEventArgs : System.EventArgs
	{
		private ClassAssociationColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClassAssociationEventArgs class.
		///</summary>
		public ClassAssociationEventArgs(ClassAssociationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClassAssociationEventArgs class.
		///</summary>
		public ClassAssociationEventArgs(ClassAssociationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClassAssociationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClassAssociationColumn" />
		public ClassAssociationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ClassAssociation related events.
	///</summary>
	public delegate void ClassAssociationEventHandler(object sender, ClassAssociationEventArgs e);
	
	#region ClassAssociationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClassAssociationComparer : System.Collections.Generic.IComparer<ClassAssociation>
	{
		ClassAssociationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClassAssociationComparer"/> class.
        /// </summary>
		public ClassAssociationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClassAssociationComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClassAssociationComparer(ClassAssociationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ClassAssociation"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ClassAssociation"/> to compare.</param>
        /// <param name="b">The second <c>ClassAssociation</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ClassAssociation a, ClassAssociation b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ClassAssociation entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ClassAssociation a, ClassAssociation b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClassAssociationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClassAssociationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ClassAssociation"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClassAssociationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClassAssociationKey class.
		/// </summary>
		public ClassAssociationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClassAssociationKey class.
		/// </summary>
		public ClassAssociationKey(ClassAssociationBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CAid = entity.CAid;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClassAssociationKey class.
		/// </summary>
		public ClassAssociationKey(System.Int32 _cAid)
		{
			#region Init Properties

			this.CAid = _cAid;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClassAssociationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClassAssociationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CAid property
		private System.Int32 _cAid;
		
		/// <summary>
		/// Gets or sets the CAid property.
		/// </summary>
		public System.Int32 CAid
		{
			get { return _cAid; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CAid = value;
				
				_cAid = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CAid = ( values["CAid"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CAid"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CAid", CAid);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CAid: {0}{1}",
								CAid,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClassAssociationColumn Enum
	
	/// <summary>
	/// Enumerate the ClassAssociation columns.
	/// </summary>
	[Serializable]
	public enum ClassAssociationColumn : int
	{
		/// <summary>
		/// CAid : 
		/// </summary>
		[EnumTextValue("CAid")]
		[ColumnEnum("CAid", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CAid = 1,
		/// <summary>
		/// ParentClass : 
		/// </summary>
		[EnumTextValue("ParentClass")]
		[ColumnEnum("ParentClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		ParentClass = 2,
		/// <summary>
		/// ChildClass : 
		/// </summary>
		[EnumTextValue("ChildClass")]
		[ColumnEnum("ChildClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		ChildClass = 3,
		/// <summary>
		/// AssociationTypeID : 
		/// </summary>
		[EnumTextValue("AssociationTypeID")]
		[ColumnEnum("AssociationTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AssociationTypeID = 4,
		/// <summary>
		/// Caption : 
		/// </summary>
		[EnumTextValue("Caption")]
		[ColumnEnum("Caption", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Caption = 5,
		/// <summary>
		/// AssociationObjectClass : 
		/// </summary>
		[EnumTextValue("AssociationObjectClass")]
		[ColumnEnum("AssociationObjectClass", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AssociationObjectClass = 6,
		/// <summary>
		/// CopyIncluded : 
		/// </summary>
		[EnumTextValue("CopyIncluded")]
		[ColumnEnum("CopyIncluded", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		CopyIncluded = 7,
		/// <summary>
		/// IsDefault : 
		/// </summary>
		[EnumTextValue("IsDefault")]
		[ColumnEnum("IsDefault", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDefault = 8,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IsActive")]
		[ColumnEnum("IsActive", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 9
	}//End enum

	#endregion ClassAssociationColumn Enum

} // end namespace
