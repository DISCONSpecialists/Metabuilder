/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file METAView_PhysicalSoftwareComponent_Listing.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'METAView_PhysicalSoftwareComponent_Listing' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("METAView_PhysicalSoftwareComponent_ListingBase")]
	public abstract partial class METAView_PhysicalSoftwareComponent_ListingBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		private System.String		  _workspaceName = string.Empty;
		
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		private System.Int32?		  _workspaceTypeId = null;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		private System.Int32		  _vCStatusID = (int)0;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Machine : 
		/// </summary>
		private System.String		  _machine = string.Empty;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		private System.String		  _vCMachineID = null;
		
		/// <summary>
		/// InternalName : 
		/// </summary>
		private System.String		  _internalName = null;
		
		/// <summary>
		/// ConfigurationID : 
		/// </summary>
		private System.String		  _configurationID = null;
		
		/// <summary>
		/// SoftwareType : 
		/// </summary>
		private System.String		  _softwareType = null;
		
		/// <summary>
		/// SoftwareLevel : 
		/// </summary>
		private System.String		  _softwareLevel = null;
		
		/// <summary>
		/// IsBespoke : 
		/// </summary>
		private System.String		  _isBespoke = null;
		
		/// <summary>
		/// UserInterfaceType : 
		/// </summary>
		private System.String		  _userInterfaceType = null;
		
		/// <summary>
		/// NumberofUsers : 
		/// </summary>
		private System.String		  _numberofUsers = null;
		
		/// <summary>
		/// SeverityRating : 
		/// </summary>
		private System.String		  _severityRating = null;
		
		/// <summary>
		/// Edition : 
		/// </summary>
		private System.String		  _edition = null;
		
		/// <summary>
		/// Release : 
		/// </summary>
		private System.String		  _release = null;
		
		/// <summary>
		/// ServicePackID : 
		/// </summary>
		private System.String		  _servicePackID = null;
		
		/// <summary>
		/// VersionNumber : 
		/// </summary>
		private System.String		  _versionNumber = null;
		
		/// <summary>
		/// ID : 
		/// </summary>
		private System.String		  _iD = null;
		
		/// <summary>
		/// PublisherName : 
		/// </summary>
		private System.String		  _publisherName = null;
		
		/// <summary>
		/// Language : 
		/// </summary>
		private System.String		  _language = null;
		
		/// <summary>
		/// DateCreated : 
		/// </summary>
		private System.String		  _dateCreated = null;
		
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		private System.String		  _datePurchased = null;
		
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		private System.String		  _licenseNumber = null;
		
		/// <summary>
		/// HasCopyright : 
		/// </summary>
		private System.String		  _hasCopyright = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = null;
		
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		private System.String		  _abbreviation = null;
		
		/// <summary>
		/// IsBusinessExternal : 
		/// </summary>
		private System.String		  _isBusinessExternal = null;
		
		/// <summary>
		/// DataSourceID : 
		/// </summary>
		private System.String		  _dataSourceID = null;
		
		/// <summary>
		/// DataSourceName : 
		/// </summary>
		private System.String		  _dataSourceName = null;
		
		/// <summary>
		/// GeneralRemarks : 
		/// </summary>
		private System.String		  _generalRemarks = null;
		
		/// <summary>
		/// GapType : 
		/// </summary>
		private System.String		  _gapType = null;
		
		/// <summary>
		/// ArchitectureStatus : 
		/// </summary>
		private System.String		  _architectureStatus = null;
		
		/// <summary>
		/// ArchitectureStatusDate : 
		/// </summary>
		private System.String		  _architectureStatusDate = null;
		
		/// <summary>
		/// DesignRationale : 
		/// </summary>
		private System.String		  _designRationale = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> instance.
		///</summary>
		public METAView_PhysicalSoftwareComponent_ListingBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_internalName"></param>
		///<param name="_configurationID"></param>
		///<param name="_softwareType"></param>
		///<param name="_softwareLevel"></param>
		///<param name="_isBespoke"></param>
		///<param name="_userInterfaceType"></param>
		///<param name="_numberofUsers"></param>
		///<param name="_severityRating"></param>
		///<param name="_edition"></param>
		///<param name="_release"></param>
		///<param name="_servicePackID"></param>
		///<param name="_versionNumber"></param>
		///<param name="_iD"></param>
		///<param name="_publisherName"></param>
		///<param name="_language"></param>
		///<param name="_dateCreated"></param>
		///<param name="_datePurchased"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_hasCopyright"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_abbreviation"></param>
		///<param name="_isBusinessExternal"></param>
		///<param name="_dataSourceID"></param>
		///<param name="_dataSourceName"></param>
		///<param name="_generalRemarks"></param>
		///<param name="_gapType"></param>
		///<param name="_architectureStatus"></param>
		///<param name="_architectureStatusDate"></param>
		///<param name="_designRationale"></param>
		public METAView_PhysicalSoftwareComponent_ListingBase(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _internalName, System.String _configurationID, System.String _softwareType, System.String _softwareLevel, System.String _isBespoke, System.String _userInterfaceType, System.String _numberofUsers, System.String _severityRating, System.String _edition, System.String _release, System.String _servicePackID, System.String _versionNumber, System.String _iD, System.String _publisherName, System.String _language, System.String _dateCreated, System.String _datePurchased, System.String _licenseNumber, System.String _hasCopyright, System.String _name, System.String _description, System.String _abbreviation, System.String _isBusinessExternal, System.String _dataSourceID, System.String _dataSourceName, System.String _generalRemarks, System.String _gapType, System.String _architectureStatus, System.String _architectureStatusDate, System.String _designRationale)
		{
			this._workspaceName = _workspaceName;
			this._workspaceTypeId = _workspaceTypeId;
			this._vCStatusID = _vCStatusID;
			this._pkid = _pkid;
			this._machine = _machine;
			this._vCMachineID = _vCMachineID;
			this._internalName = _internalName;
			this._configurationID = _configurationID;
			this._softwareType = _softwareType;
			this._softwareLevel = _softwareLevel;
			this._isBespoke = _isBespoke;
			this._userInterfaceType = _userInterfaceType;
			this._numberofUsers = _numberofUsers;
			this._severityRating = _severityRating;
			this._edition = _edition;
			this._release = _release;
			this._servicePackID = _servicePackID;
			this._versionNumber = _versionNumber;
			this._iD = _iD;
			this._publisherName = _publisherName;
			this._language = _language;
			this._dateCreated = _dateCreated;
			this._datePurchased = _datePurchased;
			this._licenseNumber = _licenseNumber;
			this._hasCopyright = _hasCopyright;
			this._name = _name;
			this._description = _description;
			this._abbreviation = _abbreviation;
			this._isBusinessExternal = _isBusinessExternal;
			this._dataSourceID = _dataSourceID;
			this._dataSourceName = _dataSourceName;
			this._generalRemarks = _generalRemarks;
			this._gapType = _gapType;
			this._architectureStatus = _architectureStatus;
			this._architectureStatusDate = _architectureStatusDate;
			this._designRationale = _designRationale;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="METAView_PhysicalSoftwareComponent_Listing"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_internalName"></param>
		///<param name="_configurationID"></param>
		///<param name="_softwareType"></param>
		///<param name="_softwareLevel"></param>
		///<param name="_isBespoke"></param>
		///<param name="_userInterfaceType"></param>
		///<param name="_numberofUsers"></param>
		///<param name="_severityRating"></param>
		///<param name="_edition"></param>
		///<param name="_release"></param>
		///<param name="_servicePackID"></param>
		///<param name="_versionNumber"></param>
		///<param name="_iD"></param>
		///<param name="_publisherName"></param>
		///<param name="_language"></param>
		///<param name="_dateCreated"></param>
		///<param name="_datePurchased"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_hasCopyright"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_abbreviation"></param>
		///<param name="_isBusinessExternal"></param>
		///<param name="_dataSourceID"></param>
		///<param name="_dataSourceName"></param>
		///<param name="_generalRemarks"></param>
		///<param name="_gapType"></param>
		///<param name="_architectureStatus"></param>
		///<param name="_architectureStatusDate"></param>
		///<param name="_designRationale"></param>
		public static METAView_PhysicalSoftwareComponent_Listing CreateMETAView_PhysicalSoftwareComponent_Listing(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _internalName, System.String _configurationID, System.String _softwareType, System.String _softwareLevel, System.String _isBespoke, System.String _userInterfaceType, System.String _numberofUsers, System.String _severityRating, System.String _edition, System.String _release, System.String _servicePackID, System.String _versionNumber, System.String _iD, System.String _publisherName, System.String _language, System.String _dateCreated, System.String _datePurchased, System.String _licenseNumber, System.String _hasCopyright, System.String _name, System.String _description, System.String _abbreviation, System.String _isBusinessExternal, System.String _dataSourceID, System.String _dataSourceName, System.String _generalRemarks, System.String _gapType, System.String _architectureStatus, System.String _architectureStatusDate, System.String _designRationale)
		{
			METAView_PhysicalSoftwareComponent_Listing newMETAView_PhysicalSoftwareComponent_Listing = new METAView_PhysicalSoftwareComponent_Listing();
			newMETAView_PhysicalSoftwareComponent_Listing.WorkspaceName = _workspaceName;
			newMETAView_PhysicalSoftwareComponent_Listing.WorkspaceTypeId = _workspaceTypeId;
			newMETAView_PhysicalSoftwareComponent_Listing.VCStatusID = _vCStatusID;
			newMETAView_PhysicalSoftwareComponent_Listing.pkid = _pkid;
			newMETAView_PhysicalSoftwareComponent_Listing.Machine = _machine;
			newMETAView_PhysicalSoftwareComponent_Listing.VCMachineID = _vCMachineID;
			newMETAView_PhysicalSoftwareComponent_Listing.InternalName = _internalName;
			newMETAView_PhysicalSoftwareComponent_Listing.ConfigurationID = _configurationID;
			newMETAView_PhysicalSoftwareComponent_Listing.SoftwareType = _softwareType;
			newMETAView_PhysicalSoftwareComponent_Listing.SoftwareLevel = _softwareLevel;
			newMETAView_PhysicalSoftwareComponent_Listing.IsBespoke = _isBespoke;
			newMETAView_PhysicalSoftwareComponent_Listing.UserInterfaceType = _userInterfaceType;
			newMETAView_PhysicalSoftwareComponent_Listing.NumberofUsers = _numberofUsers;
			newMETAView_PhysicalSoftwareComponent_Listing.SeverityRating = _severityRating;
			newMETAView_PhysicalSoftwareComponent_Listing.Edition = _edition;
			newMETAView_PhysicalSoftwareComponent_Listing.Release = _release;
			newMETAView_PhysicalSoftwareComponent_Listing.ServicePackID = _servicePackID;
			newMETAView_PhysicalSoftwareComponent_Listing.VersionNumber = _versionNumber;
			newMETAView_PhysicalSoftwareComponent_Listing.ID = _iD;
			newMETAView_PhysicalSoftwareComponent_Listing.PublisherName = _publisherName;
			newMETAView_PhysicalSoftwareComponent_Listing.Language = _language;
			newMETAView_PhysicalSoftwareComponent_Listing.DateCreated = _dateCreated;
			newMETAView_PhysicalSoftwareComponent_Listing.DatePurchased = _datePurchased;
			newMETAView_PhysicalSoftwareComponent_Listing.LicenseNumber = _licenseNumber;
			newMETAView_PhysicalSoftwareComponent_Listing.HasCopyright = _hasCopyright;
			newMETAView_PhysicalSoftwareComponent_Listing.Name = _name;
			newMETAView_PhysicalSoftwareComponent_Listing.Description = _description;
			newMETAView_PhysicalSoftwareComponent_Listing.Abbreviation = _abbreviation;
			newMETAView_PhysicalSoftwareComponent_Listing.IsBusinessExternal = _isBusinessExternal;
			newMETAView_PhysicalSoftwareComponent_Listing.DataSourceID = _dataSourceID;
			newMETAView_PhysicalSoftwareComponent_Listing.DataSourceName = _dataSourceName;
			newMETAView_PhysicalSoftwareComponent_Listing.GeneralRemarks = _generalRemarks;
			newMETAView_PhysicalSoftwareComponent_Listing.GapType = _gapType;
			newMETAView_PhysicalSoftwareComponent_Listing.ArchitectureStatus = _architectureStatus;
			newMETAView_PhysicalSoftwareComponent_Listing.ArchitectureStatusDate = _architectureStatusDate;
			newMETAView_PhysicalSoftwareComponent_Listing.DesignRationale = _designRationale;
			return newMETAView_PhysicalSoftwareComponent_Listing;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this._workspaceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WorkspaceName does not allow null values.");
				if (_workspaceName == value)
					return;
					
				this._workspaceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? WorkspaceTypeId
		{
			get
			{
				return this._workspaceTypeId; 
			}
			set
			{
				if (_workspaceTypeId == value && WorkspaceTypeId != null )
					return;
					
				this._workspaceTypeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this._vCStatusID; 
			}
			set
			{
				if (_vCStatusID == value)
					return;
					
				this._vCStatusID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Machine
		{
			get
			{
				return this._machine; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Machine does not allow null values.");
				if (_machine == value)
					return;
					
				this._machine = value;
				this._isDirty = true;
				
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this._vCMachineID; 
			}
			set
			{
				if (_vCMachineID == value)
					return;
					
				this._vCMachineID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InternalName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String InternalName
		{
			get
			{
				return this._internalName; 
			}
			set
			{
				if (_internalName == value)
					return;
					
				this._internalName = value;
				this._isDirty = true;
				
				OnPropertyChanged("InternalName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ConfigurationID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ConfigurationID
		{
			get
			{
				return this._configurationID; 
			}
			set
			{
				if (_configurationID == value)
					return;
					
				this._configurationID = value;
				this._isDirty = true;
				
				OnPropertyChanged("ConfigurationID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoftwareType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SoftwareType
		{
			get
			{
				return this._softwareType; 
			}
			set
			{
				if (_softwareType == value)
					return;
					
				this._softwareType = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoftwareType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SoftwareLevel property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SoftwareLevel
		{
			get
			{
				return this._softwareLevel; 
			}
			set
			{
				if (_softwareLevel == value)
					return;
					
				this._softwareLevel = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoftwareLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsBespoke property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String IsBespoke
		{
			get
			{
				return this._isBespoke; 
			}
			set
			{
				if (_isBespoke == value)
					return;
					
				this._isBespoke = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsBespoke");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserInterfaceType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserInterfaceType
		{
			get
			{
				return this._userInterfaceType; 
			}
			set
			{
				if (_userInterfaceType == value)
					return;
					
				this._userInterfaceType = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserInterfaceType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NumberofUsers property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NumberofUsers
		{
			get
			{
				return this._numberofUsers; 
			}
			set
			{
				if (_numberofUsers == value)
					return;
					
				this._numberofUsers = value;
				this._isDirty = true;
				
				OnPropertyChanged("NumberofUsers");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeverityRating property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeverityRating
		{
			get
			{
				return this._severityRating; 
			}
			set
			{
				if (_severityRating == value)
					return;
					
				this._severityRating = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeverityRating");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Edition property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Edition
		{
			get
			{
				return this._edition; 
			}
			set
			{
				if (_edition == value)
					return;
					
				this._edition = value;
				this._isDirty = true;
				
				OnPropertyChanged("Edition");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Release property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Release
		{
			get
			{
				return this._release; 
			}
			set
			{
				if (_release == value)
					return;
					
				this._release = value;
				this._isDirty = true;
				
				OnPropertyChanged("Release");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ServicePackID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ServicePackID
		{
			get
			{
				return this._servicePackID; 
			}
			set
			{
				if (_servicePackID == value)
					return;
					
				this._servicePackID = value;
				this._isDirty = true;
				
				OnPropertyChanged("ServicePackID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VersionNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VersionNumber
		{
			get
			{
				return this._versionNumber; 
			}
			set
			{
				if (_versionNumber == value)
					return;
					
				this._versionNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("VersionNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ID
		{
			get
			{
				return this._iD; 
			}
			set
			{
				if (_iD == value)
					return;
					
				this._iD = value;
				this._isDirty = true;
				
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PublisherName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PublisherName
		{
			get
			{
				return this._publisherName; 
			}
			set
			{
				if (_publisherName == value)
					return;
					
				this._publisherName = value;
				this._isDirty = true;
				
				OnPropertyChanged("PublisherName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Language property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Language
		{
			get
			{
				return this._language; 
			}
			set
			{
				if (_language == value)
					return;
					
				this._language = value;
				this._isDirty = true;
				
				OnPropertyChanged("Language");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DateCreated property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DateCreated
		{
			get
			{
				return this._dateCreated; 
			}
			set
			{
				if (_dateCreated == value)
					return;
					
				this._dateCreated = value;
				this._isDirty = true;
				
				OnPropertyChanged("DateCreated");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DatePurchased property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DatePurchased
		{
			get
			{
				return this._datePurchased; 
			}
			set
			{
				if (_datePurchased == value)
					return;
					
				this._datePurchased = value;
				this._isDirty = true;
				
				OnPropertyChanged("DatePurchased");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LicenseNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LicenseNumber
		{
			get
			{
				return this._licenseNumber; 
			}
			set
			{
				if (_licenseNumber == value)
					return;
					
				this._licenseNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("LicenseNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HasCopyright property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HasCopyright
		{
			get
			{
				return this._hasCopyright; 
			}
			set
			{
				if (_hasCopyright == value)
					return;
					
				this._hasCopyright = value;
				this._isDirty = true;
				
				OnPropertyChanged("HasCopyright");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Abbreviation property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Abbreviation
		{
			get
			{
				return this._abbreviation; 
			}
			set
			{
				if (_abbreviation == value)
					return;
					
				this._abbreviation = value;
				this._isDirty = true;
				
				OnPropertyChanged("Abbreviation");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsBusinessExternal property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String IsBusinessExternal
		{
			get
			{
				return this._isBusinessExternal; 
			}
			set
			{
				if (_isBusinessExternal == value)
					return;
					
				this._isBusinessExternal = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsBusinessExternal");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DataSourceID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DataSourceID
		{
			get
			{
				return this._dataSourceID; 
			}
			set
			{
				if (_dataSourceID == value)
					return;
					
				this._dataSourceID = value;
				this._isDirty = true;
				
				OnPropertyChanged("DataSourceID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DataSourceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DataSourceName
		{
			get
			{
				return this._dataSourceName; 
			}
			set
			{
				if (_dataSourceName == value)
					return;
					
				this._dataSourceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DataSourceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GeneralRemarks property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GeneralRemarks
		{
			get
			{
				return this._generalRemarks; 
			}
			set
			{
				if (_generalRemarks == value)
					return;
					
				this._generalRemarks = value;
				this._isDirty = true;
				
				OnPropertyChanged("GeneralRemarks");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GapType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GapType
		{
			get
			{
				return this._gapType; 
			}
			set
			{
				if (_gapType == value)
					return;
					
				this._gapType = value;
				this._isDirty = true;
				
				OnPropertyChanged("GapType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ArchitectureStatus property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ArchitectureStatus
		{
			get
			{
				return this._architectureStatus; 
			}
			set
			{
				if (_architectureStatus == value)
					return;
					
				this._architectureStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("ArchitectureStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ArchitectureStatusDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ArchitectureStatusDate
		{
			get
			{
				return this._architectureStatusDate; 
			}
			set
			{
				if (_architectureStatusDate == value)
					return;
					
				this._architectureStatusDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ArchitectureStatusDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DesignRationale property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DesignRationale
		{
			get
			{
				return this._designRationale; 
			}
			set
			{
				if (_designRationale == value)
					return;
					
				this._designRationale = value;
				this._isDirty = true;
				
				OnPropertyChanged("DesignRationale");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "METAView_PhysicalSoftwareComponent_Listing"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed METAView_PhysicalSoftwareComponent_ListingBase Entity 
		///</summary>
		public virtual METAView_PhysicalSoftwareComponent_ListingBase Copy()
		{
			//shallow copy entity
			METAView_PhysicalSoftwareComponent_Listing copy = new METAView_PhysicalSoftwareComponent_Listing();
				copy.WorkspaceName = this.WorkspaceName;
				copy.WorkspaceTypeId = this.WorkspaceTypeId;
				copy.VCStatusID = this.VCStatusID;
				copy.pkid = this.pkid;
				copy.Machine = this.Machine;
				copy.VCMachineID = this.VCMachineID;
				copy.InternalName = this.InternalName;
				copy.ConfigurationID = this.ConfigurationID;
				copy.SoftwareType = this.SoftwareType;
				copy.SoftwareLevel = this.SoftwareLevel;
				copy.IsBespoke = this.IsBespoke;
				copy.UserInterfaceType = this.UserInterfaceType;
				copy.NumberofUsers = this.NumberofUsers;
				copy.SeverityRating = this.SeverityRating;
				copy.Edition = this.Edition;
				copy.Release = this.Release;
				copy.ServicePackID = this.ServicePackID;
				copy.VersionNumber = this.VersionNumber;
				copy.ID = this.ID;
				copy.PublisherName = this.PublisherName;
				copy.Language = this.Language;
				copy.DateCreated = this.DateCreated;
				copy.DatePurchased = this.DatePurchased;
				copy.LicenseNumber = this.LicenseNumber;
				copy.HasCopyright = this.HasCopyright;
				copy.Name = this.Name;
				copy.Description = this.Description;
				copy.Abbreviation = this.Abbreviation;
				copy.IsBusinessExternal = this.IsBusinessExternal;
				copy.DataSourceID = this.DataSourceID;
				copy.DataSourceName = this.DataSourceName;
				copy.GeneralRemarks = this.GeneralRemarks;
				copy.GapType = this.GapType;
				copy.ArchitectureStatus = this.ArchitectureStatus;
				copy.ArchitectureStatusDate = this.ArchitectureStatusDate;
				copy.DesignRationale = this.DesignRationale;
			copy.AcceptChanges();
			return (METAView_PhysicalSoftwareComponent_Listing)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(METAView_PhysicalSoftwareComponent_ListingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="METAView_PhysicalSoftwareComponent_ListingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(METAView_PhysicalSoftwareComponent_ListingBase Object1, METAView_PhysicalSoftwareComponent_ListingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.WorkspaceTypeId != null && Object2.WorkspaceTypeId != null )
			{
				if (Object1.WorkspaceTypeId != Object2.WorkspaceTypeId)
					equal = false;
			}
			else if (Object1.WorkspaceTypeId == null ^ Object1.WorkspaceTypeId == null )
			{
				equal = false;
			}
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if (Object1.pkid != Object2.pkid)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object1.VCMachineID == null )
			{
				equal = false;
			}
			if (Object1.InternalName != null && Object2.InternalName != null )
			{
				if (Object1.InternalName != Object2.InternalName)
					equal = false;
			}
			else if (Object1.InternalName == null ^ Object1.InternalName == null )
			{
				equal = false;
			}
			if (Object1.ConfigurationID != null && Object2.ConfigurationID != null )
			{
				if (Object1.ConfigurationID != Object2.ConfigurationID)
					equal = false;
			}
			else if (Object1.ConfigurationID == null ^ Object1.ConfigurationID == null )
			{
				equal = false;
			}
			if (Object1.SoftwareType != null && Object2.SoftwareType != null )
			{
				if (Object1.SoftwareType != Object2.SoftwareType)
					equal = false;
			}
			else if (Object1.SoftwareType == null ^ Object1.SoftwareType == null )
			{
				equal = false;
			}
			if (Object1.SoftwareLevel != null && Object2.SoftwareLevel != null )
			{
				if (Object1.SoftwareLevel != Object2.SoftwareLevel)
					equal = false;
			}
			else if (Object1.SoftwareLevel == null ^ Object1.SoftwareLevel == null )
			{
				equal = false;
			}
			if (Object1.IsBespoke != null && Object2.IsBespoke != null )
			{
				if (Object1.IsBespoke != Object2.IsBespoke)
					equal = false;
			}
			else if (Object1.IsBespoke == null ^ Object1.IsBespoke == null )
			{
				equal = false;
			}
			if (Object1.UserInterfaceType != null && Object2.UserInterfaceType != null )
			{
				if (Object1.UserInterfaceType != Object2.UserInterfaceType)
					equal = false;
			}
			else if (Object1.UserInterfaceType == null ^ Object1.UserInterfaceType == null )
			{
				equal = false;
			}
			if (Object1.NumberofUsers != null && Object2.NumberofUsers != null )
			{
				if (Object1.NumberofUsers != Object2.NumberofUsers)
					equal = false;
			}
			else if (Object1.NumberofUsers == null ^ Object1.NumberofUsers == null )
			{
				equal = false;
			}
			if (Object1.SeverityRating != null && Object2.SeverityRating != null )
			{
				if (Object1.SeverityRating != Object2.SeverityRating)
					equal = false;
			}
			else if (Object1.SeverityRating == null ^ Object1.SeverityRating == null )
			{
				equal = false;
			}
			if (Object1.Edition != null && Object2.Edition != null )
			{
				if (Object1.Edition != Object2.Edition)
					equal = false;
			}
			else if (Object1.Edition == null ^ Object1.Edition == null )
			{
				equal = false;
			}
			if (Object1.Release != null && Object2.Release != null )
			{
				if (Object1.Release != Object2.Release)
					equal = false;
			}
			else if (Object1.Release == null ^ Object1.Release == null )
			{
				equal = false;
			}
			if (Object1.ServicePackID != null && Object2.ServicePackID != null )
			{
				if (Object1.ServicePackID != Object2.ServicePackID)
					equal = false;
			}
			else if (Object1.ServicePackID == null ^ Object1.ServicePackID == null )
			{
				equal = false;
			}
			if (Object1.VersionNumber != null && Object2.VersionNumber != null )
			{
				if (Object1.VersionNumber != Object2.VersionNumber)
					equal = false;
			}
			else if (Object1.VersionNumber == null ^ Object1.VersionNumber == null )
			{
				equal = false;
			}
			if (Object1.ID != null && Object2.ID != null )
			{
				if (Object1.ID != Object2.ID)
					equal = false;
			}
			else if (Object1.ID == null ^ Object1.ID == null )
			{
				equal = false;
			}
			if (Object1.PublisherName != null && Object2.PublisherName != null )
			{
				if (Object1.PublisherName != Object2.PublisherName)
					equal = false;
			}
			else if (Object1.PublisherName == null ^ Object1.PublisherName == null )
			{
				equal = false;
			}
			if (Object1.Language != null && Object2.Language != null )
			{
				if (Object1.Language != Object2.Language)
					equal = false;
			}
			else if (Object1.Language == null ^ Object1.Language == null )
			{
				equal = false;
			}
			if (Object1.DateCreated != null && Object2.DateCreated != null )
			{
				if (Object1.DateCreated != Object2.DateCreated)
					equal = false;
			}
			else if (Object1.DateCreated == null ^ Object1.DateCreated == null )
			{
				equal = false;
			}
			if (Object1.DatePurchased != null && Object2.DatePurchased != null )
			{
				if (Object1.DatePurchased != Object2.DatePurchased)
					equal = false;
			}
			else if (Object1.DatePurchased == null ^ Object1.DatePurchased == null )
			{
				equal = false;
			}
			if (Object1.LicenseNumber != null && Object2.LicenseNumber != null )
			{
				if (Object1.LicenseNumber != Object2.LicenseNumber)
					equal = false;
			}
			else if (Object1.LicenseNumber == null ^ Object1.LicenseNumber == null )
			{
				equal = false;
			}
			if (Object1.HasCopyright != null && Object2.HasCopyright != null )
			{
				if (Object1.HasCopyright != Object2.HasCopyright)
					equal = false;
			}
			else if (Object1.HasCopyright == null ^ Object1.HasCopyright == null )
			{
				equal = false;
			}
			if (Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object1.Description == null )
			{
				equal = false;
			}
			if (Object1.Abbreviation != null && Object2.Abbreviation != null )
			{
				if (Object1.Abbreviation != Object2.Abbreviation)
					equal = false;
			}
			else if (Object1.Abbreviation == null ^ Object1.Abbreviation == null )
			{
				equal = false;
			}
			if (Object1.IsBusinessExternal != null && Object2.IsBusinessExternal != null )
			{
				if (Object1.IsBusinessExternal != Object2.IsBusinessExternal)
					equal = false;
			}
			else if (Object1.IsBusinessExternal == null ^ Object1.IsBusinessExternal == null )
			{
				equal = false;
			}
			if (Object1.DataSourceID != null && Object2.DataSourceID != null )
			{
				if (Object1.DataSourceID != Object2.DataSourceID)
					equal = false;
			}
			else if (Object1.DataSourceID == null ^ Object1.DataSourceID == null )
			{
				equal = false;
			}
			if (Object1.DataSourceName != null && Object2.DataSourceName != null )
			{
				if (Object1.DataSourceName != Object2.DataSourceName)
					equal = false;
			}
			else if (Object1.DataSourceName == null ^ Object1.DataSourceName == null )
			{
				equal = false;
			}
			if (Object1.GeneralRemarks != null && Object2.GeneralRemarks != null )
			{
				if (Object1.GeneralRemarks != Object2.GeneralRemarks)
					equal = false;
			}
			else if (Object1.GeneralRemarks == null ^ Object1.GeneralRemarks == null )
			{
				equal = false;
			}
			if (Object1.GapType != null && Object2.GapType != null )
			{
				if (Object1.GapType != Object2.GapType)
					equal = false;
			}
			else if (Object1.GapType == null ^ Object1.GapType == null )
			{
				equal = false;
			}
			if (Object1.ArchitectureStatus != null && Object2.ArchitectureStatus != null )
			{
				if (Object1.ArchitectureStatus != Object2.ArchitectureStatus)
					equal = false;
			}
			else if (Object1.ArchitectureStatus == null ^ Object1.ArchitectureStatus == null )
			{
				equal = false;
			}
			if (Object1.ArchitectureStatusDate != null && Object2.ArchitectureStatusDate != null )
			{
				if (Object1.ArchitectureStatusDate != Object2.ArchitectureStatusDate)
					equal = false;
			}
			else if (Object1.ArchitectureStatusDate == null ^ Object1.ArchitectureStatusDate == null )
			{
				equal = false;
			}
			if (Object1.DesignRationale != null && Object2.DesignRationale != null )
			{
				if (Object1.DesignRationale != Object2.DesignRationale)
					equal = false;
			}
			else if (Object1.DesignRationale == null ^ Object1.DesignRationale == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(METAView_PhysicalSoftwareComponent_Listing entity, string propertyName)
		{
			switch (propertyName)
			{
				case "WorkspaceName":
					return entity.WorkspaceName;
				case "WorkspaceTypeId":
					return entity.WorkspaceTypeId;
				case "VCStatusID":
					return entity.VCStatusID;
				case "pkid":
					return entity.pkid;
				case "Machine":
					return entity.Machine;
				case "VCMachineID":
					return entity.VCMachineID;
				case "InternalName":
					return entity.InternalName;
				case "ConfigurationID":
					return entity.ConfigurationID;
				case "SoftwareType":
					return entity.SoftwareType;
				case "SoftwareLevel":
					return entity.SoftwareLevel;
				case "IsBespoke":
					return entity.IsBespoke;
				case "UserInterfaceType":
					return entity.UserInterfaceType;
				case "NumberofUsers":
					return entity.NumberofUsers;
				case "SeverityRating":
					return entity.SeverityRating;
				case "Edition":
					return entity.Edition;
				case "Release":
					return entity.Release;
				case "ServicePackID":
					return entity.ServicePackID;
				case "VersionNumber":
					return entity.VersionNumber;
				case "ID":
					return entity.ID;
				case "PublisherName":
					return entity.PublisherName;
				case "Language":
					return entity.Language;
				case "DateCreated":
					return entity.DateCreated;
				case "DatePurchased":
					return entity.DatePurchased;
				case "LicenseNumber":
					return entity.LicenseNumber;
				case "HasCopyright":
					return entity.HasCopyright;
				case "Name":
					return entity.Name;
				case "Description":
					return entity.Description;
				case "Abbreviation":
					return entity.Abbreviation;
				case "IsBusinessExternal":
					return entity.IsBusinessExternal;
				case "DataSourceID":
					return entity.DataSourceID;
				case "DataSourceName":
					return entity.DataSourceName;
				case "GeneralRemarks":
					return entity.GeneralRemarks;
				case "GapType":
					return entity.GapType;
				case "ArchitectureStatus":
					return entity.ArchitectureStatus;
				case "ArchitectureStatusDate":
					return entity.ArchitectureStatusDate;
				case "DesignRationale":
					return entity.DesignRationale;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as METAView_PhysicalSoftwareComponent_Listing, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{37}{36}- WorkspaceName: {0}{36}- WorkspaceTypeId: {1}{36}- VCStatusID: {2}{36}- pkid: {3}{36}- Machine: {4}{36}- VCMachineID: {5}{36}- InternalName: {6}{36}- ConfigurationID: {7}{36}- SoftwareType: {8}{36}- SoftwareLevel: {9}{36}- IsBespoke: {10}{36}- UserInterfaceType: {11}{36}- NumberofUsers: {12}{36}- SeverityRating: {13}{36}- Edition: {14}{36}- Release: {15}{36}- ServicePackID: {16}{36}- VersionNumber: {17}{36}- ID: {18}{36}- PublisherName: {19}{36}- Language: {20}{36}- DateCreated: {21}{36}- DatePurchased: {22}{36}- LicenseNumber: {23}{36}- HasCopyright: {24}{36}- Name: {25}{36}- Description: {26}{36}- Abbreviation: {27}{36}- IsBusinessExternal: {28}{36}- DataSourceID: {29}{36}- DataSourceName: {30}{36}- GeneralRemarks: {31}{36}- GapType: {32}{36}- ArchitectureStatus: {33}{36}- ArchitectureStatusDate: {34}{36}- DesignRationale: {35}{36}", 
				this.WorkspaceName,
				(this.WorkspaceTypeId == null) ? string.Empty : this.WorkspaceTypeId.ToString(),
			     
				this.VCStatusID,
				this.pkid,
				this.Machine,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
			     
				(this.InternalName == null) ? string.Empty : this.InternalName.ToString(),
			     
				(this.ConfigurationID == null) ? string.Empty : this.ConfigurationID.ToString(),
			     
				(this.SoftwareType == null) ? string.Empty : this.SoftwareType.ToString(),
			     
				(this.SoftwareLevel == null) ? string.Empty : this.SoftwareLevel.ToString(),
			     
				(this.IsBespoke == null) ? string.Empty : this.IsBespoke.ToString(),
			     
				(this.UserInterfaceType == null) ? string.Empty : this.UserInterfaceType.ToString(),
			     
				(this.NumberofUsers == null) ? string.Empty : this.NumberofUsers.ToString(),
			     
				(this.SeverityRating == null) ? string.Empty : this.SeverityRating.ToString(),
			     
				(this.Edition == null) ? string.Empty : this.Edition.ToString(),
			     
				(this.Release == null) ? string.Empty : this.Release.ToString(),
			     
				(this.ServicePackID == null) ? string.Empty : this.ServicePackID.ToString(),
			     
				(this.VersionNumber == null) ? string.Empty : this.VersionNumber.ToString(),
			     
				(this.ID == null) ? string.Empty : this.ID.ToString(),
			     
				(this.PublisherName == null) ? string.Empty : this.PublisherName.ToString(),
			     
				(this.Language == null) ? string.Empty : this.Language.ToString(),
			     
				(this.DateCreated == null) ? string.Empty : this.DateCreated.ToString(),
			     
				(this.DatePurchased == null) ? string.Empty : this.DatePurchased.ToString(),
			     
				(this.LicenseNumber == null) ? string.Empty : this.LicenseNumber.ToString(),
			     
				(this.HasCopyright == null) ? string.Empty : this.HasCopyright.ToString(),
			     
				(this.Name == null) ? string.Empty : this.Name.ToString(),
			     
				(this.Description == null) ? string.Empty : this.Description.ToString(),
			     
				(this.Abbreviation == null) ? string.Empty : this.Abbreviation.ToString(),
			     
				(this.IsBusinessExternal == null) ? string.Empty : this.IsBusinessExternal.ToString(),
			     
				(this.DataSourceID == null) ? string.Empty : this.DataSourceID.ToString(),
			     
				(this.DataSourceName == null) ? string.Empty : this.DataSourceName.ToString(),
			     
				(this.GeneralRemarks == null) ? string.Empty : this.GeneralRemarks.ToString(),
			     
				(this.GapType == null) ? string.Empty : this.GapType.ToString(),
			     
				(this.ArchitectureStatus == null) ? string.Empty : this.ArchitectureStatus.ToString(),
			     
				(this.ArchitectureStatusDate == null) ? string.Empty : this.ArchitectureStatusDate.ToString(),
			     
				(this.DesignRationale == null) ? string.Empty : this.DesignRationale.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the METAView_PhysicalSoftwareComponent_Listing columns.
	/// </summary>
	[Serializable]
	public enum METAView_PhysicalSoftwareComponent_ListingColumn
	{
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName,
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeId")]
		[ColumnEnum("WorkspaceTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeId,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		pkid,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Machine,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID,
		/// <summary>
		/// InternalName : 
		/// </summary>
		[EnumTextValue("InternalName")]
		[ColumnEnum("InternalName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		InternalName,
		/// <summary>
		/// ConfigurationID : 
		/// </summary>
		[EnumTextValue("ConfigurationID")]
		[ColumnEnum("ConfigurationID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ConfigurationID,
		/// <summary>
		/// SoftwareType : 
		/// </summary>
		[EnumTextValue("SoftwareType")]
		[ColumnEnum("SoftwareType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SoftwareType,
		/// <summary>
		/// SoftwareLevel : 
		/// </summary>
		[EnumTextValue("SoftwareLevel")]
		[ColumnEnum("SoftwareLevel", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SoftwareLevel,
		/// <summary>
		/// IsBespoke : 
		/// </summary>
		[EnumTextValue("IsBespoke")]
		[ColumnEnum("IsBespoke", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		IsBespoke,
		/// <summary>
		/// UserInterfaceType : 
		/// </summary>
		[EnumTextValue("UserInterfaceType")]
		[ColumnEnum("UserInterfaceType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		UserInterfaceType,
		/// <summary>
		/// NumberofUsers : 
		/// </summary>
		[EnumTextValue("NumberofUsers")]
		[ColumnEnum("NumberofUsers", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NumberofUsers,
		/// <summary>
		/// SeverityRating : 
		/// </summary>
		[EnumTextValue("SeverityRating")]
		[ColumnEnum("SeverityRating", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SeverityRating,
		/// <summary>
		/// Edition : 
		/// </summary>
		[EnumTextValue("Edition")]
		[ColumnEnum("Edition", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Edition,
		/// <summary>
		/// Release : 
		/// </summary>
		[EnumTextValue("Release")]
		[ColumnEnum("Release", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Release,
		/// <summary>
		/// ServicePackID : 
		/// </summary>
		[EnumTextValue("ServicePackID")]
		[ColumnEnum("ServicePackID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ServicePackID,
		/// <summary>
		/// VersionNumber : 
		/// </summary>
		[EnumTextValue("VersionNumber")]
		[ColumnEnum("VersionNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		VersionNumber,
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ID,
		/// <summary>
		/// PublisherName : 
		/// </summary>
		[EnumTextValue("PublisherName")]
		[ColumnEnum("PublisherName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		PublisherName,
		/// <summary>
		/// Language : 
		/// </summary>
		[EnumTextValue("Language")]
		[ColumnEnum("Language", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Language,
		/// <summary>
		/// DateCreated : 
		/// </summary>
		[EnumTextValue("DateCreated")]
		[ColumnEnum("DateCreated", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DateCreated,
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		[EnumTextValue("DatePurchased")]
		[ColumnEnum("DatePurchased", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DatePurchased,
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		[EnumTextValue("LicenseNumber")]
		[ColumnEnum("LicenseNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LicenseNumber,
		/// <summary>
		/// HasCopyright : 
		/// </summary>
		[EnumTextValue("HasCopyright")]
		[ColumnEnum("HasCopyright", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		HasCopyright,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Name,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Description,
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		[EnumTextValue("Abbreviation")]
		[ColumnEnum("Abbreviation", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Abbreviation,
		/// <summary>
		/// IsBusinessExternal : 
		/// </summary>
		[EnumTextValue("IsBusinessExternal")]
		[ColumnEnum("IsBusinessExternal", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		IsBusinessExternal,
		/// <summary>
		/// DataSourceID : 
		/// </summary>
		[EnumTextValue("DataSourceID")]
		[ColumnEnum("DataSourceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DataSourceID,
		/// <summary>
		/// DataSourceName : 
		/// </summary>
		[EnumTextValue("DataSourceName")]
		[ColumnEnum("DataSourceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DataSourceName,
		/// <summary>
		/// GeneralRemarks : 
		/// </summary>
		[EnumTextValue("GeneralRemarks")]
		[ColumnEnum("GeneralRemarks", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GeneralRemarks,
		/// <summary>
		/// GapType : 
		/// </summary>
		[EnumTextValue("GapType")]
		[ColumnEnum("GapType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GapType,
		/// <summary>
		/// ArchitectureStatus : 
		/// </summary>
		[EnumTextValue("ArchitectureStatus")]
		[ColumnEnum("ArchitectureStatus", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ArchitectureStatus,
		/// <summary>
		/// ArchitectureStatusDate : 
		/// </summary>
		[EnumTextValue("ArchitectureStatusDate")]
		[ColumnEnum("ArchitectureStatusDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ArchitectureStatusDate,
		/// <summary>
		/// DesignRationale : 
		/// </summary>
		[EnumTextValue("DesignRationale")]
		[ColumnEnum("DesignRationale", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DesignRationale
	}//End enum

} // end namespace
