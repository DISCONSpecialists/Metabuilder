
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ObjectFieldValue.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using MetaBuilder.BusinessLogic.Validation;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'ObjectFieldValue' table. [No description found the database]	
	///</summary>
	[Serializable]


	[DataObject, CLSCompliant(true)]
	public abstract partial class ObjectFieldValueBase : EntityBase, IObjectFieldValue, IEntityId<ObjectFieldValueKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ObjectFieldValueEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ObjectFieldValueEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ObjectFieldValueEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ObjectFieldValue> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ObjectFieldValueEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ObjectFieldValueEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ObjectFieldValueBase"/> instance.
		///</summary>
		public ObjectFieldValueBase()
		{
			this.entityData = new ObjectFieldValueEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ObjectFieldValueBase"/> instance.
		///</summary>
		///<param name="_objectID"></param>
		///<param name="_fieldID"></param>
		///<param name="_valueString"></param>
		///<param name="_valueInt"></param>
		///<param name="_valueDouble"></param>
		///<param name="_valueObjectID"></param>
		///<param name="_valueDate"></param>
		///<param name="_valueBoolean"></param>
		///<param name="_valueLongText"></param>
		///<param name="_valueRTF"></param>
		///<param name="_machineID"></param>
		public ObjectFieldValueBase(System.Int32 _objectID, System.Int32 _fieldID, System.String _valueString, 
			System.Int32? _valueInt, System.Decimal? _valueDouble, System.Int32? _valueObjectID, 
			System.DateTime? _valueDate, System.Boolean? _valueBoolean, System.String _valueLongText, 
			System.String _valueRTF, System.String _machineID)
		{
			this.entityData = new ObjectFieldValueEntityData();
			this.backupData = null;

			this.ObjectID = _objectID;
			this.FieldID = _fieldID;
			this.ValueString = _valueString;
			this.ValueInt = _valueInt;
			this.ValueDouble = _valueDouble;
			this.ValueObjectID = _valueObjectID;
			this.ValueDate = _valueDate;
			this.ValueBoolean = _valueBoolean;
			this.ValueLongText = _valueLongText;
			this.ValueRTF = _valueRTF;
			this.MachineID = _machineID;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ObjectFieldValue"/> instance.
		///</summary>
		///<param name="_objectID"></param>
		///<param name="_fieldID"></param>
		///<param name="_valueString"></param>
		///<param name="_valueInt"></param>
		///<param name="_valueDouble"></param>
		///<param name="_valueObjectID"></param>
		///<param name="_valueDate"></param>
		///<param name="_valueBoolean"></param>
		///<param name="_valueLongText"></param>
		///<param name="_valueRTF"></param>
		///<param name="_machineID"></param>
		public static ObjectFieldValue CreateObjectFieldValue(System.Int32 _objectID, System.Int32 _fieldID, System.String _valueString, 
			System.Int32? _valueInt, System.Decimal? _valueDouble, System.Int32? _valueObjectID, 
			System.DateTime? _valueDate, System.Boolean? _valueBoolean, System.String _valueLongText, 
			System.String _valueRTF, System.String _machineID)
		{
			ObjectFieldValue newObjectFieldValue = new ObjectFieldValue();
			newObjectFieldValue.ObjectID = _objectID;
			newObjectFieldValue.FieldID = _fieldID;
			newObjectFieldValue.ValueString = _valueString;
			newObjectFieldValue.ValueInt = _valueInt;
			newObjectFieldValue.ValueDouble = _valueDouble;
			newObjectFieldValue.ValueObjectID = _valueObjectID;
			newObjectFieldValue.ValueDate = _valueDate;
			newObjectFieldValue.ValueBoolean = _valueBoolean;
			newObjectFieldValue.ValueLongText = _valueLongText;
			newObjectFieldValue.ValueRTF = _valueRTF;
			newObjectFieldValue.MachineID = _machineID;
			return newObjectFieldValue;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ObjectID
		{
			get
			{
				return this.entityData.ObjectID; 
			}
			
			set
			{
				if (this.entityData.ObjectID == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ObjectID, this.entityData.ObjectID);
				this.entityData.ObjectID = value;
				this.EntityId.ObjectID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ObjectID, this.entityData.ObjectID);
				OnPropertyChanged("ObjectID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ObjectID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ObjectID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalObjectID
		{
			get { return this.entityData.OriginalObjectID; }
			set { this.entityData.OriginalObjectID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FieldID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 FieldID
		{
			get
			{
				return this.entityData.FieldID; 
			}
			
			set
			{
				if (this.entityData.FieldID == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.FieldID, this.entityData.FieldID);
				this.entityData.FieldID = value;
				this.EntityId.FieldID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.FieldID, this.entityData.FieldID);
				OnPropertyChanged("FieldID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FieldID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FieldID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalFieldID
		{
			get { return this.entityData.OriginalFieldID; }
			set { this.entityData.OriginalFieldID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ValueString property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ValueString
		{
			get
			{
				return this.entityData.ValueString; 
			}
			
			set
			{
				if (this.entityData.ValueString == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueString, this.entityData.ValueString);
				this.entityData.ValueString = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueString, this.entityData.ValueString);
				OnPropertyChanged("ValueString");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueInt property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsValueIntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ValueInt
		{
			get
			{
				return this.entityData.ValueInt; 
			}
			
			set
			{
				if (this.entityData.ValueInt == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueInt, this.entityData.ValueInt);
				this.entityData.ValueInt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueInt, this.entityData.ValueInt);
				OnPropertyChanged("ValueInt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueDouble property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsValueDoubleNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ValueDouble
		{
			get
			{
				return this.entityData.ValueDouble; 
			}
			
			set
			{
				if (this.entityData.ValueDouble == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueDouble, this.entityData.ValueDouble);
				this.entityData.ValueDouble = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueDouble, this.entityData.ValueDouble);
				OnPropertyChanged("ValueDouble");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsValueObjectIDNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ValueObjectID
		{
			get
			{
				return this.entityData.ValueObjectID; 
			}
			
			set
			{
				if (this.entityData.ValueObjectID == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueObjectID, this.entityData.ValueObjectID);
				this.entityData.ValueObjectID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueObjectID, this.entityData.ValueObjectID);
				OnPropertyChanged("ValueObjectID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsValueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ValueDate
		{
			get
			{
				return this.entityData.ValueDate; 
			}
			
			set
			{
				if (this.entityData.ValueDate == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueDate, this.entityData.ValueDate);
				this.entityData.ValueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueDate, this.entityData.ValueDate);
				OnPropertyChanged("ValueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueBoolean property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsValueBooleanNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ValueBoolean
		{
			get
			{
				return this.entityData.ValueBoolean; 
			}
			
			set
			{
				if (this.entityData.ValueBoolean == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueBoolean, this.entityData.ValueBoolean);
				this.entityData.ValueBoolean = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueBoolean, this.entityData.ValueBoolean);
				OnPropertyChanged("ValueBoolean");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueLongText property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ValueLongText
		{
			get
			{
				return this.entityData.ValueLongText; 
			}
			
			set
			{
				if (this.entityData.ValueLongText == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueLongText, this.entityData.ValueLongText);
				this.entityData.ValueLongText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueLongText, this.entityData.ValueLongText);
				OnPropertyChanged("ValueLongText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValueRTF property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ValueRTF
		{
			get
			{
				return this.entityData.ValueRTF; 
			}
			
			set
			{
				if (this.entityData.ValueRTF == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.ValueRTF, this.entityData.ValueRTF);
				this.entityData.ValueRTF = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.ValueRTF, this.entityData.ValueRTF);
				OnPropertyChanged("ValueRTF");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String MachineID
		{
			get
			{
				return this.entityData.MachineID; 
			}
			
			set
			{
				if (this.entityData.MachineID == value)
					return;
					
				OnColumnChanging(ObjectFieldValueColumn.MachineID, this.entityData.MachineID);
				this.entityData.MachineID = value;
				this.EntityId.MachineID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ObjectFieldValueColumn.MachineID, this.entityData.MachineID);
				OnPropertyChanged("MachineID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MachineID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MachineID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMachineID
		{
			get { return this.entityData.OriginalMachineID; }
			set { this.entityData.OriginalMachineID = value; }
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Field"/>.
		/// </summary>
		/// <value>The source Field for FieldID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Field FieldIDSource
      	{
            get { return entityData.FieldIDSource; }
            set { entityData.FieldIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MetaObject"/>.
		/// </summary>
		/// <value>The source MetaObject for ObjectIDMachineID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MetaObject ObjectIDMachineIDSource
      	{
            get { return entityData.ObjectIDMachineIDSource; }
            set { entityData.ObjectIDMachineIDSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ValueString", "Value String", 255));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MachineID", "Machine ID"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MachineID", "Machine ID", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ObjectFieldValue"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ObjectID", "FieldID", "ValueString", "ValueInt", "ValueDouble", "ValueObjectID", "ValueDate", "ValueBoolean", "ValueLongText", "ValueRTF", "MachineID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ObjectFieldValueEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ObjectFieldValue) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ObjectFieldValue>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ObjectFieldValue);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ObjectFieldValue Entity 
		///</summary>
		protected virtual ObjectFieldValue Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ObjectFieldValue copy = new ObjectFieldValue();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ObjectID = this.ObjectID;
					copy.OriginalObjectID = this.OriginalObjectID;
				copy.FieldID = this.FieldID;
					copy.OriginalFieldID = this.OriginalFieldID;
				copy.ValueString = this.ValueString;
				copy.ValueInt = this.ValueInt;
				copy.ValueDouble = this.ValueDouble;
				copy.ValueObjectID = this.ValueObjectID;
				copy.ValueDate = this.ValueDate;
				copy.ValueBoolean = this.ValueBoolean;
				copy.ValueLongText = this.ValueLongText;
				copy.ValueRTF = this.ValueRTF;
				copy.MachineID = this.MachineID;
					copy.OriginalMachineID = this.OriginalMachineID;
			
			if (this.FieldIDSource != null && existingCopies.Contains(this.FieldIDSource))
				copy.FieldIDSource = existingCopies[this.FieldIDSource] as Field;
			else
				copy.FieldIDSource = MakeCopyOf(this.FieldIDSource, existingCopies) as Field;
			if (this.ObjectIDMachineIDSource != null && existingCopies.Contains(this.ObjectIDMachineIDSource))
				copy.ObjectIDMachineIDSource = existingCopies[this.ObjectIDMachineIDSource] as MetaObject;
			else
				copy.ObjectIDMachineIDSource = MakeCopyOf(this.ObjectIDMachineIDSource, existingCopies) as MetaObject;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ObjectFieldValue Entity 
		///</summary>
		public virtual ObjectFieldValue Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ObjectFieldValue Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ObjectFieldValue DeepCopy()
		{
			return EntityHelper.Clone<ObjectFieldValue>(this as ObjectFieldValue);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ObjectFieldValueEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ObjectFieldValueEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ObjectFieldValueEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ObjectFieldValueColumn column)
		{
			switch(column)
			{
					case ObjectFieldValueColumn.ObjectID:
					return entityData.ObjectID != _originalData.ObjectID;
					case ObjectFieldValueColumn.FieldID:
					return entityData.FieldID != _originalData.FieldID;
					case ObjectFieldValueColumn.ValueString:
					return entityData.ValueString != _originalData.ValueString;
					case ObjectFieldValueColumn.ValueInt:
					return entityData.ValueInt != _originalData.ValueInt;
					case ObjectFieldValueColumn.ValueDouble:
					return entityData.ValueDouble != _originalData.ValueDouble;
					case ObjectFieldValueColumn.ValueObjectID:
					return entityData.ValueObjectID != _originalData.ValueObjectID;
					case ObjectFieldValueColumn.ValueDate:
					return entityData.ValueDate != _originalData.ValueDate;
					case ObjectFieldValueColumn.ValueBoolean:
					return entityData.ValueBoolean != _originalData.ValueBoolean;
					case ObjectFieldValueColumn.ValueLongText:
					return entityData.ValueLongText != _originalData.ValueLongText;
					case ObjectFieldValueColumn.ValueRTF:
					return entityData.ValueRTF != _originalData.ValueRTF;
					case ObjectFieldValueColumn.MachineID:
					return entityData.MachineID != _originalData.MachineID;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ObjectFieldValueColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ObjectID != _originalData.ObjectID;
			result = result || entityData.FieldID != _originalData.FieldID;
			result = result || entityData.ValueString != _originalData.ValueString;
			result = result || entityData.ValueInt != _originalData.ValueInt;
			result = result || entityData.ValueDouble != _originalData.ValueDouble;
			result = result || entityData.ValueObjectID != _originalData.ValueObjectID;
			result = result || entityData.ValueDate != _originalData.ValueDate;
			result = result || entityData.ValueBoolean != _originalData.ValueBoolean;
			result = result || entityData.ValueLongText != _originalData.ValueLongText;
			result = result || entityData.ValueRTF != _originalData.ValueRTF;
			result = result || entityData.MachineID != _originalData.MachineID;
			return result;
		}	
		
		///<summary>
		///  Returns a ObjectFieldValue Entity with the original data.
		///</summary>
		public ObjectFieldValue GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateObjectFieldValue(
				_originalData.ObjectID,
				_originalData.FieldID,
				_originalData.ValueString,
				_originalData.ValueInt,
				_originalData.ValueDouble,
				_originalData.ValueObjectID,
				_originalData.ValueDate,
				_originalData.ValueBoolean,
				_originalData.ValueLongText,
				_originalData.ValueRTF,
				_originalData.MachineID
				);
				
			return (ObjectFieldValue)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ObjectFieldValueBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ObjectFieldValueBase)
				return ValueEquals(this, (ObjectFieldValueBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ObjectFieldValueBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ObjectID.GetHashCode() ^ 
					this.FieldID.GetHashCode() ^ 
					((this.ValueString == null) ? string.Empty : this.ValueString.ToString()).GetHashCode() ^ 
					((this.ValueInt == null) ? string.Empty : this.ValueInt.ToString()).GetHashCode() ^ 
					((this.ValueDouble == null) ? string.Empty : this.ValueDouble.ToString()).GetHashCode() ^ 
					((this.ValueObjectID == null) ? string.Empty : this.ValueObjectID.ToString()).GetHashCode() ^ 
					((this.ValueDate == null) ? string.Empty : this.ValueDate.ToString()).GetHashCode() ^ 
					((this.ValueBoolean == null) ? string.Empty : this.ValueBoolean.ToString()).GetHashCode() ^ 
					((this.ValueLongText == null) ? string.Empty : this.ValueLongText.ToString()).GetHashCode() ^ 
					((this.ValueRTF == null) ? string.Empty : this.ValueRTF.ToString()).GetHashCode() ^ 
					this.MachineID.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ObjectFieldValueBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ObjectFieldValueBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ObjectFieldValueBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ObjectFieldValueBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ObjectFieldValueBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ObjectFieldValueBase Object1, ObjectFieldValueBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ObjectID != Object2.ObjectID)
				equal = false;
			if (Object1.FieldID != Object2.FieldID)
				equal = false;
			if ( Object1.ValueString != null && Object2.ValueString != null )
			{
				if (Object1.ValueString != Object2.ValueString)
					equal = false;
			}
			else if (Object1.ValueString == null ^ Object2.ValueString == null )
			{
				equal = false;
			}
			if ( Object1.ValueInt != null && Object2.ValueInt != null )
			{
				if (Object1.ValueInt != Object2.ValueInt)
					equal = false;
			}
			else if (Object1.ValueInt == null ^ Object2.ValueInt == null )
			{
				equal = false;
			}
			if ( Object1.ValueDouble != null && Object2.ValueDouble != null )
			{
				if (Object1.ValueDouble != Object2.ValueDouble)
					equal = false;
			}
			else if (Object1.ValueDouble == null ^ Object2.ValueDouble == null )
			{
				equal = false;
			}
			if ( Object1.ValueObjectID != null && Object2.ValueObjectID != null )
			{
				if (Object1.ValueObjectID != Object2.ValueObjectID)
					equal = false;
			}
			else if (Object1.ValueObjectID == null ^ Object2.ValueObjectID == null )
			{
				equal = false;
			}
			if ( Object1.ValueDate != null && Object2.ValueDate != null )
			{
				if (Object1.ValueDate != Object2.ValueDate)
					equal = false;
			}
			else if (Object1.ValueDate == null ^ Object2.ValueDate == null )
			{
				equal = false;
			}
			if ( Object1.ValueBoolean != null && Object2.ValueBoolean != null )
			{
				if (Object1.ValueBoolean != Object2.ValueBoolean)
					equal = false;
			}
			else if (Object1.ValueBoolean == null ^ Object2.ValueBoolean == null )
			{
				equal = false;
			}
			if ( Object1.ValueLongText != null && Object2.ValueLongText != null )
			{
				if (Object1.ValueLongText != Object2.ValueLongText)
					equal = false;
			}
			else if (Object1.ValueLongText == null ^ Object2.ValueLongText == null )
			{
				equal = false;
			}
			if ( Object1.ValueRTF != null && Object2.ValueRTF != null )
			{
				if (Object1.ValueRTF != Object2.ValueRTF)
					equal = false;
			}
			else if (Object1.ValueRTF == null ^ Object2.ValueRTF == null )
			{
				equal = false;
			}
			if (Object1.MachineID != Object2.MachineID)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ObjectFieldValueBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ObjectFieldValueComparer GetComparer()
        {
            return new ObjectFieldValueComparer();
        }
        */

        // Comparer delegates back to ObjectFieldValue
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ObjectFieldValue rhs, ObjectFieldValueColumn which)
        {
            switch (which)
            {
            	
            	
            	case ObjectFieldValueColumn.ObjectID:
            		return this.ObjectID.CompareTo(rhs.ObjectID);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.FieldID:
            		return this.FieldID.CompareTo(rhs.FieldID);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueString:
            		return this.ValueString.CompareTo(rhs.ValueString);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueInt:
            		return this.ValueInt.Value.CompareTo(rhs.ValueInt.Value);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueDouble:
            		return this.ValueDouble.Value.CompareTo(rhs.ValueDouble.Value);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueObjectID:
            		return this.ValueObjectID.Value.CompareTo(rhs.ValueObjectID.Value);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueDate:
            		return this.ValueDate.Value.CompareTo(rhs.ValueDate.Value);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueBoolean:
            		return this.ValueBoolean.Value.CompareTo(rhs.ValueBoolean.Value);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueLongText:
            		return this.ValueLongText.CompareTo(rhs.ValueLongText);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.ValueRTF:
            		return this.ValueRTF.CompareTo(rhs.ValueRTF);
            		
            		                 
            	
            	
            	case ObjectFieldValueColumn.MachineID:
            		return this.MachineID.CompareTo(rhs.MachineID);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ObjectFieldValueKey> Members
		
		// member variable for the EntityId property
		private ObjectFieldValueKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ObjectFieldValueKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ObjectFieldValueKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ObjectFieldValue")
					.Append("|").Append( this.ObjectID.ToString())
					.Append("|").Append( this.FieldID.ToString())
					.Append("|").Append( this.MachineID.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- ObjectID: {0}{11}- FieldID: {1}{11}- ValueString: {2}{11}- ValueInt: {3}{11}- ValueDouble: {4}{11}- ValueObjectID: {5}{11}- ValueDate: {6}{11}- ValueBoolean: {7}{11}- ValueLongText: {8}{11}- ValueRTF: {9}{11}- MachineID: {10}{11}{13}", 
				this.ObjectID,
				this.FieldID,
				(this.ValueString == null) ? string.Empty : this.ValueString.ToString(),
				(this.ValueInt == null) ? string.Empty : this.ValueInt.ToString(),
				(this.ValueDouble == null) ? string.Empty : this.ValueDouble.ToString(),
				(this.ValueObjectID == null) ? string.Empty : this.ValueObjectID.ToString(),
				(this.ValueDate == null) ? string.Empty : this.ValueDate.ToString(),
				(this.ValueBoolean == null) ? string.Empty : this.ValueBoolean.ToString(),
				(this.ValueLongText == null) ? string.Empty : this.ValueLongText.ToString(),
				(this.ValueRTF == null) ? string.Empty : this.ValueRTF.ToString(),
				this.MachineID,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ObjectFieldValue' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ObjectFieldValueEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ObjectID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ObjectFieldValue"</remarks>
		public System.Int32 ObjectID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalObjectID;
		
		/// <summary>			
		/// FieldID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ObjectFieldValue"</remarks>
		public System.Int32 FieldID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalFieldID;
		
		/// <summary>			
		/// MachineID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ObjectFieldValue"</remarks>
		public System.String MachineID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMachineID;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ValueString : 
		/// </summary>
		public System.String		  ValueString = null;
		
		/// <summary>
		/// ValueInt : 
		/// </summary>
		public System.Int32?		  ValueInt = null;
		
		/// <summary>
		/// ValueDouble : 
		/// </summary>
		public System.Decimal?		  ValueDouble = null;
		
		/// <summary>
		/// ValueObjectID : 
		/// </summary>
		public System.Int32?		  ValueObjectID = null;
		
		/// <summary>
		/// ValueDate : 
		/// </summary>
		public System.DateTime?		  ValueDate = null;
		
		/// <summary>
		/// ValueBoolean : 
		/// </summary>
		public System.Boolean?		  ValueBoolean = null;
		
		/// <summary>
		/// ValueLongText : 
		/// </summary>
		public System.String		  ValueLongText = null;
		
		/// <summary>
		/// ValueRTF : 
		/// </summary>
		public System.String		  ValueRTF = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Field _fieldIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Field"/>.
		/// </summary>
		/// <value>The source Field for FieldID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Field FieldIDSource
      	{
            get { return this._fieldIDSource; }
            set { this._fieldIDSource = value; }
      	}
		private MetaObject _objectIDMachineIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MetaObject"/>.
		/// </summary>
		/// <value>The source MetaObject for ObjectIDMachineID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MetaObject ObjectIDMachineIDSource
      	{
            get { return this._objectIDMachineIDSource; }
            set { this._objectIDMachineIDSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ObjectFieldValueEntityData _tmp = new ObjectFieldValueEntityData();
						
			_tmp.ObjectID = this.ObjectID;
			_tmp.OriginalObjectID = this.OriginalObjectID;
			_tmp.FieldID = this.FieldID;
			_tmp.OriginalFieldID = this.OriginalFieldID;
			_tmp.MachineID = this.MachineID;
			_tmp.OriginalMachineID = this.OriginalMachineID;
			
			_tmp.ValueString = this.ValueString;
			_tmp.ValueInt = this.ValueInt;
			_tmp.ValueDouble = this.ValueDouble;
			_tmp.ValueObjectID = this.ValueObjectID;
			_tmp.ValueDate = this.ValueDate;
			_tmp.ValueBoolean = this.ValueBoolean;
			_tmp.ValueLongText = this.ValueLongText;
			_tmp.ValueRTF = this.ValueRTF;
			
			#region Source Parent Composite Entities
			if (this.FieldIDSource != null)
				_tmp.FieldIDSource = MakeCopyOf(this.FieldIDSource) as Field;
			if (this.ObjectIDMachineIDSource != null)
				_tmp.ObjectIDMachineIDSource = MakeCopyOf(this.ObjectIDMachineIDSource) as MetaObject;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ObjectFieldValueEntityData _tmp = new ObjectFieldValueEntityData();
						
			_tmp.ObjectID = this.ObjectID;
			_tmp.OriginalObjectID = this.OriginalObjectID;
			_tmp.FieldID = this.FieldID;
			_tmp.OriginalFieldID = this.OriginalFieldID;
			_tmp.MachineID = this.MachineID;
			_tmp.OriginalMachineID = this.OriginalMachineID;
			
			_tmp.ValueString = this.ValueString;
			_tmp.ValueInt = this.ValueInt;
			_tmp.ValueDouble = this.ValueDouble;
			_tmp.ValueObjectID = this.ValueObjectID;
			_tmp.ValueDate = this.ValueDate;
			_tmp.ValueBoolean = this.ValueBoolean;
			_tmp.ValueLongText = this.ValueLongText;
			_tmp.ValueRTF = this.ValueRTF;
			
			#region Source Parent Composite Entities
			if (this.FieldIDSource != null && existingCopies.Contains(this.FieldIDSource))
				_tmp.FieldIDSource = existingCopies[this.FieldIDSource] as Field;
			else
				_tmp.FieldIDSource = MakeCopyOf(this.FieldIDSource, existingCopies) as Field;
			if (this.ObjectIDMachineIDSource != null && existingCopies.Contains(this.ObjectIDMachineIDSource))
				_tmp.ObjectIDMachineIDSource = existingCopies[this.ObjectIDMachineIDSource] as MetaObject;
			else
				_tmp.ObjectIDMachineIDSource = MakeCopyOf(this.ObjectIDMachineIDSource, existingCopies) as MetaObject;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ObjectFieldValueColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ObjectFieldValueColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ObjectFieldValueColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ObjectFieldValueColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ObjectFieldValueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ObjectFieldValueColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ObjectFieldValueEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ObjectFieldValueEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ObjectFieldValueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ObjectFieldValueColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ObjectFieldValueEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ObjectFieldValueEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ObjectFieldValueEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ObjectFieldValue"/> object.
	/// </remarks>
	public class ObjectFieldValueEventArgs : System.EventArgs
	{
		private ObjectFieldValueColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ObjectFieldValueEventArgs class.
		///</summary>
		public ObjectFieldValueEventArgs(ObjectFieldValueColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ObjectFieldValueEventArgs class.
		///</summary>
		public ObjectFieldValueEventArgs(ObjectFieldValueColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ObjectFieldValueColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ObjectFieldValueColumn" />
		public ObjectFieldValueColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ObjectFieldValue related events.
	///</summary>
	public delegate void ObjectFieldValueEventHandler(object sender, ObjectFieldValueEventArgs e);
	
	#region ObjectFieldValueComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ObjectFieldValueComparer : System.Collections.Generic.IComparer<ObjectFieldValue>
	{
		ObjectFieldValueColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ObjectFieldValueComparer"/> class.
        /// </summary>
		public ObjectFieldValueComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ObjectFieldValueComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ObjectFieldValueComparer(ObjectFieldValueColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ObjectFieldValue"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ObjectFieldValue"/> to compare.</param>
        /// <param name="b">The second <c>ObjectFieldValue</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ObjectFieldValue a, ObjectFieldValue b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ObjectFieldValue entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ObjectFieldValue a, ObjectFieldValue b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ObjectFieldValueColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ObjectFieldValueKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ObjectFieldValue"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ObjectFieldValueKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ObjectFieldValueKey class.
		/// </summary>
		public ObjectFieldValueKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ObjectFieldValueKey class.
		/// </summary>
		public ObjectFieldValueKey(ObjectFieldValueBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ObjectID = entity.ObjectID;
				this.FieldID = entity.FieldID;
				this.MachineID = entity.MachineID;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ObjectFieldValueKey class.
		/// </summary>
		public ObjectFieldValueKey(System.Int32 _objectID, System.Int32 _fieldID, System.String _machineID)
		{
			#region Init Properties

			this.ObjectID = _objectID;
			this.FieldID = _fieldID;
			this.MachineID = _machineID;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ObjectFieldValueBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ObjectFieldValueBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ObjectID property
		private System.Int32 _objectID;
		
		/// <summary>
		/// Gets or sets the ObjectID property.
		/// </summary>
		public System.Int32 ObjectID
		{
			get { return _objectID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ObjectID = value;
				
				_objectID = value;
			}
		}
		
		// member variable for the FieldID property
		private System.Int32 _fieldID;
		
		/// <summary>
		/// Gets or sets the FieldID property.
		/// </summary>
		public System.Int32 FieldID
		{
			get { return _fieldID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FieldID = value;
				
				_fieldID = value;
			}
		}
		
		// member variable for the MachineID property
		private System.String _machineID;
		
		/// <summary>
		/// Gets or sets the MachineID property.
		/// </summary>
		public System.String MachineID
		{
			get { return _machineID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MachineID = value;
				
				_machineID = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ObjectID = ( values["ObjectID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ObjectID"], typeof(System.Int32)) : (int)0;
				FieldID = ( values["FieldID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["FieldID"], typeof(System.Int32)) : (int)0;
				MachineID = ( values["MachineID"] != null ) ? (System.String) EntityUtil.ChangeType(values["MachineID"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ObjectID", ObjectID);
			values.Add("FieldID", FieldID);
			values.Add("MachineID", MachineID);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ObjectID: {0}{3}FieldID: {1}{3}MachineID: {2}{3}",
								ObjectID,
								FieldID,
								MachineID,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ObjectFieldValueColumn Enum
	
	/// <summary>
	/// Enumerate the ObjectFieldValue columns.
	/// </summary>
	[Serializable]
	public enum ObjectFieldValueColumn : int
	{
		/// <summary>
		/// ObjectID : 
		/// </summary>
		[EnumTextValue("ObjectID")]
		[ColumnEnum("ObjectID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ObjectID = 1,
		/// <summary>
		/// FieldID : 
		/// </summary>
		[EnumTextValue("FieldID")]
		[ColumnEnum("FieldID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		FieldID = 2,
		/// <summary>
		/// ValueString : 
		/// </summary>
		[EnumTextValue("ValueString")]
		[ColumnEnum("ValueString", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ValueString = 3,
		/// <summary>
		/// ValueInt : 
		/// </summary>
		[EnumTextValue("ValueInt")]
		[ColumnEnum("ValueInt", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ValueInt = 4,
		/// <summary>
		/// ValueDouble : 
		/// </summary>
		[EnumTextValue("ValueDouble")]
		[ColumnEnum("ValueDouble", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ValueDouble = 5,
		/// <summary>
		/// ValueObjectID : 
		/// </summary>
		[EnumTextValue("ValueObjectID")]
		[ColumnEnum("ValueObjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ValueObjectID = 6,
		/// <summary>
		/// ValueDate : 
		/// </summary>
		[EnumTextValue("ValueDate")]
		[ColumnEnum("ValueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ValueDate = 7,
		/// <summary>
		/// ValueBoolean : 
		/// </summary>
		[EnumTextValue("ValueBoolean")]
		[ColumnEnum("ValueBoolean", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ValueBoolean = 8,
		/// <summary>
		/// ValueLongText : 
		/// </summary>
		[EnumTextValue("ValueLongText")]
		[ColumnEnum("ValueLongText", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ValueLongText = 9,
		/// <summary>
		/// ValueRTF : 
		/// </summary>
		[EnumTextValue("ValueRTF")]
		[ColumnEnum("ValueRTF", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ValueRTF = 10,
		/// <summary>
		/// MachineID : 
		/// </summary>
		[EnumTextValue("MachineID")]
		[ColumnEnum("MachineID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		MachineID = 11
	}//End enum

	#endregion ObjectFieldValueColumn Enum

} // end namespace
