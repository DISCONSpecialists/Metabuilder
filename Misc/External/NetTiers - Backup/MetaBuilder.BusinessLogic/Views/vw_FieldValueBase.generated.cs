/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file vw_FieldValue.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'vw_FieldValue' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("vw_FieldValueBase")]
	public abstract partial class vw_FieldValueBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// Field : 
		/// </summary>
		private System.String		  _field = string.Empty;
		
		/// <summary>
		/// ValueString : 
		/// </summary>
		private System.String		  _valueString = null;
		
		/// <summary>
		/// ValueInt : 
		/// </summary>
		private System.Int32?		  _valueInt = null;
		
		/// <summary>
		/// ValueDouble : 
		/// </summary>
		private System.Decimal?		  _valueDouble = null;
		
		/// <summary>
		/// ValueObjectID : 
		/// </summary>
		private System.Int32?		  _valueObjectID = null;
		
		/// <summary>
		/// ValueDate : 
		/// </summary>
		private System.DateTime?		  _valueDate = null;
		
		/// <summary>
		/// ValueBoolean : 
		/// </summary>
		private System.Boolean?		  _valueBoolean = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="vw_FieldValueBase"/> instance.
		///</summary>
		public vw_FieldValueBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="vw_FieldValueBase"/> instance.
		///</summary>
		///<param name="_field"></param>
		///<param name="_valueString"></param>
		///<param name="_valueInt"></param>
		///<param name="_valueDouble"></param>
		///<param name="_valueObjectID"></param>
		///<param name="_valueDate"></param>
		///<param name="_valueBoolean"></param>
		public vw_FieldValueBase(System.String _field, System.String _valueString, System.Int32? _valueInt, System.Decimal? _valueDouble, System.Int32? _valueObjectID, System.DateTime? _valueDate, System.Boolean? _valueBoolean)
		{
			this._field = _field;
			this._valueString = _valueString;
			this._valueInt = _valueInt;
			this._valueDouble = _valueDouble;
			this._valueObjectID = _valueObjectID;
			this._valueDate = _valueDate;
			this._valueBoolean = _valueBoolean;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="vw_FieldValue"/> instance.
		///</summary>
		///<param name="_field"></param>
		///<param name="_valueString"></param>
		///<param name="_valueInt"></param>
		///<param name="_valueDouble"></param>
		///<param name="_valueObjectID"></param>
		///<param name="_valueDate"></param>
		///<param name="_valueBoolean"></param>
		public static vw_FieldValue Createvw_FieldValue(System.String _field, System.String _valueString, System.Int32? _valueInt, System.Decimal? _valueDouble, System.Int32? _valueObjectID, System.DateTime? _valueDate, System.Boolean? _valueBoolean)
		{
			vw_FieldValue newvw_FieldValue = new vw_FieldValue();
			newvw_FieldValue.Field = _field;
			newvw_FieldValue.ValueString = _valueString;
			newvw_FieldValue.ValueInt = _valueInt;
			newvw_FieldValue.ValueDouble = _valueDouble;
			newvw_FieldValue.ValueObjectID = _valueObjectID;
			newvw_FieldValue.ValueDate = _valueDate;
			newvw_FieldValue.ValueBoolean = _valueBoolean;
			return newvw_FieldValue;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the Field property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Field
		{
			get
			{
				return this._field; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Field does not allow null values.");
				if (_field == value)
					return;
					
				this._field = value;
				this._isDirty = true;
				
				OnPropertyChanged("Field");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueString property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ValueString
		{
			get
			{
				return this._valueString; 
			}
			set
			{
				if (_valueString == value)
					return;
					
				this._valueString = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueString");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueInt property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsValueIntNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ValueInt
		{
			get
			{
				return this._valueInt; 
			}
			set
			{
				if (_valueInt == value && ValueInt != null )
					return;
					
				this._valueInt = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueInt");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueDouble property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsValueDoubleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? ValueDouble
		{
			get
			{
				return this._valueDouble; 
			}
			set
			{
				if (_valueDouble == value && ValueDouble != null )
					return;
					
				this._valueDouble = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueDouble");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsValueObjectIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ValueObjectID
		{
			get
			{
				return this._valueObjectID; 
			}
			set
			{
				if (_valueObjectID == value && ValueObjectID != null )
					return;
					
				this._valueObjectID = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueObjectID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsValueDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ValueDate
		{
			get
			{
				return this._valueDate; 
			}
			set
			{
				if (_valueDate == value && ValueDate != null )
					return;
					
				this._valueDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValueBoolean property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsValueBooleanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? ValueBoolean
		{
			get
			{
				return this._valueBoolean; 
			}
			set
			{
				if (_valueBoolean == value && ValueBoolean != null )
					return;
					
				this._valueBoolean = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValueBoolean");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_FieldValue"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed vw_FieldValueBase Entity 
		///</summary>
		public virtual vw_FieldValueBase Copy()
		{
			//shallow copy entity
			vw_FieldValue copy = new vw_FieldValue();
				copy.Field = this.Field;
				copy.ValueString = this.ValueString;
				copy.ValueInt = this.ValueInt;
				copy.ValueDouble = this.ValueDouble;
				copy.ValueObjectID = this.ValueObjectID;
				copy.ValueDate = this.ValueDate;
				copy.ValueBoolean = this.ValueBoolean;
			copy.AcceptChanges();
			return (vw_FieldValue)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="vw_FieldValueBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(vw_FieldValueBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="vw_FieldValueBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="vw_FieldValueBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="vw_FieldValueBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(vw_FieldValueBase Object1, vw_FieldValueBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Field != Object2.Field)
				equal = false;
			if (Object1.ValueString != null && Object2.ValueString != null )
			{
				if (Object1.ValueString != Object2.ValueString)
					equal = false;
			}
			else if (Object1.ValueString == null ^ Object1.ValueString == null )
			{
				equal = false;
			}
			if (Object1.ValueInt != null && Object2.ValueInt != null )
			{
				if (Object1.ValueInt != Object2.ValueInt)
					equal = false;
			}
			else if (Object1.ValueInt == null ^ Object1.ValueInt == null )
			{
				equal = false;
			}
			if (Object1.ValueDouble != null && Object2.ValueDouble != null )
			{
				if (Object1.ValueDouble != Object2.ValueDouble)
					equal = false;
			}
			else if (Object1.ValueDouble == null ^ Object1.ValueDouble == null )
			{
				equal = false;
			}
			if (Object1.ValueObjectID != null && Object2.ValueObjectID != null )
			{
				if (Object1.ValueObjectID != Object2.ValueObjectID)
					equal = false;
			}
			else if (Object1.ValueObjectID == null ^ Object1.ValueObjectID == null )
			{
				equal = false;
			}
			if (Object1.ValueDate != null && Object2.ValueDate != null )
			{
				if (Object1.ValueDate != Object2.ValueDate)
					equal = false;
			}
			else if (Object1.ValueDate == null ^ Object1.ValueDate == null )
			{
				equal = false;
			}
			if (Object1.ValueBoolean != null && Object2.ValueBoolean != null )
			{
				if (Object1.ValueBoolean != Object2.ValueBoolean)
					equal = false;
			}
			else if (Object1.ValueBoolean == null ^ Object1.ValueBoolean == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(vw_FieldValue entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Field":
					return entity.Field;
				case "ValueString":
					return entity.ValueString;
				case "ValueInt":
					return entity.ValueInt;
				case "ValueDouble":
					return entity.ValueDouble;
				case "ValueObjectID":
					return entity.ValueObjectID;
				case "ValueDate":
					return entity.ValueDate;
				case "ValueBoolean":
					return entity.ValueBoolean;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as vw_FieldValue, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- Field: {0}{7}- ValueString: {1}{7}- ValueInt: {2}{7}- ValueDouble: {3}{7}- ValueObjectID: {4}{7}- ValueDate: {5}{7}- ValueBoolean: {6}{7}", 
				this.Field,
				(this.ValueString == null) ? string.Empty : this.ValueString.ToString(),
			     
				(this.ValueInt == null) ? string.Empty : this.ValueInt.ToString(),
			     
				(this.ValueDouble == null) ? string.Empty : this.ValueDouble.ToString(),
			     
				(this.ValueObjectID == null) ? string.Empty : this.ValueObjectID.ToString(),
			     
				(this.ValueDate == null) ? string.Empty : this.ValueDate.ToString(),
			     
				(this.ValueBoolean == null) ? string.Empty : this.ValueBoolean.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the vw_FieldValue columns.
	/// </summary>
	[Serializable]
	public enum vw_FieldValueColumn
	{
		/// <summary>
		/// Field : 
		/// </summary>
		[EnumTextValue("Field")]
		[ColumnEnum("Field", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Field,
		/// <summary>
		/// ValueString : 
		/// </summary>
		[EnumTextValue("ValueString")]
		[ColumnEnum("ValueString", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ValueString,
		/// <summary>
		/// ValueInt : 
		/// </summary>
		[EnumTextValue("ValueInt")]
		[ColumnEnum("ValueInt", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ValueInt,
		/// <summary>
		/// ValueDouble : 
		/// </summary>
		[EnumTextValue("ValueDouble")]
		[ColumnEnum("ValueDouble", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ValueDouble,
		/// <summary>
		/// ValueObjectID : 
		/// </summary>
		[EnumTextValue("ValueObjectID")]
		[ColumnEnum("ValueObjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ValueObjectID,
		/// <summary>
		/// ValueDate : 
		/// </summary>
		[EnumTextValue("ValueDate")]
		[ColumnEnum("ValueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ValueDate,
		/// <summary>
		/// ValueBoolean : 
		/// </summary>
		[EnumTextValue("ValueBoolean")]
		[ColumnEnum("ValueBoolean", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ValueBoolean
	}//End enum

} // end namespace
