//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MetaBuilder.WinUI.Dictionary {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsMetaData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsMetaData : global::System.Data.DataSet {
        
        private AllowedArtifactDataTable tableAllowedArtifact;
        
        private AssociationTypeDataTable tableAssociationType;
        
        private DomainDefinitionDataTable tableDomainDefinition;
        
        private FieldDataTable tableField;
        
        private ClassAssociationDataTable tableClassAssociation;
        
        private ClassDataTable tableClass;
        
        private ClassTypeDataTable tableClassType;
        
        private DomainDefinitionPossibleValueDataTable tableDomainDefinitionPossibleValue;
        
        private global::System.Data.DataRelation relationClassAllowedArtifact;
        
        private global::System.Data.DataRelation relationClassAssociationAllowedArtifact;
        
        private global::System.Data.DataRelation relationClassField;
        
        private global::System.Data.DataRelation relationClassClassAssociation1;
        
        private global::System.Data.DataRelation relationAssociationTypeClassAssociation;
        
        private global::System.Data.DataRelation relationClassClassAssociation;
        
        private global::System.Data.DataRelation relationClassTypeClass;
        
        private global::System.Data.DataRelation relationDomainDefinitionDomainDefinitionPossibleValue;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsMetaData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsMetaData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AllowedArtifact"] != null)) {
                    base.Tables.Add(new AllowedArtifactDataTable(ds.Tables["AllowedArtifact"]));
                }
                if ((ds.Tables["AssociationType"] != null)) {
                    base.Tables.Add(new AssociationTypeDataTable(ds.Tables["AssociationType"]));
                }
                if ((ds.Tables["DomainDefinition"] != null)) {
                    base.Tables.Add(new DomainDefinitionDataTable(ds.Tables["DomainDefinition"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["ClassAssociation"] != null)) {
                    base.Tables.Add(new ClassAssociationDataTable(ds.Tables["ClassAssociation"]));
                }
                if ((ds.Tables["Class"] != null)) {
                    base.Tables.Add(new ClassDataTable(ds.Tables["Class"]));
                }
                if ((ds.Tables["ClassType"] != null)) {
                    base.Tables.Add(new ClassTypeDataTable(ds.Tables["ClassType"]));
                }
                if ((ds.Tables["DomainDefinitionPossibleValue"] != null)) {
                    base.Tables.Add(new DomainDefinitionPossibleValueDataTable(ds.Tables["DomainDefinitionPossibleValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllowedArtifactDataTable AllowedArtifact {
            get {
                return this.tableAllowedArtifact;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssociationTypeDataTable AssociationType {
            get {
                return this.tableAssociationType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DomainDefinitionDataTable DomainDefinition {
            get {
                return this.tableDomainDefinition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FieldDataTable Field {
            get {
                return this.tableField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClassAssociationDataTable ClassAssociation {
            get {
                return this.tableClassAssociation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClassDataTable Class {
            get {
                return this.tableClass;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClassTypeDataTable ClassType {
            get {
                return this.tableClassType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DomainDefinitionPossibleValueDataTable DomainDefinitionPossibleValue {
            get {
                return this.tableDomainDefinitionPossibleValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsMetaData cln = ((dsMetaData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AllowedArtifact"] != null)) {
                    base.Tables.Add(new AllowedArtifactDataTable(ds.Tables["AllowedArtifact"]));
                }
                if ((ds.Tables["AssociationType"] != null)) {
                    base.Tables.Add(new AssociationTypeDataTable(ds.Tables["AssociationType"]));
                }
                if ((ds.Tables["DomainDefinition"] != null)) {
                    base.Tables.Add(new DomainDefinitionDataTable(ds.Tables["DomainDefinition"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["ClassAssociation"] != null)) {
                    base.Tables.Add(new ClassAssociationDataTable(ds.Tables["ClassAssociation"]));
                }
                if ((ds.Tables["Class"] != null)) {
                    base.Tables.Add(new ClassDataTable(ds.Tables["Class"]));
                }
                if ((ds.Tables["ClassType"] != null)) {
                    base.Tables.Add(new ClassTypeDataTable(ds.Tables["ClassType"]));
                }
                if ((ds.Tables["DomainDefinitionPossibleValue"] != null)) {
                    base.Tables.Add(new DomainDefinitionPossibleValueDataTable(ds.Tables["DomainDefinitionPossibleValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAllowedArtifact = ((AllowedArtifactDataTable)(base.Tables["AllowedArtifact"]));
            if ((initTable == true)) {
                if ((this.tableAllowedArtifact != null)) {
                    this.tableAllowedArtifact.InitVars();
                }
            }
            this.tableAssociationType = ((AssociationTypeDataTable)(base.Tables["AssociationType"]));
            if ((initTable == true)) {
                if ((this.tableAssociationType != null)) {
                    this.tableAssociationType.InitVars();
                }
            }
            this.tableDomainDefinition = ((DomainDefinitionDataTable)(base.Tables["DomainDefinition"]));
            if ((initTable == true)) {
                if ((this.tableDomainDefinition != null)) {
                    this.tableDomainDefinition.InitVars();
                }
            }
            this.tableField = ((FieldDataTable)(base.Tables["Field"]));
            if ((initTable == true)) {
                if ((this.tableField != null)) {
                    this.tableField.InitVars();
                }
            }
            this.tableClassAssociation = ((ClassAssociationDataTable)(base.Tables["ClassAssociation"]));
            if ((initTable == true)) {
                if ((this.tableClassAssociation != null)) {
                    this.tableClassAssociation.InitVars();
                }
            }
            this.tableClass = ((ClassDataTable)(base.Tables["Class"]));
            if ((initTable == true)) {
                if ((this.tableClass != null)) {
                    this.tableClass.InitVars();
                }
            }
            this.tableClassType = ((ClassTypeDataTable)(base.Tables["ClassType"]));
            if ((initTable == true)) {
                if ((this.tableClassType != null)) {
                    this.tableClassType.InitVars();
                }
            }
            this.tableDomainDefinitionPossibleValue = ((DomainDefinitionPossibleValueDataTable)(base.Tables["DomainDefinitionPossibleValue"]));
            if ((initTable == true)) {
                if ((this.tableDomainDefinitionPossibleValue != null)) {
                    this.tableDomainDefinitionPossibleValue.InitVars();
                }
            }
            this.relationClassAllowedArtifact = this.Relations["ClassAllowedArtifact"];
            this.relationClassAssociationAllowedArtifact = this.Relations["ClassAssociationAllowedArtifact"];
            this.relationClassField = this.Relations["ClassField"];
            this.relationClassClassAssociation1 = this.Relations["ClassClassAssociation1"];
            this.relationAssociationTypeClassAssociation = this.Relations["AssociationTypeClassAssociation"];
            this.relationClassClassAssociation = this.Relations["ClassClassAssociation"];
            this.relationClassTypeClass = this.Relations["ClassTypeClass"];
            this.relationDomainDefinitionDomainDefinitionPossibleValue = this.Relations["DomainDefinitionDomainDefinitionPossibleValue"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsMetaData";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsMetaData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAllowedArtifact = new AllowedArtifactDataTable();
            base.Tables.Add(this.tableAllowedArtifact);
            this.tableAssociationType = new AssociationTypeDataTable();
            base.Tables.Add(this.tableAssociationType);
            this.tableDomainDefinition = new DomainDefinitionDataTable();
            base.Tables.Add(this.tableDomainDefinition);
            this.tableField = new FieldDataTable();
            base.Tables.Add(this.tableField);
            this.tableClassAssociation = new ClassAssociationDataTable();
            base.Tables.Add(this.tableClassAssociation);
            this.tableClass = new ClassDataTable();
            base.Tables.Add(this.tableClass);
            this.tableClassType = new ClassTypeDataTable();
            base.Tables.Add(this.tableClassType);
            this.tableDomainDefinitionPossibleValue = new DomainDefinitionPossibleValueDataTable();
            base.Tables.Add(this.tableDomainDefinitionPossibleValue);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassAllowedArtifact", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableAllowedArtifact.ClassColumn});
            this.tableAllowedArtifact.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassAssociationAllowedArtifact", new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.CAidColumn}, new global::System.Data.DataColumn[] {
                        this.tableAllowedArtifact.CAidColumn});
            this.tableAllowedArtifact.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassField", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableField.ClassColumn});
            this.tableField.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassClassAssociation1", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.AssociationObjectClassColumn});
            this.tableClassAssociation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AssociationTypeClassAssociation", new global::System.Data.DataColumn[] {
                        this.tableAssociationType.pkidColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.AssociationTypeIDColumn});
            this.tableClassAssociation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassClassAssociation", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.ParentClassColumn});
            this.tableClassAssociation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ClassTypeClass", new global::System.Data.DataColumn[] {
                        this.tableClassType.ClassTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableClass.ClassTypeColumn});
            this.tableClass.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DomainDefinitionDomainDefinitionPossibleValue", new global::System.Data.DataColumn[] {
                        this.tableDomainDefinition.pkidColumn}, new global::System.Data.DataColumn[] {
                        this.tableDomainDefinitionPossibleValue.DomainDefinitionIDColumn});
            this.tableDomainDefinitionPossibleValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationClassAllowedArtifact = new global::System.Data.DataRelation("ClassAllowedArtifact", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableAllowedArtifact.ClassColumn}, false);
            this.Relations.Add(this.relationClassAllowedArtifact);
            this.relationClassAssociationAllowedArtifact = new global::System.Data.DataRelation("ClassAssociationAllowedArtifact", new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.CAidColumn}, new global::System.Data.DataColumn[] {
                        this.tableAllowedArtifact.CAidColumn}, false);
            this.Relations.Add(this.relationClassAssociationAllowedArtifact);
            this.relationClassField = new global::System.Data.DataRelation("ClassField", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableField.ClassColumn}, false);
            this.Relations.Add(this.relationClassField);
            this.relationClassClassAssociation1 = new global::System.Data.DataRelation("ClassClassAssociation1", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.AssociationObjectClassColumn}, false);
            this.Relations.Add(this.relationClassClassAssociation1);
            this.relationAssociationTypeClassAssociation = new global::System.Data.DataRelation("AssociationTypeClassAssociation", new global::System.Data.DataColumn[] {
                        this.tableAssociationType.pkidColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.AssociationTypeIDColumn}, false);
            this.Relations.Add(this.relationAssociationTypeClassAssociation);
            this.relationClassClassAssociation = new global::System.Data.DataRelation("ClassClassAssociation", new global::System.Data.DataColumn[] {
                        this.tableClass.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableClassAssociation.ParentClassColumn}, false);
            this.Relations.Add(this.relationClassClassAssociation);
            this.relationClassTypeClass = new global::System.Data.DataRelation("ClassTypeClass", new global::System.Data.DataColumn[] {
                        this.tableClassType.ClassTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableClass.ClassTypeColumn}, false);
            this.Relations.Add(this.relationClassTypeClass);
            this.relationDomainDefinitionDomainDefinitionPossibleValue = new global::System.Data.DataRelation("DomainDefinitionDomainDefinitionPossibleValue", new global::System.Data.DataColumn[] {
                        this.tableDomainDefinition.pkidColumn}, new global::System.Data.DataColumn[] {
                        this.tableDomainDefinitionPossibleValue.DomainDefinitionIDColumn}, false);
            this.Relations.Add(this.relationDomainDefinitionDomainDefinitionPossibleValue);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllowedArtifact() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssociationType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDomainDefinition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClassAssociation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClass() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClassType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDomainDefinitionPossibleValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsMetaData ds = new dsMetaData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AllowedArtifactRowChangeEventHandler(object sender, AllowedArtifactRowChangeEvent e);
        
        public delegate void AssociationTypeRowChangeEventHandler(object sender, AssociationTypeRowChangeEvent e);
        
        public delegate void DomainDefinitionRowChangeEventHandler(object sender, DomainDefinitionRowChangeEvent e);
        
        public delegate void FieldRowChangeEventHandler(object sender, FieldRowChangeEvent e);
        
        public delegate void ClassAssociationRowChangeEventHandler(object sender, ClassAssociationRowChangeEvent e);
        
        public delegate void ClassRowChangeEventHandler(object sender, ClassRowChangeEvent e);
        
        public delegate void ClassTypeRowChangeEventHandler(object sender, ClassTypeRowChangeEvent e);
        
        public delegate void DomainDefinitionPossibleValueRowChangeEventHandler(object sender, DomainDefinitionPossibleValueRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllowedArtifactDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCAid;
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactDataTable() {
                this.TableName = "AllowedArtifact";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllowedArtifactDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllowedArtifactDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAidColumn {
                get {
                    return this.columnCAid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow this[int index] {
                get {
                    return ((AllowedArtifactRow)(this.Rows[index]));
                }
            }
            
            public event AllowedArtifactRowChangeEventHandler AllowedArtifactRowChanging;
            
            public event AllowedArtifactRowChangeEventHandler AllowedArtifactRowChanged;
            
            public event AllowedArtifactRowChangeEventHandler AllowedArtifactRowDeleting;
            
            public event AllowedArtifactRowChangeEventHandler AllowedArtifactRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllowedArtifactRow(AllowedArtifactRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow AddAllowedArtifactRow(ClassAssociationRow parentClassAssociationRowByClassAssociationAllowedArtifact, ClassRow parentClassRowByClassAllowedArtifact, bool IsActive) {
                AllowedArtifactRow rowAllowedArtifactRow = ((AllowedArtifactRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        IsActive};
                if ((parentClassAssociationRowByClassAssociationAllowedArtifact != null)) {
                    columnValuesArray[0] = parentClassAssociationRowByClassAssociationAllowedArtifact[0];
                }
                if ((parentClassRowByClassAllowedArtifact != null)) {
                    columnValuesArray[1] = parentClassRowByClassAllowedArtifact[0];
                }
                rowAllowedArtifactRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllowedArtifactRow);
                return rowAllowedArtifactRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow FindByCAidClass(int CAid, string Class) {
                return ((AllowedArtifactRow)(this.Rows.Find(new object[] {
                            CAid,
                            Class})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllowedArtifactDataTable cln = ((AllowedArtifactDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllowedArtifactDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCAid = base.Columns["CAid"];
                this.columnClass = base.Columns["Class"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCAid = new global::System.Data.DataColumn("CAid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAid);
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCAid,
                                this.columnClass}, true));
                this.columnCAid.AllowDBNull = false;
                this.columnClass.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow NewAllowedArtifactRow() {
                return ((AllowedArtifactRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllowedArtifactRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllowedArtifactRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllowedArtifactRowChanged != null)) {
                    this.AllowedArtifactRowChanged(this, new AllowedArtifactRowChangeEvent(((AllowedArtifactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllowedArtifactRowChanging != null)) {
                    this.AllowedArtifactRowChanging(this, new AllowedArtifactRowChangeEvent(((AllowedArtifactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllowedArtifactRowDeleted != null)) {
                    this.AllowedArtifactRowDeleted(this, new AllowedArtifactRowChangeEvent(((AllowedArtifactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllowedArtifactRowDeleting != null)) {
                    this.AllowedArtifactRowDeleting(this, new AllowedArtifactRowChangeEvent(((AllowedArtifactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllowedArtifactRow(AllowedArtifactRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllowedArtifactDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssociationTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpkid;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeDataTable() {
                this.TableName = "AssociationType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssociationTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssociationTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pkidColumn {
                get {
                    return this.columnpkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow this[int index] {
                get {
                    return ((AssociationTypeRow)(this.Rows[index]));
                }
            }
            
            public event AssociationTypeRowChangeEventHandler AssociationTypeRowChanging;
            
            public event AssociationTypeRowChangeEventHandler AssociationTypeRowChanged;
            
            public event AssociationTypeRowChangeEventHandler AssociationTypeRowDeleting;
            
            public event AssociationTypeRowChangeEventHandler AssociationTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssociationTypeRow(AssociationTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow AddAssociationTypeRow(string Name) {
                AssociationTypeRow rowAssociationTypeRow = ((AssociationTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowAssociationTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssociationTypeRow);
                return rowAssociationTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow FindBypkid(int pkid) {
                return ((AssociationTypeRow)(this.Rows.Find(new object[] {
                            pkid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AssociationTypeDataTable cln = ((AssociationTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssociationTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpkid = base.Columns["pkid"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpkid = new global::System.Data.DataColumn("pkid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpkid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpkid}, true));
                this.columnpkid.AutoIncrement = true;
                this.columnpkid.AllowDBNull = false;
                this.columnpkid.ReadOnly = true;
                this.columnpkid.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow NewAssociationTypeRow() {
                return ((AssociationTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssociationTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AssociationTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssociationTypeRowChanged != null)) {
                    this.AssociationTypeRowChanged(this, new AssociationTypeRowChangeEvent(((AssociationTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssociationTypeRowChanging != null)) {
                    this.AssociationTypeRowChanging(this, new AssociationTypeRowChangeEvent(((AssociationTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssociationTypeRowDeleted != null)) {
                    this.AssociationTypeRowDeleted(this, new AssociationTypeRowChangeEvent(((AssociationTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssociationTypeRowDeleting != null)) {
                    this.AssociationTypeRowDeleting(this, new AssociationTypeRowChangeEvent(((AssociationTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssociationTypeRow(AssociationTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssociationTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DomainDefinitionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpkid;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionDataTable() {
                this.TableName = "DomainDefinition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainDefinitionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DomainDefinitionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pkidColumn {
                get {
                    return this.columnpkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow this[int index] {
                get {
                    return ((DomainDefinitionRow)(this.Rows[index]));
                }
            }
            
            public event DomainDefinitionRowChangeEventHandler DomainDefinitionRowChanging;
            
            public event DomainDefinitionRowChangeEventHandler DomainDefinitionRowChanged;
            
            public event DomainDefinitionRowChangeEventHandler DomainDefinitionRowDeleting;
            
            public event DomainDefinitionRowChangeEventHandler DomainDefinitionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDomainDefinitionRow(DomainDefinitionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow AddDomainDefinitionRow(string Name) {
                DomainDefinitionRow rowDomainDefinitionRow = ((DomainDefinitionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowDomainDefinitionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDomainDefinitionRow);
                return rowDomainDefinitionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow FindBypkid(int pkid) {
                return ((DomainDefinitionRow)(this.Rows.Find(new object[] {
                            pkid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DomainDefinitionDataTable cln = ((DomainDefinitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DomainDefinitionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpkid = base.Columns["pkid"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpkid = new global::System.Data.DataColumn("pkid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpkid);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpkid}, true));
                this.columnpkid.AutoIncrement = true;
                this.columnpkid.AllowDBNull = false;
                this.columnpkid.ReadOnly = true;
                this.columnpkid.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow NewDomainDefinitionRow() {
                return ((DomainDefinitionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DomainDefinitionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DomainDefinitionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DomainDefinitionRowChanged != null)) {
                    this.DomainDefinitionRowChanged(this, new DomainDefinitionRowChangeEvent(((DomainDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DomainDefinitionRowChanging != null)) {
                    this.DomainDefinitionRowChanging(this, new DomainDefinitionRowChangeEvent(((DomainDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DomainDefinitionRowDeleted != null)) {
                    this.DomainDefinitionRowDeleted(this, new DomainDefinitionRowChangeEvent(((DomainDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DomainDefinitionRowDeleting != null)) {
                    this.DomainDefinitionRowDeleting(this, new DomainDefinitionRowChangeEvent(((DomainDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDomainDefinitionRow(DomainDefinitionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DomainDefinitionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FieldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpkid;
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDataType;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsUnique;
            
            private global::System.Data.DataColumn columnSortOrder;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDataTable() {
                this.TableName = "Field";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pkidColumn {
                get {
                    return this.columnpkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsUniqueColumn {
                get {
                    return this.columnIsUnique;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortOrderColumn {
                get {
                    return this.columnSortOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow this[int index] {
                get {
                    return ((FieldRow)(this.Rows[index]));
                }
            }
            
            public event FieldRowChangeEventHandler FieldRowChanging;
            
            public event FieldRowChangeEventHandler FieldRowChanged;
            
            public event FieldRowChangeEventHandler FieldRowDeleting;
            
            public event FieldRowChangeEventHandler FieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFieldRow(FieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow AddFieldRow(ClassRow parentClassRowByClassField, string Name, string DataType, string Category, string Description, bool IsUnique, int SortOrder, bool IsActive) {
                FieldRow rowFieldRow = ((FieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Name,
                        DataType,
                        Category,
                        Description,
                        IsUnique,
                        SortOrder,
                        IsActive};
                if ((parentClassRowByClassField != null)) {
                    columnValuesArray[1] = parentClassRowByClassField[0];
                }
                rowFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFieldRow);
                return rowFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow FindBypkid(int pkid) {
                return ((FieldRow)(this.Rows.Find(new object[] {
                            pkid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FieldDataTable cln = ((FieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpkid = base.Columns["pkid"];
                this.columnClass = base.Columns["Class"];
                this.columnName = base.Columns["Name"];
                this.columnDataType = base.Columns["DataType"];
                this.columnCategory = base.Columns["Category"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsUnique = base.Columns["IsUnique"];
                this.columnSortOrder = base.Columns["SortOrder"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpkid = new global::System.Data.DataColumn("pkid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpkid);
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDataType = new global::System.Data.DataColumn("DataType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsUnique = new global::System.Data.DataColumn("IsUnique", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsUnique);
                this.columnSortOrder = new global::System.Data.DataColumn("SortOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortOrder);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpkid}, true));
                this.columnpkid.AutoIncrement = true;
                this.columnpkid.AllowDBNull = false;
                this.columnpkid.ReadOnly = true;
                this.columnpkid.Unique = true;
                this.columnClass.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDataType.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow NewFieldRow() {
                return ((FieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FieldRowChanged != null)) {
                    this.FieldRowChanged(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FieldRowChanging != null)) {
                    this.FieldRowChanging(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FieldRowDeleted != null)) {
                    this.FieldRowDeleted(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FieldRowDeleting != null)) {
                    this.FieldRowDeleting(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFieldRow(FieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClassAssociationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCAid;
            
            private global::System.Data.DataColumn columnParentClass;
            
            private global::System.Data.DataColumn columnChildClass;
            
            private global::System.Data.DataColumn columnAssociationTypeID;
            
            private global::System.Data.DataColumn columnCaption;
            
            private global::System.Data.DataColumn columnAssociationObjectClass;
            
            private global::System.Data.DataColumn columnCopyIncluded;
            
            private global::System.Data.DataColumn columnIsDefault;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationDataTable() {
                this.TableName = "ClassAssociation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassAssociationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClassAssociationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAidColumn {
                get {
                    return this.columnCAid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentClassColumn {
                get {
                    return this.columnParentClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildClassColumn {
                get {
                    return this.columnChildClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociationTypeIDColumn {
                get {
                    return this.columnAssociationTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CaptionColumn {
                get {
                    return this.columnCaption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociationObjectClassColumn {
                get {
                    return this.columnAssociationObjectClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CopyIncludedColumn {
                get {
                    return this.columnCopyIncluded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDefaultColumn {
                get {
                    return this.columnIsDefault;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow this[int index] {
                get {
                    return ((ClassAssociationRow)(this.Rows[index]));
                }
            }
            
            public event ClassAssociationRowChangeEventHandler ClassAssociationRowChanging;
            
            public event ClassAssociationRowChangeEventHandler ClassAssociationRowChanged;
            
            public event ClassAssociationRowChangeEventHandler ClassAssociationRowDeleting;
            
            public event ClassAssociationRowChangeEventHandler ClassAssociationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClassAssociationRow(ClassAssociationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow AddClassAssociationRow(ClassRow parentClassRowByClassClassAssociation, string ChildClass, AssociationTypeRow parentAssociationTypeRowByAssociationTypeClassAssociation, string Caption, ClassRow parentClassRowByClassClassAssociation1, bool CopyIncluded, bool IsDefault, bool IsActive) {
                ClassAssociationRow rowClassAssociationRow = ((ClassAssociationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ChildClass,
                        null,
                        Caption,
                        null,
                        CopyIncluded,
                        IsDefault,
                        IsActive};
                if ((parentClassRowByClassClassAssociation != null)) {
                    columnValuesArray[1] = parentClassRowByClassClassAssociation[0];
                }
                if ((parentAssociationTypeRowByAssociationTypeClassAssociation != null)) {
                    columnValuesArray[3] = parentAssociationTypeRowByAssociationTypeClassAssociation[0];
                }
                if ((parentClassRowByClassClassAssociation1 != null)) {
                    columnValuesArray[5] = parentClassRowByClassClassAssociation1[0];
                }
                rowClassAssociationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClassAssociationRow);
                return rowClassAssociationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow FindByCAid(int CAid) {
                return ((ClassAssociationRow)(this.Rows.Find(new object[] {
                            CAid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClassAssociationDataTable cln = ((ClassAssociationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClassAssociationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCAid = base.Columns["CAid"];
                this.columnParentClass = base.Columns["ParentClass"];
                this.columnChildClass = base.Columns["ChildClass"];
                this.columnAssociationTypeID = base.Columns["AssociationTypeID"];
                this.columnCaption = base.Columns["Caption"];
                this.columnAssociationObjectClass = base.Columns["AssociationObjectClass"];
                this.columnCopyIncluded = base.Columns["CopyIncluded"];
                this.columnIsDefault = base.Columns["IsDefault"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCAid = new global::System.Data.DataColumn("CAid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAid);
                this.columnParentClass = new global::System.Data.DataColumn("ParentClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentClass);
                this.columnChildClass = new global::System.Data.DataColumn("ChildClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildClass);
                this.columnAssociationTypeID = new global::System.Data.DataColumn("AssociationTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociationTypeID);
                this.columnCaption = new global::System.Data.DataColumn("Caption", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCaption);
                this.columnAssociationObjectClass = new global::System.Data.DataColumn("AssociationObjectClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociationObjectClass);
                this.columnCopyIncluded = new global::System.Data.DataColumn("CopyIncluded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopyIncluded);
                this.columnIsDefault = new global::System.Data.DataColumn("IsDefault", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefault);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCAid}, true));
                this.columnCAid.AutoIncrement = true;
                this.columnCAid.AllowDBNull = false;
                this.columnCAid.ReadOnly = true;
                this.columnCAid.Unique = true;
                this.columnParentClass.AllowDBNull = false;
                this.columnChildClass.AllowDBNull = false;
                this.columnAssociationTypeID.AllowDBNull = false;
                this.columnIsDefault.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow NewClassAssociationRow() {
                return ((ClassAssociationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClassAssociationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClassAssociationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClassAssociationRowChanged != null)) {
                    this.ClassAssociationRowChanged(this, new ClassAssociationRowChangeEvent(((ClassAssociationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClassAssociationRowChanging != null)) {
                    this.ClassAssociationRowChanging(this, new ClassAssociationRowChangeEvent(((ClassAssociationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClassAssociationRowDeleted != null)) {
                    this.ClassAssociationRowDeleted(this, new ClassAssociationRowChangeEvent(((ClassAssociationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClassAssociationRowDeleting != null)) {
                    this.ClassAssociationRowDeleting(this, new ClassAssociationRowChangeEvent(((ClassAssociationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClassAssociationRow(ClassAssociationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClassAssociationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClassDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescriptionCode;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnClassType;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassDataTable() {
                this.TableName = "Class";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClassDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionCodeColumn {
                get {
                    return this.columnDescriptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassTypeColumn {
                get {
                    return this.columnClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow this[int index] {
                get {
                    return ((ClassRow)(this.Rows[index]));
                }
            }
            
            public event ClassRowChangeEventHandler ClassRowChanging;
            
            public event ClassRowChangeEventHandler ClassRowChanged;
            
            public event ClassRowChangeEventHandler ClassRowDeleting;
            
            public event ClassRowChangeEventHandler ClassRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClassRow(ClassRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow AddClassRow(string Name, string DescriptionCode, string Category, ClassTypeRow parentClassTypeRowByClassTypeClass, bool IsActive) {
                ClassRow rowClassRow = ((ClassRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        DescriptionCode,
                        Category,
                        null,
                        IsActive};
                if ((parentClassTypeRowByClassTypeClass != null)) {
                    columnValuesArray[3] = parentClassTypeRowByClassTypeClass[0];
                }
                rowClassRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClassRow);
                return rowClassRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow FindByName(string Name) {
                return ((ClassRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClassDataTable cln = ((ClassDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClassDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnDescriptionCode = base.Columns["DescriptionCode"];
                this.columnCategory = base.Columns["Category"];
                this.columnClassType = base.Columns["ClassType"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescriptionCode = new global::System.Data.DataColumn("DescriptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescriptionCode);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnClassType = new global::System.Data.DataColumn("ClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassType);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnClassType.DefaultValue = ((string)("\"Primary\""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow NewClassRow() {
                return ((ClassRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClassRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClassRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClassRowChanged != null)) {
                    this.ClassRowChanged(this, new ClassRowChangeEvent(((ClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClassRowChanging != null)) {
                    this.ClassRowChanging(this, new ClassRowChangeEvent(((ClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClassRowDeleted != null)) {
                    this.ClassRowDeleted(this, new ClassRowChangeEvent(((ClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClassRowDeleting != null)) {
                    this.ClassRowDeleting(this, new ClassRowChangeEvent(((ClassRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClassRow(ClassRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClassDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClassTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClassType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeDataTable() {
                this.TableName = "ClassType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClassTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassTypeColumn {
                get {
                    return this.columnClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow this[int index] {
                get {
                    return ((ClassTypeRow)(this.Rows[index]));
                }
            }
            
            public event ClassTypeRowChangeEventHandler ClassTypeRowChanging;
            
            public event ClassTypeRowChangeEventHandler ClassTypeRowChanged;
            
            public event ClassTypeRowChangeEventHandler ClassTypeRowDeleting;
            
            public event ClassTypeRowChangeEventHandler ClassTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClassTypeRow(ClassTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow AddClassTypeRow(string ClassType) {
                ClassTypeRow rowClassTypeRow = ((ClassTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClassType};
                rowClassTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClassTypeRow);
                return rowClassTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow FindByClassType(string ClassType) {
                return ((ClassTypeRow)(this.Rows.Find(new object[] {
                            ClassType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClassTypeDataTable cln = ((ClassTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClassTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClassType = base.Columns["ClassType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClassType = new global::System.Data.DataColumn("ClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClassType}, true));
                this.columnClassType.AllowDBNull = false;
                this.columnClassType.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow NewClassTypeRow() {
                return ((ClassTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClassTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClassTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClassTypeRowChanged != null)) {
                    this.ClassTypeRowChanged(this, new ClassTypeRowChangeEvent(((ClassTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClassTypeRowChanging != null)) {
                    this.ClassTypeRowChanging(this, new ClassTypeRowChangeEvent(((ClassTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClassTypeRowDeleted != null)) {
                    this.ClassTypeRowDeleted(this, new ClassTypeRowChangeEvent(((ClassTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClassTypeRowDeleting != null)) {
                    this.ClassTypeRowDeleting(this, new ClassTypeRowChangeEvent(((ClassTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClassTypeRow(ClassTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClassTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DomainDefinitionPossibleValueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDomainDefinitionID;
            
            private global::System.Data.DataColumn columnPossibleValue;
            
            private global::System.Data.DataColumn columnSeries;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueDataTable() {
                this.TableName = "DomainDefinitionPossibleValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainDefinitionPossibleValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DomainDefinitionPossibleValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainDefinitionIDColumn {
                get {
                    return this.columnDomainDefinitionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PossibleValueColumn {
                get {
                    return this.columnPossibleValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow this[int index] {
                get {
                    return ((DomainDefinitionPossibleValueRow)(this.Rows[index]));
                }
            }
            
            public event DomainDefinitionPossibleValueRowChangeEventHandler DomainDefinitionPossibleValueRowChanging;
            
            public event DomainDefinitionPossibleValueRowChangeEventHandler DomainDefinitionPossibleValueRowChanged;
            
            public event DomainDefinitionPossibleValueRowChangeEventHandler DomainDefinitionPossibleValueRowDeleting;
            
            public event DomainDefinitionPossibleValueRowChangeEventHandler DomainDefinitionPossibleValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDomainDefinitionPossibleValueRow(DomainDefinitionPossibleValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow AddDomainDefinitionPossibleValueRow(DomainDefinitionRow parentDomainDefinitionRowByDomainDefinitionDomainDefinitionPossibleValue, string PossibleValue, int Series, string Description, bool IsActive) {
                DomainDefinitionPossibleValueRow rowDomainDefinitionPossibleValueRow = ((DomainDefinitionPossibleValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PossibleValue,
                        Series,
                        Description,
                        IsActive};
                if ((parentDomainDefinitionRowByDomainDefinitionDomainDefinitionPossibleValue != null)) {
                    columnValuesArray[0] = parentDomainDefinitionRowByDomainDefinitionDomainDefinitionPossibleValue[0];
                }
                rowDomainDefinitionPossibleValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDomainDefinitionPossibleValueRow);
                return rowDomainDefinitionPossibleValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow FindByDomainDefinitionIDPossibleValue(int DomainDefinitionID, string PossibleValue) {
                return ((DomainDefinitionPossibleValueRow)(this.Rows.Find(new object[] {
                            DomainDefinitionID,
                            PossibleValue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DomainDefinitionPossibleValueDataTable cln = ((DomainDefinitionPossibleValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DomainDefinitionPossibleValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDomainDefinitionID = base.Columns["DomainDefinitionID"];
                this.columnPossibleValue = base.Columns["PossibleValue"];
                this.columnSeries = base.Columns["Series"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDomainDefinitionID = new global::System.Data.DataColumn("DomainDefinitionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainDefinitionID);
                this.columnPossibleValue = new global::System.Data.DataColumn("PossibleValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPossibleValue);
                this.columnSeries = new global::System.Data.DataColumn("Series", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDomainDefinitionID,
                                this.columnPossibleValue}, true));
                this.columnDomainDefinitionID.AllowDBNull = false;
                this.columnPossibleValue.AllowDBNull = false;
                this.columnSeries.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow NewDomainDefinitionPossibleValueRow() {
                return ((DomainDefinitionPossibleValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DomainDefinitionPossibleValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DomainDefinitionPossibleValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DomainDefinitionPossibleValueRowChanged != null)) {
                    this.DomainDefinitionPossibleValueRowChanged(this, new DomainDefinitionPossibleValueRowChangeEvent(((DomainDefinitionPossibleValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DomainDefinitionPossibleValueRowChanging != null)) {
                    this.DomainDefinitionPossibleValueRowChanging(this, new DomainDefinitionPossibleValueRowChangeEvent(((DomainDefinitionPossibleValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DomainDefinitionPossibleValueRowDeleted != null)) {
                    this.DomainDefinitionPossibleValueRowDeleted(this, new DomainDefinitionPossibleValueRowChangeEvent(((DomainDefinitionPossibleValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DomainDefinitionPossibleValueRowDeleting != null)) {
                    this.DomainDefinitionPossibleValueRowDeleting(this, new DomainDefinitionPossibleValueRowChangeEvent(((DomainDefinitionPossibleValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDomainDefinitionPossibleValueRow(DomainDefinitionPossibleValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMetaData ds = new dsMetaData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DomainDefinitionPossibleValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllowedArtifactRow : global::System.Data.DataRow {
            
            private AllowedArtifactDataTable tableAllowedArtifact;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllowedArtifactRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllowedArtifact = ((AllowedArtifactDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CAid {
                get {
                    return ((int)(this[this.tableAllowedArtifact.CAidColumn]));
                }
                set {
                    this[this.tableAllowedArtifact.CAidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    return ((string)(this[this.tableAllowedArtifact.ClassColumn]));
                }
                set {
                    this[this.tableAllowedArtifact.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableAllowedArtifact.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'AllowedArtifact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllowedArtifact.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow ClassRow {
                get {
                    return ((ClassRow)(this.GetParentRow(this.Table.ParentRelations["ClassAllowedArtifact"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassAllowedArtifact"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow ClassAssociationRow {
                get {
                    return ((ClassAssociationRow)(this.GetParentRow(this.Table.ParentRelations["ClassAssociationAllowedArtifact"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassAssociationAllowedArtifact"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableAllowedArtifact.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableAllowedArtifact.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssociationTypeRow : global::System.Data.DataRow {
            
            private AssociationTypeDataTable tableAssociationType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssociationTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssociationType = ((AssociationTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pkid {
                get {
                    return ((int)(this[this.tableAssociationType.pkidColumn]));
                }
                set {
                    this[this.tableAssociationType.pkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAssociationType.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'AssociationType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssociationType.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableAssociationType.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableAssociationType.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow[] GetClassAssociationRows() {
                if ((this.Table.ChildRelations["AssociationTypeClassAssociation"] == null)) {
                    return new ClassAssociationRow[0];
                }
                else {
                    return ((ClassAssociationRow[])(base.GetChildRows(this.Table.ChildRelations["AssociationTypeClassAssociation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DomainDefinitionRow : global::System.Data.DataRow {
            
            private DomainDefinitionDataTable tableDomainDefinition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainDefinitionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDomainDefinition = ((DomainDefinitionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pkid {
                get {
                    return ((int)(this[this.tableDomainDefinition.pkidColumn]));
                }
                set {
                    this[this.tableDomainDefinition.pkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDomainDefinition.NameColumn]));
                }
                set {
                    this[this.tableDomainDefinition.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow[] GetDomainDefinitionPossibleValueRows() {
                if ((this.Table.ChildRelations["DomainDefinitionDomainDefinitionPossibleValue"] == null)) {
                    return new DomainDefinitionPossibleValueRow[0];
                }
                else {
                    return ((DomainDefinitionPossibleValueRow[])(base.GetChildRows(this.Table.ChildRelations["DomainDefinitionDomainDefinitionPossibleValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FieldRow : global::System.Data.DataRow {
            
            private FieldDataTable tableField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableField = ((FieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pkid {
                get {
                    return ((int)(this[this.tableField.pkidColumn]));
                }
                set {
                    this[this.tableField.pkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    return ((string)(this[this.tableField.ClassColumn]));
                }
                set {
                    this[this.tableField.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableField.NameColumn]));
                }
                set {
                    this[this.tableField.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    return ((string)(this[this.tableField.DataTypeColumn]));
                }
                set {
                    this[this.tableField.DataTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableField.CategoryColumn]));
                }
                set {
                    this[this.tableField.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableField.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnique {
                get {
                    try {
                        return ((bool)(this[this.tableField.IsUniqueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsUnique\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.IsUniqueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortOrder {
                get {
                    try {
                        return ((int)(this[this.tableField.SortOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SortOrder\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.SortOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableField.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'Field\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableField.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow ClassRow {
                get {
                    return ((ClassRow)(this.GetParentRow(this.Table.ParentRelations["ClassField"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassField"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableField.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableField.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsUniqueNull() {
                return this.IsNull(this.tableField.IsUniqueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsUniqueNull() {
                this[this.tableField.IsUniqueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortOrderNull() {
                return this.IsNull(this.tableField.SortOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortOrderNull() {
                this[this.tableField.SortOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableField.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableField.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClassAssociationRow : global::System.Data.DataRow {
            
            private ClassAssociationDataTable tableClassAssociation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassAssociationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClassAssociation = ((ClassAssociationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CAid {
                get {
                    return ((int)(this[this.tableClassAssociation.CAidColumn]));
                }
                set {
                    this[this.tableClassAssociation.CAidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentClass {
                get {
                    return ((string)(this[this.tableClassAssociation.ParentClassColumn]));
                }
                set {
                    this[this.tableClassAssociation.ParentClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildClass {
                get {
                    return ((string)(this[this.tableClassAssociation.ChildClassColumn]));
                }
                set {
                    this[this.tableClassAssociation.ChildClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssociationTypeID {
                get {
                    return ((int)(this[this.tableClassAssociation.AssociationTypeIDColumn]));
                }
                set {
                    this[this.tableClassAssociation.AssociationTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Caption {
                get {
                    try {
                        return ((string)(this[this.tableClassAssociation.CaptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Caption\' in table \'ClassAssociation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClassAssociation.CaptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssociationObjectClass {
                get {
                    try {
                        return ((string)(this[this.tableClassAssociation.AssociationObjectClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociationObjectClass\' in table \'ClassAssociation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableClassAssociation.AssociationObjectClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CopyIncluded {
                get {
                    try {
                        return ((bool)(this[this.tableClassAssociation.CopyIncludedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CopyIncluded\' in table \'ClassAssociation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClassAssociation.CopyIncludedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefault {
                get {
                    return ((bool)(this[this.tableClassAssociation.IsDefaultColumn]));
                }
                set {
                    this[this.tableClassAssociation.IsDefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableClassAssociation.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'ClassAssociation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClassAssociation.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow ClassRowByClassClassAssociation1 {
                get {
                    return ((ClassRow)(this.GetParentRow(this.Table.ParentRelations["ClassClassAssociation1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassClassAssociation1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow AssociationTypeRow {
                get {
                    return ((AssociationTypeRow)(this.GetParentRow(this.Table.ParentRelations["AssociationTypeClassAssociation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AssociationTypeClassAssociation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow ClassRowByClassClassAssociation {
                get {
                    return ((ClassRow)(this.GetParentRow(this.Table.ParentRelations["ClassClassAssociation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassClassAssociation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCaptionNull() {
                return this.IsNull(this.tableClassAssociation.CaptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCaptionNull() {
                this[this.tableClassAssociation.CaptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociationObjectClassNull() {
                return this.IsNull(this.tableClassAssociation.AssociationObjectClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociationObjectClassNull() {
                this[this.tableClassAssociation.AssociationObjectClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopyIncludedNull() {
                return this.IsNull(this.tableClassAssociation.CopyIncludedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopyIncludedNull() {
                this[this.tableClassAssociation.CopyIncludedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableClassAssociation.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableClassAssociation.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow[] GetAllowedArtifactRows() {
                if ((this.Table.ChildRelations["ClassAssociationAllowedArtifact"] == null)) {
                    return new AllowedArtifactRow[0];
                }
                else {
                    return ((AllowedArtifactRow[])(base.GetChildRows(this.Table.ChildRelations["ClassAssociationAllowedArtifact"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClassRow : global::System.Data.DataRow {
            
            private ClassDataTable tableClass;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClass = ((ClassDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableClass.NameColumn]));
                }
                set {
                    this[this.tableClass.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescriptionCode {
                get {
                    try {
                        return ((string)(this[this.tableClass.DescriptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescriptionCode\' in table \'Class\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClass.DescriptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableClass.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'Class\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClass.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassType {
                get {
                    try {
                        return ((string)(this[this.tableClass.ClassTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassType\' in table \'Class\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClass.ClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableClass.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'Class\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClass.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow ClassTypeRow {
                get {
                    return ((ClassTypeRow)(this.GetParentRow(this.Table.ParentRelations["ClassTypeClass"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClassTypeClass"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionCodeNull() {
                return this.IsNull(this.tableClass.DescriptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionCodeNull() {
                this[this.tableClass.DescriptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableClass.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableClass.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassTypeNull() {
                return this.IsNull(this.tableClass.ClassTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassTypeNull() {
                this[this.tableClass.ClassTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableClass.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableClass.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow[] GetClassAssociationRowsByClassClassAssociation1() {
                if ((this.Table.ChildRelations["ClassClassAssociation1"] == null)) {
                    return new ClassAssociationRow[0];
                }
                else {
                    return ((ClassAssociationRow[])(base.GetChildRows(this.Table.ChildRelations["ClassClassAssociation1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow[] GetClassAssociationRowsByClassClassAssociation() {
                if ((this.Table.ChildRelations["ClassClassAssociation"] == null)) {
                    return new ClassAssociationRow[0];
                }
                else {
                    return ((ClassAssociationRow[])(base.GetChildRows(this.Table.ChildRelations["ClassClassAssociation"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow[] GetFieldRows() {
                if ((this.Table.ChildRelations["ClassField"] == null)) {
                    return new FieldRow[0];
                }
                else {
                    return ((FieldRow[])(base.GetChildRows(this.Table.ChildRelations["ClassField"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow[] GetAllowedArtifactRows() {
                if ((this.Table.ChildRelations["ClassAllowedArtifact"] == null)) {
                    return new AllowedArtifactRow[0];
                }
                else {
                    return ((AllowedArtifactRow[])(base.GetChildRows(this.Table.ChildRelations["ClassAllowedArtifact"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClassTypeRow : global::System.Data.DataRow {
            
            private ClassTypeDataTable tableClassType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClassTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClassType = ((ClassTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassType {
                get {
                    return ((string)(this[this.tableClassType.ClassTypeColumn]));
                }
                set {
                    this[this.tableClassType.ClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow[] GetClassRows() {
                if ((this.Table.ChildRelations["ClassTypeClass"] == null)) {
                    return new ClassRow[0];
                }
                else {
                    return ((ClassRow[])(base.GetChildRows(this.Table.ChildRelations["ClassTypeClass"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DomainDefinitionPossibleValueRow : global::System.Data.DataRow {
            
            private DomainDefinitionPossibleValueDataTable tableDomainDefinitionPossibleValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainDefinitionPossibleValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDomainDefinitionPossibleValue = ((DomainDefinitionPossibleValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DomainDefinitionID {
                get {
                    return ((int)(this[this.tableDomainDefinitionPossibleValue.DomainDefinitionIDColumn]));
                }
                set {
                    this[this.tableDomainDefinitionPossibleValue.DomainDefinitionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PossibleValue {
                get {
                    return ((string)(this[this.tableDomainDefinitionPossibleValue.PossibleValueColumn]));
                }
                set {
                    this[this.tableDomainDefinitionPossibleValue.PossibleValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Series {
                get {
                    return ((int)(this[this.tableDomainDefinitionPossibleValue.SeriesColumn]));
                }
                set {
                    this[this.tableDomainDefinitionPossibleValue.SeriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableDomainDefinitionPossibleValue.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'DomainDefinitionPossibleValue\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDomainDefinitionPossibleValue.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableDomainDefinitionPossibleValue.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'DomainDefinitionPossibleValue\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDomainDefinitionPossibleValue.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow DomainDefinitionRow {
                get {
                    return ((DomainDefinitionRow)(this.GetParentRow(this.Table.ParentRelations["DomainDefinitionDomainDefinitionPossibleValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DomainDefinitionDomainDefinitionPossibleValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableDomainDefinitionPossibleValue.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableDomainDefinitionPossibleValue.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableDomainDefinitionPossibleValue.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableDomainDefinitionPossibleValue.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllowedArtifactRowChangeEvent : global::System.EventArgs {
            
            private AllowedArtifactRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRowChangeEvent(AllowedArtifactRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllowedArtifactRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssociationTypeRowChangeEvent : global::System.EventArgs {
            
            private AssociationTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRowChangeEvent(AssociationTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssociationTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DomainDefinitionRowChangeEvent : global::System.EventArgs {
            
            private DomainDefinitionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRowChangeEvent(DomainDefinitionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FieldRowChangeEvent : global::System.EventArgs {
            
            private FieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRowChangeEvent(FieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClassAssociationRowChangeEvent : global::System.EventArgs {
            
            private ClassAssociationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRowChangeEvent(ClassAssociationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassAssociationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClassRowChangeEvent : global::System.EventArgs {
            
            private ClassRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRowChangeEvent(ClassRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClassTypeRowChangeEvent : global::System.EventArgs {
            
            private ClassTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRowChangeEvent(ClassTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClassTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DomainDefinitionPossibleValueRowChangeEvent : global::System.EventArgs {
            
            private DomainDefinitionPossibleValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRowChangeEvent(DomainDefinitionPossibleValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDefinitionPossibleValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591