<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">MetaBuilder</database>
<procedures>
		
		<procedure owner="dbo" name="PROC_VCStatus_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the VCStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[VCStatus]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_VCStatus_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCStatus table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[VCStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[VCStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_VCStatus_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the VCStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[VCStatus]
					(
					[pkid]
					,[Name]
					)
				VALUES
					(
					@pkid
					,@Name
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the VCStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Originalpkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[VCStatus]
				SET
					[pkid] = @pkid
					,[Name] = @Name
				WHERE
[pkid] = @Originalpkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the VCStatus table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[VCStatus] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the VCStatus table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[VCStatus]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the VCStatus table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[VCStatus]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_GetByCAidFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[VCStatus].[pkid]
       ,dbo.[VCStatus].[Name]
  FROM dbo.[VCStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[CAid] = @CAid
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_GetByObjectIDObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[VCStatus].[pkid]
       ,dbo.[VCStatus].[Name]
  FROM dbo.[VCStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ObjectID] = @ObjectID
                  AND dbo.[ObjectAssociation].[ObjectMachine] = @ObjectMachine
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_GetByChildObjectIDChildObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[VCStatus].[pkid]
       ,dbo.[VCStatus].[Name]
  FROM dbo.[VCStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ChildObjectID] = @ChildObjectID
                  AND dbo.[ObjectAssociation].[ChildObjectMachine] = @ChildObjectMachine
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_VCStatus_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the VCStatus table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
    FROM
	[dbo].[VCStatus]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
    FROM
	[dbo].[VCStatus]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_VCStatus_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCStatus table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					FROM [dbo].[VCStatus] {0}
				)
				SELECT
				       [pkid],
				       [Name]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[VCStatus] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DomainDefinitionPossibleValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[DomainDefinitionID],
					[PossibleValue],
					[Series],
					[Description],
					[IsActive]
				FROM
					[dbo].[DomainDefinitionPossibleValue]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DomainDefinitionPossibleValue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DomainDefinitionID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DomainDefinitionID]'
				SET @SQL = @SQL + ', [PossibleValue]'
				SET @SQL = @SQL + ', [Series]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[DomainDefinitionPossibleValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DomainDefinitionID],'
				SET @SQL = @SQL + ' [PossibleValue],'
				SET @SQL = @SQL + ' [Series],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DomainDefinitionPossibleValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DomainDefinitionPossibleValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[DomainDefinitionPossibleValue]
					(
					[DomainDefinitionID]
					,[PossibleValue]
					,[Series]
					,[Description]
					,[IsActive]
					)
				VALUES
					(
					@DomainDefinitionID
					,@PossibleValue
					,@Series
					,@Description
					,@IsActive
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DomainDefinitionPossibleValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalDomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalPossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DomainDefinitionPossibleValue]
				SET
					[DomainDefinitionID] = @DomainDefinitionID
					,[PossibleValue] = @PossibleValue
					,[Series] = @Series
					,[Description] = @Description
					,[IsActive] = @IsActive
				WHERE
[DomainDefinitionID] = @OriginalDomainDefinitionID 
AND [PossibleValue] = @OriginalPossibleValue 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DomainDefinitionPossibleValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DomainDefinitionPossibleValue] WITH (ROWLOCK) 
				WHERE
					[DomainDefinitionID] = @DomainDefinitionID
					AND [PossibleValue] = @PossibleValue
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_GetByDomainDefinitionID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DomainDefinitionPossibleValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[DomainDefinitionID],
					[PossibleValue],
					[Series],
					[Description],
					[IsActive]
				FROM
					[dbo].[DomainDefinitionPossibleValue]
				WHERE
					[DomainDefinitionID] = @DomainDefinitionID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_GetByDomainDefinitionIDPossibleValue" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DomainDefinitionPossibleValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[DomainDefinitionID],
					[PossibleValue],
					[Series],
					[Description],
					[IsActive]
				FROM
					[dbo].[DomainDefinitionPossibleValue]
				WHERE
					[DomainDefinitionID] = @DomainDefinitionID
					AND [PossibleValue] = @PossibleValue
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DomainDefinitionPossibleValue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@DomainDefinitionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PossibleValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DomainDefinitionID]
	, [PossibleValue]
	, [Series]
	, [Description]
	, [IsActive]
    FROM
	[dbo].[DomainDefinitionPossibleValue]
    WHERE 
	 ([DomainDefinitionID] = @DomainDefinitionID OR @DomainDefinitionID IS NULL)
	AND ([PossibleValue] = @PossibleValue OR @PossibleValue IS NULL)
	AND ([Series] = @Series OR @Series IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DomainDefinitionID]
	, [PossibleValue]
	, [Series]
	, [Description]
	, [IsActive]
    FROM
	[dbo].[DomainDefinitionPossibleValue]
    WHERE 
	 ([DomainDefinitionID] = @DomainDefinitionID AND @DomainDefinitionID is not null)
	OR ([PossibleValue] = @PossibleValue AND @PossibleValue is not null)
	OR ([Series] = @Series AND @Series is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_DomainDefinitionPossibleValue_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DomainDefinitionPossibleValue table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [DomainDefinitionID]
					, [PossibleValue]
					, [Series]
					, [Description]
					, [IsActive]
					FROM [dbo].[DomainDefinitionPossibleValue] {0}
				)
				SELECT
				       [DomainDefinitionID],
				       [PossibleValue],
				       [Series],
				       [Description],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DomainDefinitionPossibleValue] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Workspace_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Workspace table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name],
					[WorkspaceTypeId],
					[RequestedByUser],
					[IsActive]
				FROM
					[dbo].[Workspace]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Workspace_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Workspace table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [RequestedByUser]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[Workspace]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [RequestedByUser],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Workspace]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Workspace_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Workspace table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestedByUser" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Workspace]
					(
					[Name]
					,[WorkspaceTypeId]
					,[RequestedByUser]
					,[IsActive]
					)
				VALUES
					(
					@Name
					,@WorkspaceTypeId
					,@RequestedByUser
					,@IsActive
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Workspace table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@OriginalName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalWorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RequestedByUser" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Workspace]
				SET
					[Name] = @Name
					,[WorkspaceTypeId] = @WorkspaceTypeId
					,[RequestedByUser] = @RequestedByUser
					,[IsActive] = @IsActive
				WHERE
[Name] = @OriginalName 
AND [WorkspaceTypeId] = @OriginalWorkspaceTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Workspace table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Workspace] WITH (ROWLOCK) 
				WHERE
					[Name] = @Name
					AND [WorkspaceTypeId] = @WorkspaceTypeId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_GetByWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Workspace table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Name],
					[WorkspaceTypeId],
					[RequestedByUser],
					[IsActive]
				FROM
					[dbo].[Workspace]
				WHERE
					[WorkspaceTypeId] = @WorkspaceTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_GetByNameWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Workspace table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name],
					[WorkspaceTypeId],
					[RequestedByUser],
					[IsActive]
				FROM
					[dbo].[Workspace]
				WHERE
					[Name] = @Name
					AND [WorkspaceTypeId] = @WorkspaceTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_GetByUserIDFromUserPermission" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Workspace].[pkid]
       ,dbo.[Workspace].[Name]
       ,dbo.[Workspace].[WorkspaceTypeId]
       ,dbo.[Workspace].[RequestedByUser]
       ,dbo.[Workspace].[IsActive]
  FROM dbo.[Workspace]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[UserPermission] 
                WHERE dbo.[UserPermission].[UserID] = @UserID
                  AND dbo.[UserPermission].[WorkspaceName] = dbo.[Workspace].[Name]
                  AND dbo.[UserPermission].[WorkspaceTypeId] = dbo.[Workspace].[WorkspaceTypeId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Workspace_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Workspace table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RequestedByUser" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [WorkspaceTypeId]
	, [RequestedByUser]
	, [IsActive]
    FROM
	[dbo].[Workspace]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([WorkspaceTypeId] = @WorkspaceTypeId OR @WorkspaceTypeId IS NULL)
	AND ([RequestedByUser] = @RequestedByUser OR @RequestedByUser IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [WorkspaceTypeId]
	, [RequestedByUser]
	, [IsActive]
    FROM
	[dbo].[Workspace]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([WorkspaceTypeId] = @WorkspaceTypeId AND @WorkspaceTypeId is not null)
	OR ([RequestedByUser] = @RequestedByUser AND @RequestedByUser is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Workspace_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Workspace table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					, [WorkspaceTypeId]
					, [RequestedByUser]
					, [IsActive]
					FROM [dbo].[Workspace] {0}
				)
				SELECT
				       [pkid],
				       [Name],
				       [WorkspaceTypeId],
				       [RequestedByUser],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Workspace] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ClassType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ClassType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ClassType]
				FROM
					[dbo].[ClassType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ClassType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClassType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ClassType]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ClassType]'
				SET @SQL = @SQL + ' FROM [dbo].[ClassType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ClassType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ClassType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_ClassType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ClassType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[ClassType]
					(
					[ClassType]
					)
				VALUES
					(
					@ClassType
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ClassType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ClassType]
				SET
					[ClassType] = @ClassType
				WHERE
[ClassType] = @OriginalClassType 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ClassType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ClassType] WITH (ROWLOCK) 
				WHERE
					[ClassType] = @ClassType
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassType_GetByClassType" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ClassType]
				FROM
					[dbo].[ClassType]
				WHERE
					[ClassType] = @ClassType
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ClassType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ClassType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ClassType]
    FROM
	[dbo].[ClassType]
    WHERE 
	 ([ClassType] = @ClassType OR @ClassType IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ClassType]
    FROM
	[dbo].[ClassType]
    WHERE 
	 ([ClassType] = @ClassType AND @ClassType is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_ClassType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClassType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ClassType]
					FROM [dbo].[ClassType] {0}
				)
				SELECT
				       [ClassType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ClassType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_WorkspaceType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the WorkspaceType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Description]
				FROM
					[dbo].[WorkspaceType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_WorkspaceType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the WorkspaceType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[WorkspaceType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[WorkspaceType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_WorkspaceType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the WorkspaceType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[WorkspaceType]
					(
					[Description]
					)
				VALUES
					(
					@Description
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_WorkspaceType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the WorkspaceType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[WorkspaceType]
				SET
					[Description] = @Description
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_WorkspaceType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the WorkspaceType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[WorkspaceType] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_WorkspaceType_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WorkspaceType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Description]
				FROM
					[dbo].[WorkspaceType]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_WorkspaceType_GetByDescription" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WorkspaceType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Description]
				FROM
					[dbo].[WorkspaceType]
				WHERE
					[Description] = @Description
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_WorkspaceType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the WorkspaceType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Description]
    FROM
	[dbo].[WorkspaceType]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Description]
    FROM
	[dbo].[WorkspaceType]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_WorkspaceType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the WorkspaceType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Description]
					FROM [dbo].[WorkspaceType] {0}
				)
				SELECT
				       [pkid],
				       [Description]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[WorkspaceType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_User_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name],
					[Password],
					[CreateDate],
					[LastLogin]
				FROM
					[dbo].[User]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_User_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [CreateDate]'
				SET @SQL = @SQL + ', [LastLogin]'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [CreateDate],'
				SET @SQL = @SQL + ' [LastLogin]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_User_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLogin" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[User]
					(
					[Name]
					,[Password]
					,[CreateDate]
					,[LastLogin]
					)
				VALUES
					(
					@Name
					,@Password
					,@CreateDate
					,@LastLogin
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_User_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@Password" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLogin" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[User]
				SET
					[Name] = @Name
					,[Password] = @Password
					,[CreateDate] = @CreateDate
					,[LastLogin] = @LastLogin
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_User_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the User table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[User] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_User_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name],
					[Password],
					[CreateDate],
					[LastLogin]
				FROM
					[dbo].[User]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_User_GetByWorkspaceNameWorkspaceTypeIdFromUserPermission" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[User].[pkid]
       ,dbo.[User].[Name]
       ,dbo.[User].[Password]
       ,dbo.[User].[CreateDate]
       ,dbo.[User].[LastLogin]
  FROM dbo.[User]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[UserPermission] 
                WHERE dbo.[UserPermission].[WorkspaceName] = @WorkspaceName
                  AND dbo.[UserPermission].[WorkspaceTypeId] = @WorkspaceTypeId
                  AND dbo.[UserPermission].[UserID] = dbo.[User].[pkid]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_User_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the User table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@Password" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastLogin" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [Password]
	, [CreateDate]
	, [LastLogin]
    FROM
	[dbo].[User]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([LastLogin] = @LastLogin OR @LastLogin IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [Password]
	, [CreateDate]
	, [LastLogin]
    FROM
	[dbo].[User]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([LastLogin] = @LastLogin AND @LastLogin is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_User_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					, [Password]
					, [CreateDate]
					, [LastLogin]
					FROM [dbo].[User] {0}
				)
				SELECT
				       [pkid],
				       [Name],
				       [Password],
				       [CreateDate],
				       [LastLogin]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[User] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFile_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GraphFile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[MajorVersion],
					[MinorVersion],
					[ModifiedDate],
					[Notes],
					[IsActive],
					[Archived],
					[AppVersion],
					[Blob],
					[WorkspaceName],
					[FileTypeID],
					[PreviousVersionID],
					[Name],
					[VCStatusID],
					[VCMachineID],
					[Machine],
					[WorkspaceTypeId],
					[OriginalFileUniqueID]
				FROM
					[dbo].[GraphFile]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFile_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFile table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [MajorVersion]'
				SET @SQL = @SQL + ', [MinorVersion]'
				SET @SQL = @SQL + ', [ModifiedDate]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ', [Archived]'
				SET @SQL = @SQL + ', [AppVersion]'
				SET @SQL = @SQL + ', [Blob]'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [FileTypeID]'
				SET @SQL = @SQL + ', [PreviousVersionID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [OriginalFileUniqueID]'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFile]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [MajorVersion],'
				SET @SQL = @SQL + ' [MinorVersion],'
				SET @SQL = @SQL + ' [ModifiedDate],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [IsActive],'
				SET @SQL = @SQL + ' [Archived],'
				SET @SQL = @SQL + ' [AppVersion],'
				SET @SQL = @SQL + ' [Blob],'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [FileTypeID],'
				SET @SQL = @SQL + ' [PreviousVersionID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [OriginalFileUniqueID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFile]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_GraphFile_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GraphFile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MajorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MinorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Archived" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@AppVersion" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Blob" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@FileTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PreviousVersionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalFileUniqueID" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[GraphFile]
					(
					[MajorVersion]
					,[MinorVersion]
					,[ModifiedDate]
					,[Notes]
					,[IsActive]
					,[Archived]
					,[AppVersion]
					,[Blob]
					,[WorkspaceName]
					,[FileTypeID]
					,[PreviousVersionID]
					,[Name]
					,[VCStatusID]
					,[VCMachineID]
					,[Machine]
					,[WorkspaceTypeId]
					,[OriginalFileUniqueID]
					)
				VALUES
					(
					@MajorVersion
					,@MinorVersion
					,@ModifiedDate
					,@Notes
					,@IsActive
					,@Archived
					,@AppVersion
					,@Blob
					,@WorkspaceName
					,@FileTypeID
					,@PreviousVersionID
					,@Name
					,@VCStatusID
					,@VCMachineID
					,@Machine
					,@WorkspaceTypeId
					,@OriginalFileUniqueID
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GraphFile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MajorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MinorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Notes" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Archived" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@AppVersion" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Blob" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@FileTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PreviousVersionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalFileUniqueID" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GraphFile]
				SET
					[MajorVersion] = @MajorVersion
					,[MinorVersion] = @MinorVersion
					,[ModifiedDate] = @ModifiedDate
					,[Notes] = @Notes
					,[IsActive] = @IsActive
					,[Archived] = @Archived
					,[AppVersion] = @AppVersion
					,[Blob] = @Blob
					,[WorkspaceName] = @WorkspaceName
					,[FileTypeID] = @FileTypeID
					,[PreviousVersionID] = @PreviousVersionID
					,[Name] = @Name
					,[VCStatusID] = @VCStatusID
					,[VCMachineID] = @VCMachineID
					,[Machine] = @Machine
					,[WorkspaceTypeId] = @WorkspaceTypeId
					,[OriginalFileUniqueID] = @OriginalFileUniqueID
				WHERE
[pkid] = @pkid 
AND [Machine] = @OriginalMachine 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GraphFile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[GraphFile] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					AND [Machine] = @Machine
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetByVCStatusID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFile table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[MajorVersion],
					[MinorVersion],
					[ModifiedDate],
					[Notes],
					[IsActive],
					[Archived],
					[AppVersion],
					[Blob],
					[WorkspaceName],
					[FileTypeID],
					[PreviousVersionID],
					[Name],
					[VCStatusID],
					[VCMachineID],
					[Machine],
					[WorkspaceTypeId],
					[OriginalFileUniqueID]
				FROM
					[dbo].[GraphFile]
				WHERE
					[VCStatusID] = @VCStatusID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetByFileTypeID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFile table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FileTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[MajorVersion],
					[MinorVersion],
					[ModifiedDate],
					[Notes],
					[IsActive],
					[Archived],
					[AppVersion],
					[Blob],
					[WorkspaceName],
					[FileTypeID],
					[PreviousVersionID],
					[Name],
					[VCStatusID],
					[VCMachineID],
					[Machine],
					[WorkspaceTypeId],
					[OriginalFileUniqueID]
				FROM
					[dbo].[GraphFile]
				WHERE
					[FileTypeID] = @FileTypeID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetByWorkspaceNameWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFile table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[MajorVersion],
					[MinorVersion],
					[ModifiedDate],
					[Notes],
					[IsActive],
					[Archived],
					[AppVersion],
					[Blob],
					[WorkspaceName],
					[FileTypeID],
					[PreviousVersionID],
					[Name],
					[VCStatusID],
					[VCMachineID],
					[Machine],
					[WorkspaceTypeId],
					[OriginalFileUniqueID]
				FROM
					[dbo].[GraphFile]
				WHERE
					[WorkspaceName] = @WorkspaceName
					AND [WorkspaceTypeId] = @WorkspaceTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetBypkidMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFile table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[MajorVersion],
					[MinorVersion],
					[ModifiedDate],
					[Notes],
					[IsActive],
					[Archived],
					[AppVersion],
					[Blob],
					[WorkspaceName],
					[FileTypeID],
					[PreviousVersionID],
					[Name],
					[VCStatusID],
					[VCMachineID],
					[Machine],
					[WorkspaceTypeId],
					[OriginalFileUniqueID]
				FROM
					[dbo].[GraphFile]
				WHERE
					[pkid] = @pkid
					AND [Machine] = @Machine
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetByCAidObjectIDChildObjectIDObjectMachineChildObjectMachineFromGraphFileAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[GraphFile].[pkid]
       ,dbo.[GraphFile].[MajorVersion]
       ,dbo.[GraphFile].[MinorVersion]
       ,dbo.[GraphFile].[ModifiedDate]
       ,dbo.[GraphFile].[Notes]
       ,dbo.[GraphFile].[IsActive]
       ,dbo.[GraphFile].[Archived]
       ,dbo.[GraphFile].[AppVersion]
       ,dbo.[GraphFile].[Blob]
       ,dbo.[GraphFile].[WorkspaceName]
       ,dbo.[GraphFile].[FileTypeID]
       ,dbo.[GraphFile].[PreviousVersionID]
       ,dbo.[GraphFile].[Name]
       ,dbo.[GraphFile].[VCStatusID]
       ,dbo.[GraphFile].[VCMachineID]
       ,dbo.[GraphFile].[Machine]
       ,dbo.[GraphFile].[WorkspaceTypeId]
       ,dbo.[GraphFile].[OriginalFileUniqueID]
  FROM dbo.[GraphFile]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[GraphFileAssociation] 
                WHERE dbo.[GraphFileAssociation].[CAid] = @CAid
                  AND dbo.[GraphFileAssociation].[ObjectID] = @ObjectID
                  AND dbo.[GraphFileAssociation].[ChildObjectID] = @ChildObjectID
                  AND dbo.[GraphFileAssociation].[ObjectMachine] = @ObjectMachine
                  AND dbo.[GraphFileAssociation].[ChildObjectMachine] = @ChildObjectMachine
                  AND dbo.[GraphFileAssociation].[GraphFileID] = dbo.[GraphFile].[pkid]
                  AND dbo.[GraphFileAssociation].[GraphFileMachine] = dbo.[GraphFile].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_GetByMetaObjectIDMachineIDFromGraphFileObject" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[GraphFile].[pkid]
       ,dbo.[GraphFile].[MajorVersion]
       ,dbo.[GraphFile].[MinorVersion]
       ,dbo.[GraphFile].[ModifiedDate]
       ,dbo.[GraphFile].[Notes]
       ,dbo.[GraphFile].[IsActive]
       ,dbo.[GraphFile].[Archived]
       ,dbo.[GraphFile].[AppVersion]
       ,dbo.[GraphFile].[Blob]
       ,dbo.[GraphFile].[WorkspaceName]
       ,dbo.[GraphFile].[FileTypeID]
       ,dbo.[GraphFile].[PreviousVersionID]
       ,dbo.[GraphFile].[Name]
       ,dbo.[GraphFile].[VCStatusID]
       ,dbo.[GraphFile].[VCMachineID]
       ,dbo.[GraphFile].[Machine]
       ,dbo.[GraphFile].[WorkspaceTypeId]
       ,dbo.[GraphFile].[OriginalFileUniqueID]
  FROM dbo.[GraphFile]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[GraphFileObject] 
                WHERE dbo.[GraphFileObject].[MetaObjectID] = @MetaObjectID
                  AND dbo.[GraphFileObject].[MachineID] = @MachineID
                  AND dbo.[GraphFileObject].[GraphFileID] = dbo.[GraphFile].[pkid]
                  AND dbo.[GraphFileObject].[GraphFileMachine] = dbo.[GraphFile].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFile_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GraphFile table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MajorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MinorVersion" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ModifiedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Notes" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Archived" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@AppVersion" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Blob" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@FileTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PreviousVersionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OriginalFileUniqueID" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [MajorVersion]
	, [MinorVersion]
	, [ModifiedDate]
	, [Notes]
	, [IsActive]
	, [Archived]
	, [AppVersion]
	, [Blob]
	, [WorkspaceName]
	, [FileTypeID]
	, [PreviousVersionID]
	, [Name]
	, [VCStatusID]
	, [VCMachineID]
	, [Machine]
	, [WorkspaceTypeId]
	, [OriginalFileUniqueID]
    FROM
	[dbo].[GraphFile]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([MajorVersion] = @MajorVersion OR @MajorVersion IS NULL)
	AND ([MinorVersion] = @MinorVersion OR @MinorVersion IS NULL)
	AND ([ModifiedDate] = @ModifiedDate OR @ModifiedDate IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
	AND ([Archived] = @Archived OR @Archived IS NULL)
	AND ([AppVersion] = @AppVersion OR @AppVersion IS NULL)
	AND ([WorkspaceName] = @WorkspaceName OR @WorkspaceName IS NULL)
	AND ([FileTypeID] = @FileTypeID OR @FileTypeID IS NULL)
	AND ([PreviousVersionID] = @PreviousVersionID OR @PreviousVersionID IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([VCStatusID] = @VCStatusID OR @VCStatusID IS NULL)
	AND ([VCMachineID] = @VCMachineID OR @VCMachineID IS NULL)
	AND ([Machine] = @Machine OR @Machine IS NULL)
	AND ([WorkspaceTypeId] = @WorkspaceTypeId OR @WorkspaceTypeId IS NULL)
	AND ([OriginalFileUniqueID] = @OriginalFileUniqueID OR @OriginalFileUniqueID IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [MajorVersion]
	, [MinorVersion]
	, [ModifiedDate]
	, [Notes]
	, [IsActive]
	, [Archived]
	, [AppVersion]
	, [Blob]
	, [WorkspaceName]
	, [FileTypeID]
	, [PreviousVersionID]
	, [Name]
	, [VCStatusID]
	, [VCMachineID]
	, [Machine]
	, [WorkspaceTypeId]
	, [OriginalFileUniqueID]
    FROM
	[dbo].[GraphFile]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([MajorVersion] = @MajorVersion AND @MajorVersion is not null)
	OR ([MinorVersion] = @MinorVersion AND @MinorVersion is not null)
	OR ([ModifiedDate] = @ModifiedDate AND @ModifiedDate is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	OR ([Archived] = @Archived AND @Archived is not null)
	OR ([AppVersion] = @AppVersion AND @AppVersion is not null)
	OR ([WorkspaceName] = @WorkspaceName AND @WorkspaceName is not null)
	OR ([FileTypeID] = @FileTypeID AND @FileTypeID is not null)
	OR ([PreviousVersionID] = @PreviousVersionID AND @PreviousVersionID is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([VCStatusID] = @VCStatusID AND @VCStatusID is not null)
	OR ([VCMachineID] = @VCMachineID AND @VCMachineID is not null)
	OR ([Machine] = @Machine AND @Machine is not null)
	OR ([WorkspaceTypeId] = @WorkspaceTypeId AND @WorkspaceTypeId is not null)
	OR ([OriginalFileUniqueID] = @OriginalFileUniqueID AND @OriginalFileUniqueID is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_GraphFile_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFile table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [MajorVersion]
					, [MinorVersion]
					, [ModifiedDate]
					, [Notes]
					, [IsActive]
					, [Archived]
					, [AppVersion]
					, [Blob]
					, [WorkspaceName]
					, [FileTypeID]
					, [PreviousVersionID]
					, [Name]
					, [VCStatusID]
					, [VCMachineID]
					, [Machine]
					, [WorkspaceTypeId]
					, [OriginalFileUniqueID]
					FROM [dbo].[GraphFile] {0}
				)
				SELECT
				       [pkid],
				       [MajorVersion],
				       [MinorVersion],
				       [ModifiedDate],
				       [Notes],
				       [IsActive],
				       [Archived],
				       [AppVersion],
				       [Blob],
				       [WorkspaceName],
				       [FileTypeID],
				       [PreviousVersionID],
				       [Name],
				       [VCStatusID],
				       [VCMachineID],
				       [Machine],
				       [WorkspaceTypeId],
				       [OriginalFileUniqueID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GraphFile] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Class_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Class table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Name],
					[DescriptionCode],
					[Category],
					[ClassType],
					[IsActive]
				FROM
					[dbo].[Class]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Class_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Class table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Name]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DescriptionCode]'
				SET @SQL = @SQL + ', [Category]'
				SET @SQL = @SQL + ', [ClassType]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[Class]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DescriptionCode],'
				SET @SQL = @SQL + ' [Category],'
				SET @SQL = @SQL + ' [ClassType],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Class]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Class_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Class table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionCode" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Class]
					(
					[Name]
					,[DescriptionCode]
					,[Category]
					,[ClassType]
					,[IsActive]
					)
				VALUES
					(
					@Name
					,@DescriptionCode
					,@Category
					,@ClassType
					,@IsActive
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Class_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Class table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DescriptionCode" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Class]
				SET
					[Name] = @Name
					,[DescriptionCode] = @DescriptionCode
					,[Category] = @Category
					,[ClassType] = @ClassType
					,[IsActive] = @IsActive
				WHERE
[Name] = @OriginalName 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Class_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Class table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Class] WITH (ROWLOCK) 
				WHERE
					[Name] = @Name
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Class_GetByClassType" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Class table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Name],
					[DescriptionCode],
					[Category],
					[ClassType],
					[IsActive]
				FROM
					[dbo].[Class]
				WHERE
					[ClassType] = @ClassType
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Class_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Class table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Name],
					[DescriptionCode],
					[Category],
					[ClassType],
					[IsActive]
				FROM
					[dbo].[Class]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Class_GetByCAidFromAllowedArtifact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Class].[Name]
       ,dbo.[Class].[DescriptionCode]
       ,dbo.[Class].[Category]
       ,dbo.[Class].[ClassType]
       ,dbo.[Class].[IsActive]
  FROM dbo.[Class]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[AllowedArtifact] 
                WHERE dbo.[AllowedArtifact].[CAid] = @CAid
                  AND dbo.[AllowedArtifact].[Class] = dbo.[Class].[Name]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Class_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Class table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DescriptionCode" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ClassType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Name]
	, [DescriptionCode]
	, [Category]
	, [ClassType]
	, [IsActive]
    FROM
	[dbo].[Class]
    WHERE 
	 ([Name] = @Name OR @Name IS NULL)
	AND ([DescriptionCode] = @DescriptionCode OR @DescriptionCode IS NULL)
	AND ([Category] = @Category OR @Category IS NULL)
	AND ([ClassType] = @ClassType OR @ClassType IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Name]
	, [DescriptionCode]
	, [Category]
	, [ClassType]
	, [IsActive]
    FROM
	[dbo].[Class]
    WHERE 
	 ([Name] = @Name AND @Name is not null)
	OR ([DescriptionCode] = @DescriptionCode AND @DescriptionCode is not null)
	OR ([Category] = @Category AND @Category is not null)
	OR ([ClassType] = @ClassType AND @ClassType is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Class_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Class table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [Name]
					, [DescriptionCode]
					, [Category]
					, [ClassType]
					, [IsActive]
					FROM [dbo].[Class] {0}
				)
				SELECT
				       [Name],
				       [DescriptionCode],
				       [Category],
				       [ClassType],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Class] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_MetaObject_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the MetaObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_MetaObject_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the MetaObject table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Class]'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [DateCreated]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ' FROM [dbo].[MetaObject]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Class],'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [DateCreated],'
				SET @SQL = @SQL + ' [LastModified]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[MetaObject]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_MetaObject_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the MetaObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[MetaObject]
					(
					[Class]
					,[WorkspaceName]
					,[UserID]
					,[Machine]
					,[VCStatusID]
					,[VCMachineID]
					,[WorkspaceTypeId]
					,[DateCreated]
					,[LastModified]
					)
				VALUES
					(
					@Class
					,@WorkspaceName
					,@UserID
					,@Machine
					,@VCStatusID
					,@VCMachineID
					,@WorkspaceTypeId
					,@DateCreated
					,@LastModified
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the MetaObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[MetaObject]
				SET
					[Class] = @Class
					,[WorkspaceName] = @WorkspaceName
					,[UserID] = @UserID
					,[Machine] = @Machine
					,[VCStatusID] = @VCStatusID
					,[VCMachineID] = @VCMachineID
					,[WorkspaceTypeId] = @WorkspaceTypeId
					,[DateCreated] = @DateCreated
					,[LastModified] = @LastModified
				WHERE
[pkid] = @pkid 
AND [Machine] = @OriginalMachine 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the MetaObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[MetaObject] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					AND [Machine] = @Machine
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MetaObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
				WHERE
					[Class] = @Class
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByUserID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MetaObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
				WHERE
					[UserID] = @UserID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByVCStatusID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MetaObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
				WHERE
					[VCStatusID] = @VCStatusID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByWorkspaceNameWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MetaObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
				WHERE
					[WorkspaceName] = @WorkspaceName
					AND [WorkspaceTypeId] = @WorkspaceTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetBypkidMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MetaObject table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Class],
					[WorkspaceName],
					[UserID],
					[Machine],
					[VCStatusID],
					[VCMachineID],
					[WorkspaceTypeId],
					[DateCreated],
					[LastModified]
				FROM
					[dbo].[MetaObject]
				WHERE
					[pkid] = @pkid
					AND [Machine] = @Machine
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByFieldIDFromObjectFieldValue" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectFieldValue] 
                WHERE dbo.[ObjectFieldValue].[FieldID] = @FieldID
                  AND dbo.[ObjectFieldValue].[ObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[ObjectFieldValue].[MachineID] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByCAidFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[CAid] = @CAid
                  AND dbo.[ObjectAssociation].[ObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[ObjectAssociation].[ObjectMachine] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByChildObjectIDChildObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ChildObjectID] = @ChildObjectID
                  AND dbo.[ObjectAssociation].[ChildObjectMachine] = @ChildObjectMachine
                  AND dbo.[ObjectAssociation].[ObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[ObjectAssociation].[ObjectMachine] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByCAidFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[CAid] = @CAid
                  AND dbo.[ObjectAssociation].[ChildObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[ObjectAssociation].[ChildObjectMachine] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByObjectIDObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ObjectID] = @ObjectID
                  AND dbo.[ObjectAssociation].[ObjectMachine] = @ObjectMachine
                  AND dbo.[ObjectAssociation].[ChildObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[ObjectAssociation].[ChildObjectMachine] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_GetByGraphFileIDGraphFileMachineFromGraphFileObject" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[MetaObject].[pkid]
       ,dbo.[MetaObject].[Class]
       ,dbo.[MetaObject].[WorkspaceName]
       ,dbo.[MetaObject].[UserID]
       ,dbo.[MetaObject].[Machine]
       ,dbo.[MetaObject].[VCStatusID]
       ,dbo.[MetaObject].[VCMachineID]
       ,dbo.[MetaObject].[WorkspaceTypeId]
       ,dbo.[MetaObject].[DateCreated]
       ,dbo.[MetaObject].[LastModified]
  FROM dbo.[MetaObject]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[GraphFileObject] 
                WHERE dbo.[GraphFileObject].[GraphFileID] = @GraphFileID
                  AND dbo.[GraphFileObject].[GraphFileMachine] = @GraphFileMachine
                  AND dbo.[GraphFileObject].[MetaObjectID] = dbo.[MetaObject].[pkid]
                  AND dbo.[GraphFileObject].[MachineID] = dbo.[MetaObject].[Machine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_MetaObject_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the MetaObject table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@DateCreated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastModified" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Class]
	, [WorkspaceName]
	, [UserID]
	, [Machine]
	, [VCStatusID]
	, [VCMachineID]
	, [WorkspaceTypeId]
	, [DateCreated]
	, [LastModified]
    FROM
	[dbo].[MetaObject]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Class] = @Class OR @Class IS NULL)
	AND ([WorkspaceName] = @WorkspaceName OR @WorkspaceName IS NULL)
	AND ([UserID] = @UserID OR @UserID IS NULL)
	AND ([Machine] = @Machine OR @Machine IS NULL)
	AND ([VCStatusID] = @VCStatusID OR @VCStatusID IS NULL)
	AND ([VCMachineID] = @VCMachineID OR @VCMachineID IS NULL)
	AND ([WorkspaceTypeId] = @WorkspaceTypeId OR @WorkspaceTypeId IS NULL)
	AND ([DateCreated] = @DateCreated OR @DateCreated IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Class]
	, [WorkspaceName]
	, [UserID]
	, [Machine]
	, [VCStatusID]
	, [VCMachineID]
	, [WorkspaceTypeId]
	, [DateCreated]
	, [LastModified]
    FROM
	[dbo].[MetaObject]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Class] = @Class AND @Class is not null)
	OR ([WorkspaceName] = @WorkspaceName AND @WorkspaceName is not null)
	OR ([UserID] = @UserID AND @UserID is not null)
	OR ([Machine] = @Machine AND @Machine is not null)
	OR ([VCStatusID] = @VCStatusID AND @VCStatusID is not null)
	OR ([VCMachineID] = @VCMachineID AND @VCMachineID is not null)
	OR ([WorkspaceTypeId] = @WorkspaceTypeId AND @WorkspaceTypeId is not null)
	OR ([DateCreated] = @DateCreated AND @DateCreated is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_MetaObject_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the MetaObject table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Class]
					, [WorkspaceName]
					, [UserID]
					, [Machine]
					, [VCStatusID]
					, [VCMachineID]
					, [WorkspaceTypeId]
					, [DateCreated]
					, [LastModified]
					FROM [dbo].[MetaObject] {0}
				)
				SELECT
				       [pkid],
				       [Class],
				       [WorkspaceName],
				       [UserID],
				       [Machine],
				       [VCStatusID],
				       [VCMachineID],
				       [WorkspaceTypeId],
				       [DateCreated],
				       [LastModified]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[MetaObject] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_UserPermission_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the UserPermission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserID],
					[PermissionID],
					[WorkspaceName],
					[WorkspaceTypeId]
				FROM
					[dbo].[UserPermission]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_UserPermission_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserPermission table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [PermissionID]'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ' FROM [dbo].[UserPermission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [PermissionID],'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[UserPermission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_UserPermission_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the UserPermission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PermissionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[UserPermission]
					(
					[UserID]
					,[PermissionID]
					,[WorkspaceName]
					,[WorkspaceTypeId]
					)
				VALUES
					(
					@UserID
					,@PermissionID
					,@WorkspaceName
					,@WorkspaceTypeId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the UserPermission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PermissionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@OriginalWorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalWorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[UserPermission]
				SET
					[UserID] = @UserID
					,[PermissionID] = @PermissionID
					,[WorkspaceName] = @WorkspaceName
					,[WorkspaceTypeId] = @WorkspaceTypeId
				WHERE
[UserID] = @OriginalUserID 
AND [WorkspaceName] = @OriginalWorkspaceName 
AND [WorkspaceTypeId] = @OriginalWorkspaceTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the UserPermission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[UserPermission] WITH (ROWLOCK) 
				WHERE
					[UserID] = @UserID
					AND [WorkspaceName] = @WorkspaceName
					AND [WorkspaceTypeId] = @WorkspaceTypeId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_GetByUserID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserPermission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[PermissionID],
					[WorkspaceName],
					[WorkspaceTypeId]
				FROM
					[dbo].[UserPermission]
				WHERE
					[UserID] = @UserID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_GetByPermissionID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserPermission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PermissionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[PermissionID],
					[WorkspaceName],
					[WorkspaceTypeId]
				FROM
					[dbo].[UserPermission]
				WHERE
					[PermissionID] = @PermissionID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_GetByWorkspaceNameWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserPermission table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[PermissionID],
					[WorkspaceName],
					[WorkspaceTypeId]
				FROM
					[dbo].[UserPermission]
				WHERE
					[WorkspaceName] = @WorkspaceName
					AND [WorkspaceTypeId] = @WorkspaceTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_GetByUserIDWorkspaceNameWorkspaceTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserPermission table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserID],
					[PermissionID],
					[WorkspaceName],
					[WorkspaceTypeId]
				FROM
					[dbo].[UserPermission]
				WHERE
					[UserID] = @UserID
					AND [WorkspaceName] = @WorkspaceName
					AND [WorkspaceTypeId] = @WorkspaceTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_UserPermission_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the UserPermission table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PermissionID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [PermissionID]
	, [WorkspaceName]
	, [WorkspaceTypeId]
    FROM
	[dbo].[UserPermission]
    WHERE 
	 ([UserID] = @UserID OR @UserID IS NULL)
	AND ([PermissionID] = @PermissionID OR @PermissionID IS NULL)
	AND ([WorkspaceName] = @WorkspaceName OR @WorkspaceName IS NULL)
	AND ([WorkspaceTypeId] = @WorkspaceTypeId OR @WorkspaceTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [PermissionID]
	, [WorkspaceName]
	, [WorkspaceTypeId]
    FROM
	[dbo].[UserPermission]
    WHERE 
	 ([UserID] = @UserID AND @UserID is not null)
	OR ([PermissionID] = @PermissionID AND @PermissionID is not null)
	OR ([WorkspaceName] = @WorkspaceName AND @WorkspaceName is not null)
	OR ([WorkspaceTypeId] = @WorkspaceTypeId AND @WorkspaceTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_UserPermission_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserPermission table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [UserID]
					, [PermissionID]
					, [WorkspaceName]
					, [WorkspaceTypeId]
					FROM [dbo].[UserPermission] {0}
				)
				SELECT
				       [UserID],
				       [PermissionID],
				       [WorkspaceName],
				       [WorkspaceTypeId]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[UserPermission] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Config_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Config table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ConfigName],
					[ConfigValue]
				FROM
					[dbo].[Config]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Config_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Config table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ConfigName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ConfigName]'
				SET @SQL = @SQL + ', [ConfigValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Config]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ConfigName],'
				SET @SQL = @SQL + ' [ConfigValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Config]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Config_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Config table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ConfigValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Config]
					(
					[ConfigName]
					,[ConfigValue]
					)
				VALUES
					(
					@ConfigName
					,@ConfigValue
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Config_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Config table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ConfigValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Config]
				SET
					[ConfigName] = @ConfigName
					,[ConfigValue] = @ConfigValue
				WHERE
[ConfigName] = @OriginalConfigName 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Config_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Config table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Config] WITH (ROWLOCK) 
				WHERE
					[ConfigName] = @ConfigName
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Config_GetByConfigName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Config table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ConfigName],
					[ConfigValue]
				FROM
					[dbo].[Config]
				WHERE
					[ConfigName] = @ConfigName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Config_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Config table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ConfigName" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ConfigValue" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ConfigName]
	, [ConfigValue]
    FROM
	[dbo].[Config]
    WHERE 
	 ([ConfigName] = @ConfigName OR @ConfigName IS NULL)
	AND ([ConfigValue] = @ConfigValue OR @ConfigValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ConfigName]
	, [ConfigValue]
    FROM
	[dbo].[Config]
    WHERE 
	 ([ConfigName] = @ConfigName AND @ConfigName is not null)
	OR ([ConfigValue] = @ConfigValue AND @ConfigValue is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Config_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Config table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ConfigName]
					, [ConfigValue]
					FROM [dbo].[Config] {0}
				)
				SELECT
				       [ConfigName],
				       [ConfigValue]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Config] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_AssociationType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AssociationType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name],
					[IsTwoWay],
					[LinkSpecification]
				FROM
					[dbo].[AssociationType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_AssociationType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AssociationType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [IsTwoWay]'
				SET @SQL = @SQL + ', [LinkSpecification]'
				SET @SQL = @SQL + ' FROM [dbo].[AssociationType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [IsTwoWay],'
				SET @SQL = @SQL + ' [LinkSpecification]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AssociationType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_AssociationType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AssociationType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="char" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@IsTwoWay" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@LinkSpecification" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AssociationType]
					(
					[Name]
					,[IsTwoWay]
					,[LinkSpecification]
					)
				VALUES
					(
					@Name
					,@IsTwoWay
					,@LinkSpecification
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AssociationType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AssociationType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="char" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@IsTwoWay" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@LinkSpecification" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AssociationType]
				SET
					[Name] = @Name
					,[IsTwoWay] = @IsTwoWay
					,[LinkSpecification] = @LinkSpecification
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AssociationType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AssociationType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AssociationType] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AssociationType_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AssociationType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name],
					[IsTwoWay],
					[LinkSpecification]
				FROM
					[dbo].[AssociationType]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_AssociationType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AssociationType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="char" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name],
					[IsTwoWay],
					[LinkSpecification]
				FROM
					[dbo].[AssociationType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_AssociationType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AssociationType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="char" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@IsTwoWay" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@LinkSpecification" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [IsTwoWay]
	, [LinkSpecification]
    FROM
	[dbo].[AssociationType]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([IsTwoWay] = @IsTwoWay OR @IsTwoWay IS NULL)
	AND ([LinkSpecification] = @LinkSpecification OR @LinkSpecification IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [IsTwoWay]
	, [LinkSpecification]
    FROM
	[dbo].[AssociationType]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([IsTwoWay] = @IsTwoWay AND @IsTwoWay is not null)
	OR ([LinkSpecification] = @LinkSpecification AND @LinkSpecification is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_AssociationType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AssociationType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					, [IsTwoWay]
					, [LinkSpecification]
					FROM [dbo].[AssociationType] {0}
				)
				SELECT
				       [pkid],
				       [Name],
				       [IsTwoWay],
				       [LinkSpecification]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AssociationType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ClassAssociation_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ClassAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ClassAssociation_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClassAssociation table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CAid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CAid]'
				SET @SQL = @SQL + ', [ParentClass]'
				SET @SQL = @SQL + ', [ChildClass]'
				SET @SQL = @SQL + ', [AssociationTypeID]'
				SET @SQL = @SQL + ', [Caption]'
				SET @SQL = @SQL + ', [AssociationObjectClass]'
				SET @SQL = @SQL + ', [CopyIncluded]'
				SET @SQL = @SQL + ', [IsDefault]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[ClassAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CAid],'
				SET @SQL = @SQL + ' [ParentClass],'
				SET @SQL = @SQL + ' [ChildClass],'
				SET @SQL = @SQL + ' [AssociationTypeID],'
				SET @SQL = @SQL + ' [Caption],'
				SET @SQL = @SQL + ' [AssociationObjectClass],'
				SET @SQL = @SQL + ' [CopyIncluded],'
				SET @SQL = @SQL + ' [IsDefault],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ClassAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_ClassAssociation_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ClassAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParentClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AssociationTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Caption" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AssociationObjectClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CopyIncluded" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDefault" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[ClassAssociation]
					(
					[ParentClass]
					,[ChildClass]
					,[AssociationTypeID]
					,[Caption]
					,[AssociationObjectClass]
					,[CopyIncluded]
					,[IsDefault]
					,[IsActive]
					)
				VALUES
					(
					@ParentClass
					,@ChildClass
					,@AssociationTypeID
					,@Caption
					,@AssociationObjectClass
					,@CopyIncluded
					,@IsDefault
					,@IsActive
					)
				
				-- Get the identity value
				SET @CAid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ClassAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ParentClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@AssociationTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Caption" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@AssociationObjectClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CopyIncluded" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDefault" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ClassAssociation]
				SET
					[ParentClass] = @ParentClass
					,[ChildClass] = @ChildClass
					,[AssociationTypeID] = @AssociationTypeID
					,[Caption] = @Caption
					,[AssociationObjectClass] = @AssociationObjectClass
					,[CopyIncluded] = @CopyIncluded
					,[IsDefault] = @IsDefault
					,[IsActive] = @IsActive
				WHERE
[CAid] = @CAid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ClassAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ClassAssociation] WITH (ROWLOCK) 
				WHERE
					[CAid] = @CAid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByParentClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ParentClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
				WHERE
					[ParentClass] = @ParentClass
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByChildClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
				WHERE
					[ChildClass] = @ChildClass
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByAssociationTypeID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AssociationTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
				WHERE
					[AssociationTypeID] = @AssociationTypeID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByAssociationObjectClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AssociationObjectClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
				WHERE
					[AssociationObjectClass] = @AssociationObjectClass
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByCAid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClassAssociation table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CAid],
					[ParentClass],
					[ChildClass],
					[AssociationTypeID],
					[Caption],
					[AssociationObjectClass],
					[CopyIncluded],
					[IsDefault],
					[IsActive]
				FROM
					[dbo].[ClassAssociation]
				WHERE
					[CAid] = @CAid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByObjectIDObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[ClassAssociation].[CAid]
       ,dbo.[ClassAssociation].[ParentClass]
       ,dbo.[ClassAssociation].[ChildClass]
       ,dbo.[ClassAssociation].[AssociationTypeID]
       ,dbo.[ClassAssociation].[Caption]
       ,dbo.[ClassAssociation].[AssociationObjectClass]
       ,dbo.[ClassAssociation].[CopyIncluded]
       ,dbo.[ClassAssociation].[IsDefault]
       ,dbo.[ClassAssociation].[IsActive]
  FROM dbo.[ClassAssociation]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ObjectID] = @ObjectID
                  AND dbo.[ObjectAssociation].[ObjectMachine] = @ObjectMachine
                  AND dbo.[ObjectAssociation].[CAid] = dbo.[ClassAssociation].[CAid]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByChildObjectIDChildObjectMachineFromObjectAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[ClassAssociation].[CAid]
       ,dbo.[ClassAssociation].[ParentClass]
       ,dbo.[ClassAssociation].[ChildClass]
       ,dbo.[ClassAssociation].[AssociationTypeID]
       ,dbo.[ClassAssociation].[Caption]
       ,dbo.[ClassAssociation].[AssociationObjectClass]
       ,dbo.[ClassAssociation].[CopyIncluded]
       ,dbo.[ClassAssociation].[IsDefault]
       ,dbo.[ClassAssociation].[IsActive]
  FROM dbo.[ClassAssociation]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectAssociation] 
                WHERE dbo.[ObjectAssociation].[ChildObjectID] = @ChildObjectID
                  AND dbo.[ObjectAssociation].[ChildObjectMachine] = @ChildObjectMachine
                  AND dbo.[ObjectAssociation].[CAid] = dbo.[ClassAssociation].[CAid]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_GetByClassFromAllowedArtifact" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[ClassAssociation].[CAid]
       ,dbo.[ClassAssociation].[ParentClass]
       ,dbo.[ClassAssociation].[ChildClass]
       ,dbo.[ClassAssociation].[AssociationTypeID]
       ,dbo.[ClassAssociation].[Caption]
       ,dbo.[ClassAssociation].[AssociationObjectClass]
       ,dbo.[ClassAssociation].[CopyIncluded]
       ,dbo.[ClassAssociation].[IsDefault]
       ,dbo.[ClassAssociation].[IsActive]
  FROM dbo.[ClassAssociation]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[AllowedArtifact] 
                WHERE dbo.[AllowedArtifact].[Class] = @Class
                  AND dbo.[AllowedArtifact].[CAid] = dbo.[ClassAssociation].[CAid]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ClassAssociation_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ClassAssociation table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ParentClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ChildClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@AssociationTypeID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Caption" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@AssociationObjectClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CopyIncluded" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDefault" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CAid]
	, [ParentClass]
	, [ChildClass]
	, [AssociationTypeID]
	, [Caption]
	, [AssociationObjectClass]
	, [CopyIncluded]
	, [IsDefault]
	, [IsActive]
    FROM
	[dbo].[ClassAssociation]
    WHERE 
	 ([CAid] = @CAid OR @CAid IS NULL)
	AND ([ParentClass] = @ParentClass OR @ParentClass IS NULL)
	AND ([ChildClass] = @ChildClass OR @ChildClass IS NULL)
	AND ([AssociationTypeID] = @AssociationTypeID OR @AssociationTypeID IS NULL)
	AND ([Caption] = @Caption OR @Caption IS NULL)
	AND ([AssociationObjectClass] = @AssociationObjectClass OR @AssociationObjectClass IS NULL)
	AND ([CopyIncluded] = @CopyIncluded OR @CopyIncluded IS NULL)
	AND ([IsDefault] = @IsDefault OR @IsDefault IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CAid]
	, [ParentClass]
	, [ChildClass]
	, [AssociationTypeID]
	, [Caption]
	, [AssociationObjectClass]
	, [CopyIncluded]
	, [IsDefault]
	, [IsActive]
    FROM
	[dbo].[ClassAssociation]
    WHERE 
	 ([CAid] = @CAid AND @CAid is not null)
	OR ([ParentClass] = @ParentClass AND @ParentClass is not null)
	OR ([ChildClass] = @ChildClass AND @ChildClass is not null)
	OR ([AssociationTypeID] = @AssociationTypeID AND @AssociationTypeID is not null)
	OR ([Caption] = @Caption AND @Caption is not null)
	OR ([AssociationObjectClass] = @AssociationObjectClass AND @AssociationObjectClass is not null)
	OR ([CopyIncluded] = @CopyIncluded AND @CopyIncluded is not null)
	OR ([IsDefault] = @IsDefault AND @IsDefault is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_ClassAssociation_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClassAssociation table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CAid]
					, [ParentClass]
					, [ChildClass]
					, [AssociationTypeID]
					, [Caption]
					, [AssociationObjectClass]
					, [CopyIncluded]
					, [IsDefault]
					, [IsActive]
					FROM [dbo].[ClassAssociation] {0}
				)
				SELECT
				       [CAid],
				       [ParentClass],
				       [ChildClass],
				       [AssociationTypeID],
				       [Caption],
				       [AssociationObjectClass],
				       [CopyIncluded],
				       [IsDefault],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ClassAssociation] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ObjectAssociation_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ObjectAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ObjectAssociation table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CAid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CAid]'
				SET @SQL = @SQL + ', [ObjectID]'
				SET @SQL = @SQL + ', [ChildObjectID]'
				SET @SQL = @SQL + ', [Series]'
				SET @SQL = @SQL + ', [ObjectMachine]'
				SET @SQL = @SQL + ', [ChildObjectMachine]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ' FROM [dbo].[ObjectAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CAid],'
				SET @SQL = @SQL + ' [ObjectID],'
				SET @SQL = @SQL + ' [ChildObjectID],'
				SET @SQL = @SQL + ' [Series],'
				SET @SQL = @SQL + ' [ObjectMachine],'
				SET @SQL = @SQL + ' [ChildObjectMachine],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Machine]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ObjectAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_ObjectAssociation_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ObjectAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[ObjectAssociation]
					(
					[CAid]
					,[ObjectID]
					,[ChildObjectID]
					,[Series]
					,[ObjectMachine]
					,[ChildObjectMachine]
					,[VCStatusID]
					,[VCMachineID]
					,[Machine]
					)
				VALUES
					(
					@CAid
					,@ObjectID
					,@ChildObjectID
					,@Series
					,@ObjectMachine
					,@ChildObjectMachine
					,@VCStatusID
					,@VCMachineID
					,@Machine
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ObjectAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ObjectAssociation]
				SET
					[CAid] = @CAid
					,[ObjectID] = @ObjectID
					,[ChildObjectID] = @ChildObjectID
					,[Series] = @Series
					,[ObjectMachine] = @ObjectMachine
					,[ChildObjectMachine] = @ChildObjectMachine
					,[VCStatusID] = @VCStatusID
					,[VCMachineID] = @VCMachineID
					,[Machine] = @Machine
				WHERE
[CAid] = @OriginalCAid 
AND [ObjectID] = @OriginalObjectID 
AND [ChildObjectID] = @OriginalChildObjectID 
AND [ObjectMachine] = @OriginalObjectMachine 
AND [ChildObjectMachine] = @OriginalChildObjectMachine 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ObjectAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ObjectAssociation] WITH (ROWLOCK) 
				WHERE
					[CAid] = @CAid
					AND [ObjectID] = @ObjectID
					AND [ChildObjectID] = @ChildObjectID
					AND [ObjectMachine] = @ObjectMachine
					AND [ChildObjectMachine] = @ChildObjectMachine
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByVCStatusID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
				WHERE
					[VCStatusID] = @VCStatusID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByCAid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
				WHERE
					[CAid] = @CAid
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByObjectIDObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
				WHERE
					[ObjectID] = @ObjectID
					AND [ObjectMachine] = @ObjectMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByChildObjectIDChildObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
				WHERE
					[ChildObjectID] = @ChildObjectID
					AND [ChildObjectMachine] = @ChildObjectMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByCAidObjectIDChildObjectIDObjectMachineChildObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectAssociation table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[Series],
					[ObjectMachine],
					[ChildObjectMachine],
					[VCStatusID],
					[VCMachineID],
					[Machine]
				FROM
					[dbo].[ObjectAssociation]
				WHERE
					[CAid] = @CAid
					AND [ObjectID] = @ObjectID
					AND [ChildObjectID] = @ChildObjectID
					AND [ObjectMachine] = @ObjectMachine
					AND [ChildObjectMachine] = @ChildObjectMachine
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_GetByGraphFileIDGraphFileMachineFromGraphFileAssociation" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[ObjectAssociation].[CAid]
       ,dbo.[ObjectAssociation].[ObjectID]
       ,dbo.[ObjectAssociation].[ChildObjectID]
       ,dbo.[ObjectAssociation].[Series]
       ,dbo.[ObjectAssociation].[ObjectMachine]
       ,dbo.[ObjectAssociation].[ChildObjectMachine]
       ,dbo.[ObjectAssociation].[VCStatusID]
       ,dbo.[ObjectAssociation].[VCMachineID]
       ,dbo.[ObjectAssociation].[Machine]
  FROM dbo.[ObjectAssociation]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[GraphFileAssociation] 
                WHERE dbo.[GraphFileAssociation].[GraphFileID] = @GraphFileID
                  AND dbo.[GraphFileAssociation].[GraphFileMachine] = @GraphFileMachine
                  AND dbo.[GraphFileAssociation].[CAid] = dbo.[ObjectAssociation].[CAid]
                  AND dbo.[GraphFileAssociation].[ObjectID] = dbo.[ObjectAssociation].[ObjectID]
                  AND dbo.[GraphFileAssociation].[ChildObjectID] = dbo.[ObjectAssociation].[ChildObjectID]
                  AND dbo.[GraphFileAssociation].[ObjectMachine] = dbo.[ObjectAssociation].[ObjectMachine]
                  AND dbo.[GraphFileAssociation].[ChildObjectMachine] = dbo.[ObjectAssociation].[ChildObjectMachine]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectAssociation_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ObjectAssociation table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Series" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@VCStatusID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@VCMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Machine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [Series]
	, [ObjectMachine]
	, [ChildObjectMachine]
	, [VCStatusID]
	, [VCMachineID]
	, [Machine]
    FROM
	[dbo].[ObjectAssociation]
    WHERE 
	 ([CAid] = @CAid OR @CAid IS NULL)
	AND ([ObjectID] = @ObjectID OR @ObjectID IS NULL)
	AND ([ChildObjectID] = @ChildObjectID OR @ChildObjectID IS NULL)
	AND ([Series] = @Series OR @Series IS NULL)
	AND ([ObjectMachine] = @ObjectMachine OR @ObjectMachine IS NULL)
	AND ([ChildObjectMachine] = @ChildObjectMachine OR @ChildObjectMachine IS NULL)
	AND ([VCStatusID] = @VCStatusID OR @VCStatusID IS NULL)
	AND ([VCMachineID] = @VCMachineID OR @VCMachineID IS NULL)
	AND ([Machine] = @Machine OR @Machine IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [Series]
	, [ObjectMachine]
	, [ChildObjectMachine]
	, [VCStatusID]
	, [VCMachineID]
	, [Machine]
    FROM
	[dbo].[ObjectAssociation]
    WHERE 
	 ([CAid] = @CAid AND @CAid is not null)
	OR ([ObjectID] = @ObjectID AND @ObjectID is not null)
	OR ([ChildObjectID] = @ChildObjectID AND @ChildObjectID is not null)
	OR ([Series] = @Series AND @Series is not null)
	OR ([ObjectMachine] = @ObjectMachine AND @ObjectMachine is not null)
	OR ([ChildObjectMachine] = @ChildObjectMachine AND @ChildObjectMachine is not null)
	OR ([VCStatusID] = @VCStatusID AND @VCStatusID is not null)
	OR ([VCMachineID] = @VCMachineID AND @VCMachineID is not null)
	OR ([Machine] = @Machine AND @Machine is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_ObjectAssociation_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ObjectAssociation table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CAid]
					, [ObjectID]
					, [ChildObjectID]
					, [Series]
					, [ObjectMachine]
					, [ChildObjectMachine]
					, [VCStatusID]
					, [VCMachineID]
					, [Machine]
					FROM [dbo].[ObjectAssociation] {0}
				)
				SELECT
				       [CAid],
				       [ObjectID],
				       [ChildObjectID],
				       [Series],
				       [ObjectMachine],
				       [ChildObjectMachine],
				       [VCStatusID],
				       [VCMachineID],
				       [Machine]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ObjectAssociation] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_FileType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FileType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[FileType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_FileType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FileType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[FileType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FileType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_FileType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FileType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[FileType]
					(
					[Name]
					)
				VALUES
					(
					@Name
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_FileType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FileType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FileType]
				SET
					[Name] = @Name
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_FileType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FileType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[FileType] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_FileType_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FileType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[FileType]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_FileType_GetByName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FileType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Name" type="varchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name]
				FROM
					[dbo].[FileType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_FileType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FileType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
    FROM
	[dbo].[FileType]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
    FROM
	[dbo].[FileType]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_FileType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FileType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					FROM [dbo].[FileType] {0}
				)
				SELECT
				       [pkid],
				       [Name]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[FileType] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ObjectFieldValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ObjectFieldValue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ObjectID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ObjectID]'
				SET @SQL = @SQL + ', [FieldID]'
				SET @SQL = @SQL + ', [ValueString]'
				SET @SQL = @SQL + ', [ValueInt]'
				SET @SQL = @SQL + ', [ValueDouble]'
				SET @SQL = @SQL + ', [ValueObjectID]'
				SET @SQL = @SQL + ', [ValueDate]'
				SET @SQL = @SQL + ', [ValueBoolean]'
				SET @SQL = @SQL + ', [ValueLongText]'
				SET @SQL = @SQL + ', [ValueRTF]'
				SET @SQL = @SQL + ', [MachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[ObjectFieldValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ObjectID],'
				SET @SQL = @SQL + ' [FieldID],'
				SET @SQL = @SQL + ' [ValueString],'
				SET @SQL = @SQL + ' [ValueInt],'
				SET @SQL = @SQL + ' [ValueDouble],'
				SET @SQL = @SQL + ' [ValueObjectID],'
				SET @SQL = @SQL + ' [ValueDate],'
				SET @SQL = @SQL + ' [ValueBoolean],'
				SET @SQL = @SQL + ' [ValueLongText],'
				SET @SQL = @SQL + ' [ValueRTF],'
				SET @SQL = @SQL + ' [MachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ObjectFieldValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ObjectFieldValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueString" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@ValueInt" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueDouble" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@ValueObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ValueBoolean" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueLongText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueRTF" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[ObjectFieldValue]
					(
					[ObjectID]
					,[FieldID]
					,[ValueString]
					,[ValueInt]
					,[ValueDouble]
					,[ValueObjectID]
					,[ValueDate]
					,[ValueBoolean]
					,[ValueLongText]
					,[ValueRTF]
					,[MachineID]
					)
				VALUES
					(
					@ObjectID
					,@FieldID
					,@ValueString
					,@ValueInt
					,@ValueDouble
					,@ValueObjectID
					,@ValueDate
					,@ValueBoolean
					,@ValueLongText
					,@ValueRTF
					,@MachineID
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ObjectFieldValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalFieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueString" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
				<parameter name="@ValueInt" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueDouble" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault=""/>
				<parameter name="@ValueObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ValueBoolean" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueLongText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ValueRTF" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ObjectFieldValue]
				SET
					[ObjectID] = @ObjectID
					,[FieldID] = @FieldID
					,[ValueString] = @ValueString
					,[ValueInt] = @ValueInt
					,[ValueDouble] = @ValueDouble
					,[ValueObjectID] = @ValueObjectID
					,[ValueDate] = @ValueDate
					,[ValueBoolean] = @ValueBoolean
					,[ValueLongText] = @ValueLongText
					,[ValueRTF] = @ValueRTF
					,[MachineID] = @MachineID
				WHERE
[ObjectID] = @OriginalObjectID 
AND [FieldID] = @OriginalFieldID 
AND [MachineID] = @OriginalMachineID 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ObjectFieldValue table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[ObjectFieldValue] WITH (ROWLOCK) 
				WHERE
					[ObjectID] = @ObjectID
					AND [FieldID] = @FieldID
					AND [MachineID] = @MachineID
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetByFieldID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectFieldValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
				WHERE
					[FieldID] = @FieldID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetByObjectIDMachineID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectFieldValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
				WHERE
					[ObjectID] = @ObjectID
					AND [MachineID] = @MachineID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetByObjectIDFieldIDMachineID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectFieldValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
				WHERE
					[ObjectID] = @ObjectID
					AND [FieldID] = @FieldID
					AND [MachineID] = @MachineID
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetByValueString" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectFieldValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ValueString" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
				WHERE
					[ValueString] = @ValueString
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_GetByValueInt" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ObjectFieldValue table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ValueInt" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ObjectID],
					[FieldID],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean],
					[ValueLongText],
					[ValueRTF],
					[MachineID]
				FROM
					[dbo].[ObjectFieldValue]
				WHERE
					[ValueInt] = @ValueInt
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ObjectFieldValue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FieldID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ValueString" type="varchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
				<parameter name="@ValueInt" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ValueDouble" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="null"/>
				<parameter name="@ValueObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ValueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ValueBoolean" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ValueLongText" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ValueRTF" type="text" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ObjectID]
	, [FieldID]
	, [ValueString]
	, [ValueInt]
	, [ValueDouble]
	, [ValueObjectID]
	, [ValueDate]
	, [ValueBoolean]
	, [ValueLongText]
	, [ValueRTF]
	, [MachineID]
    FROM
	[dbo].[ObjectFieldValue]
    WHERE 
	 ([ObjectID] = @ObjectID OR @ObjectID IS NULL)
	AND ([FieldID] = @FieldID OR @FieldID IS NULL)
	AND ([ValueString] = @ValueString OR @ValueString IS NULL)
	AND ([ValueInt] = @ValueInt OR @ValueInt IS NULL)
	AND ([ValueDouble] = @ValueDouble OR @ValueDouble IS NULL)
	AND ([ValueObjectID] = @ValueObjectID OR @ValueObjectID IS NULL)
	AND ([ValueDate] = @ValueDate OR @ValueDate IS NULL)
	AND ([ValueBoolean] = @ValueBoolean OR @ValueBoolean IS NULL)
	AND ([MachineID] = @MachineID OR @MachineID IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ObjectID]
	, [FieldID]
	, [ValueString]
	, [ValueInt]
	, [ValueDouble]
	, [ValueObjectID]
	, [ValueDate]
	, [ValueBoolean]
	, [ValueLongText]
	, [ValueRTF]
	, [MachineID]
    FROM
	[dbo].[ObjectFieldValue]
    WHERE 
	 ([ObjectID] = @ObjectID AND @ObjectID is not null)
	OR ([FieldID] = @FieldID AND @FieldID is not null)
	OR ([ValueString] = @ValueString AND @ValueString is not null)
	OR ([ValueInt] = @ValueInt AND @ValueInt is not null)
	OR ([ValueDouble] = @ValueDouble AND @ValueDouble is not null)
	OR ([ValueObjectID] = @ValueObjectID AND @ValueObjectID is not null)
	OR ([ValueDate] = @ValueDate AND @ValueDate is not null)
	OR ([ValueBoolean] = @ValueBoolean AND @ValueBoolean is not null)
	OR ([MachineID] = @MachineID AND @MachineID is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_ObjectFieldValue_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ObjectFieldValue table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ObjectID]
					, [FieldID]
					, [ValueString]
					, [ValueInt]
					, [ValueDouble]
					, [ValueObjectID]
					, [ValueDate]
					, [ValueBoolean]
					, [ValueLongText]
					, [ValueRTF]
					, [MachineID]
					FROM [dbo].[ObjectFieldValue] {0}
				)
				SELECT
				       [ObjectID],
				       [FieldID],
				       [ValueString],
				       [ValueInt],
				       [ValueDouble],
				       [ValueObjectID],
				       [ValueDate],
				       [ValueBoolean],
				       [ValueLongText],
				       [ValueRTF],
				       [MachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ObjectFieldValue] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GraphFileAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[GraphFileID],
					[GraphFileMachine],
					[ChildObjectMachine],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ObjectMachine]
				FROM
					[dbo].[GraphFileAssociation]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFileAssociation_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFileAssociation table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[GraphFileID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [GraphFileID]'
				SET @SQL = @SQL + ', [GraphFileMachine]'
				SET @SQL = @SQL + ', [ChildObjectMachine]'
				SET @SQL = @SQL + ', [CAid]'
				SET @SQL = @SQL + ', [ObjectID]'
				SET @SQL = @SQL + ', [ChildObjectID]'
				SET @SQL = @SQL + ', [ObjectMachine]'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFileAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [GraphFileID],'
				SET @SQL = @SQL + ' [GraphFileMachine],'
				SET @SQL = @SQL + ' [ChildObjectMachine],'
				SET @SQL = @SQL + ' [CAid],'
				SET @SQL = @SQL + ' [ObjectID],'
				SET @SQL = @SQL + ' [ChildObjectID],'
				SET @SQL = @SQL + ' [ObjectMachine]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFileAssociation]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GraphFileAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[GraphFileAssociation]
					(
					[GraphFileID]
					,[GraphFileMachine]
					,[ChildObjectMachine]
					,[CAid]
					,[ObjectID]
					,[ChildObjectID]
					,[ObjectMachine]
					)
				VALUES
					(
					@GraphFileID
					,@GraphFileMachine
					,@ChildObjectMachine
					,@CAid
					,@ObjectID
					,@ChildObjectID
					,@ObjectMachine
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GraphFileAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalGraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalGraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GraphFileAssociation]
				SET
					[GraphFileID] = @GraphFileID
					,[GraphFileMachine] = @GraphFileMachine
					,[ChildObjectMachine] = @ChildObjectMachine
					,[CAid] = @CAid
					,[ObjectID] = @ObjectID
					,[ChildObjectID] = @ChildObjectID
					,[ObjectMachine] = @ObjectMachine
				WHERE
[GraphFileID] = @OriginalGraphFileID 
AND [GraphFileMachine] = @OriginalGraphFileMachine 
AND [ChildObjectMachine] = @OriginalChildObjectMachine 
AND [CAid] = @OriginalCAid 
AND [ObjectID] = @OriginalObjectID 
AND [ChildObjectID] = @OriginalChildObjectID 
AND [ObjectMachine] = @OriginalObjectMachine 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GraphFileAssociation table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[GraphFileAssociation] WITH (ROWLOCK) 
				WHERE
					[GraphFileID] = @GraphFileID
					AND [GraphFileMachine] = @GraphFileMachine
					AND [ChildObjectMachine] = @ChildObjectMachine
					AND [CAid] = @CAid
					AND [ObjectID] = @ObjectID
					AND [ChildObjectID] = @ChildObjectID
					AND [ObjectMachine] = @ObjectMachine
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_GetByGraphFileIDGraphFileMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[GraphFileID],
					[GraphFileMachine],
					[ChildObjectMachine],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ObjectMachine]
				FROM
					[dbo].[GraphFileAssociation]
				WHERE
					[GraphFileID] = @GraphFileID
					AND [GraphFileMachine] = @GraphFileMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_GetByCAidObjectIDChildObjectIDObjectMachineChildObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileAssociation table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[GraphFileID],
					[GraphFileMachine],
					[ChildObjectMachine],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ObjectMachine]
				FROM
					[dbo].[GraphFileAssociation]
				WHERE
					[CAid] = @CAid
					AND [ObjectID] = @ObjectID
					AND [ChildObjectID] = @ChildObjectID
					AND [ObjectMachine] = @ObjectMachine
					AND [ChildObjectMachine] = @ChildObjectMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_GetByGraphFileIDGraphFileMachineChildObjectMachineCAidObjectIDChildObjectIDObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileAssociation table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[GraphFileID],
					[GraphFileMachine],
					[ChildObjectMachine],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ObjectMachine]
				FROM
					[dbo].[GraphFileAssociation]
				WHERE
					[GraphFileID] = @GraphFileID
					AND [GraphFileMachine] = @GraphFileMachine
					AND [ChildObjectMachine] = @ChildObjectMachine
					AND [CAid] = @CAid
					AND [ObjectID] = @ObjectID
					AND [ChildObjectID] = @ChildObjectID
					AND [ObjectMachine] = @ObjectMachine
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GraphFileAssociation table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GraphFileID]
	, [GraphFileMachine]
	, [ChildObjectMachine]
	, [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [ObjectMachine]
    FROM
	[dbo].[GraphFileAssociation]
    WHERE 
	 ([GraphFileID] = @GraphFileID OR @GraphFileID IS NULL)
	AND ([GraphFileMachine] = @GraphFileMachine OR @GraphFileMachine IS NULL)
	AND ([ChildObjectMachine] = @ChildObjectMachine OR @ChildObjectMachine IS NULL)
	AND ([CAid] = @CAid OR @CAid IS NULL)
	AND ([ObjectID] = @ObjectID OR @ObjectID IS NULL)
	AND ([ChildObjectID] = @ChildObjectID OR @ChildObjectID IS NULL)
	AND ([ObjectMachine] = @ObjectMachine OR @ObjectMachine IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GraphFileID]
	, [GraphFileMachine]
	, [ChildObjectMachine]
	, [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [ObjectMachine]
    FROM
	[dbo].[GraphFileAssociation]
    WHERE 
	 ([GraphFileID] = @GraphFileID AND @GraphFileID is not null)
	OR ([GraphFileMachine] = @GraphFileMachine AND @GraphFileMachine is not null)
	OR ([ChildObjectMachine] = @ChildObjectMachine AND @ChildObjectMachine is not null)
	OR ([CAid] = @CAid AND @CAid is not null)
	OR ([ObjectID] = @ObjectID AND @ObjectID is not null)
	OR ([ChildObjectID] = @ChildObjectID AND @ChildObjectID is not null)
	OR ([ObjectMachine] = @ObjectMachine AND @ObjectMachine is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_GraphFileAssociation_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFileAssociation table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [GraphFileID]
					, [GraphFileMachine]
					, [ChildObjectMachine]
					, [CAid]
					, [ObjectID]
					, [ChildObjectID]
					, [ObjectMachine]
					FROM [dbo].[GraphFileAssociation] {0}
				)
				SELECT
				       [GraphFileID],
				       [GraphFileMachine],
				       [ChildObjectMachine],
				       [CAid],
				       [ObjectID],
				       [ChildObjectID],
				       [ObjectMachine]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GraphFileAssociation] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_AllowedArtifact_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AllowedArtifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CAid],
					[Class],
					[IsActive]
				FROM
					[dbo].[AllowedArtifact]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_AllowedArtifact_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AllowedArtifact table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CAid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CAid]'
				SET @SQL = @SQL + ', [Class]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[AllowedArtifact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CAid],'
				SET @SQL = @SQL + ' [Class],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AllowedArtifact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_AllowedArtifact_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AllowedArtifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AllowedArtifact]
					(
					[CAid]
					,[Class]
					,[IsActive]
					)
				VALUES
					(
					@CAid
					,@Class
					,@IsActive
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AllowedArtifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalCAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalClass" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AllowedArtifact]
				SET
					[CAid] = @CAid
					,[Class] = @Class
					,[IsActive] = @IsActive
				WHERE
[CAid] = @OriginalCAid 
AND [Class] = @OriginalClass 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AllowedArtifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AllowedArtifact] WITH (ROWLOCK) 
				WHERE
					[CAid] = @CAid
					AND [Class] = @Class
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_GetByClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AllowedArtifact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[Class],
					[IsActive]
				FROM
					[dbo].[AllowedArtifact]
				WHERE
					[Class] = @Class
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_GetByCAid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AllowedArtifact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CAid],
					[Class],
					[IsActive]
				FROM
					[dbo].[AllowedArtifact]
				WHERE
					[CAid] = @CAid
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_GetByCAidClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AllowedArtifact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CAid],
					[Class],
					[IsActive]
				FROM
					[dbo].[AllowedArtifact]
				WHERE
					[CAid] = @CAid
					AND [Class] = @Class
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_AllowedArtifact_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AllowedArtifact table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CAid]
	, [Class]
	, [IsActive]
    FROM
	[dbo].[AllowedArtifact]
    WHERE 
	 ([CAid] = @CAid OR @CAid IS NULL)
	AND ([Class] = @Class OR @Class IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CAid]
	, [Class]
	, [IsActive]
    FROM
	[dbo].[AllowedArtifact]
    WHERE 
	 ([CAid] = @CAid AND @CAid is not null)
	OR ([Class] = @Class AND @Class is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_AllowedArtifact_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AllowedArtifact table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CAid]
					, [Class]
					, [IsActive]
					FROM [dbo].[AllowedArtifact] {0}
				)
				SELECT
				       [CAid],
				       [Class],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AllowedArtifact] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_DomainDefinition_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DomainDefinition table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Name],
					[IsActive]
				FROM
					[dbo].[DomainDefinition]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_DomainDefinition_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DomainDefinition table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[DomainDefinition]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DomainDefinition]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_DomainDefinition_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DomainDefinition table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[DomainDefinition]
					(
					[Name]
					,[IsActive]
					)
				VALUES
					(
					@Name
					,@IsActive
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinition_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DomainDefinition table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DomainDefinition]
				SET
					[Name] = @Name
					,[IsActive] = @IsActive
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinition_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DomainDefinition table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DomainDefinition] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinition_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DomainDefinition table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Name],
					[IsActive]
				FROM
					[dbo].[DomainDefinition]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_DomainDefinition_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DomainDefinition table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [IsActive]
    FROM
	[dbo].[DomainDefinition]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Name]
	, [IsActive]
    FROM
	[dbo].[DomainDefinition]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_DomainDefinition_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DomainDefinition table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Name]
					, [IsActive]
					FROM [dbo].[DomainDefinition] {0}
				)
				SELECT
				       [pkid],
				       [Name],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DomainDefinition] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Artifact_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Artifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ArtifactID],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ArtifactObjectID],
					[ObjectMachine],
					[ChildObjectMachine],
					[ArtefactMachine]
				FROM
					[dbo].[Artifact]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Artifact_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Artifact table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ArtifactID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ArtifactID]'
				SET @SQL = @SQL + ', [CAid]'
				SET @SQL = @SQL + ', [ObjectID]'
				SET @SQL = @SQL + ', [ChildObjectID]'
				SET @SQL = @SQL + ', [ArtifactObjectID]'
				SET @SQL = @SQL + ', [ObjectMachine]'
				SET @SQL = @SQL + ', [ChildObjectMachine]'
				SET @SQL = @SQL + ', [ArtefactMachine]'
				SET @SQL = @SQL + ' FROM [dbo].[Artifact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ArtifactID],'
				SET @SQL = @SQL + ' [CAid],'
				SET @SQL = @SQL + ' [ObjectID],'
				SET @SQL = @SQL + ' [ChildObjectID],'
				SET @SQL = @SQL + ' [ArtifactObjectID],'
				SET @SQL = @SQL + ' [ObjectMachine],'
				SET @SQL = @SQL + ' [ChildObjectMachine],'
				SET @SQL = @SQL + ' [ArtefactMachine]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Artifact]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Artifact_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Artifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ArtifactID" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ArtifactObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ArtefactMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Artifact]
					(
					[CAid]
					,[ObjectID]
					,[ChildObjectID]
					,[ArtifactObjectID]
					,[ObjectMachine]
					,[ChildObjectMachine]
					,[ArtefactMachine]
					)
				VALUES
					(
					@CAid
					,@ObjectID
					,@ChildObjectID
					,@ArtifactObjectID
					,@ObjectMachine
					,@ChildObjectMachine
					,@ArtefactMachine
					)
				
				-- Get the identity value
				SET @ArtifactID = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Artifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ArtifactID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ArtifactObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ArtefactMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Artifact]
				SET
					[CAid] = @CAid
					,[ObjectID] = @ObjectID
					,[ChildObjectID] = @ChildObjectID
					,[ArtifactObjectID] = @ArtifactObjectID
					,[ObjectMachine] = @ObjectMachine
					,[ChildObjectMachine] = @ChildObjectMachine
					,[ArtefactMachine] = @ArtefactMachine
				WHERE
[ArtifactID] = @ArtifactID 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Artifact table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ArtifactID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Artifact] WITH (ROWLOCK) 
				WHERE
					[ArtifactID] = @ArtifactID
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_GetByObjectIDObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Artifact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ArtifactID],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ArtifactObjectID],
					[ObjectMachine],
					[ChildObjectMachine],
					[ArtefactMachine]
				FROM
					[dbo].[Artifact]
				WHERE
					[ObjectID] = @ObjectID
					AND [ObjectMachine] = @ObjectMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_GetByChildObjectIDChildObjectMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Artifact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ArtifactID],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ArtifactObjectID],
					[ObjectMachine],
					[ChildObjectMachine],
					[ArtefactMachine]
				FROM
					[dbo].[Artifact]
				WHERE
					[ChildObjectID] = @ChildObjectID
					AND [ChildObjectMachine] = @ChildObjectMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_GetByArtifactObjectIDArtefactMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Artifact table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ArtifactObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ArtefactMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ArtifactID],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ArtifactObjectID],
					[ObjectMachine],
					[ChildObjectMachine],
					[ArtefactMachine]
				FROM
					[dbo].[Artifact]
				WHERE
					[ArtifactObjectID] = @ArtifactObjectID
					AND [ArtefactMachine] = @ArtefactMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_GetByArtifactID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Artifact table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ArtifactID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ArtifactID],
					[CAid],
					[ObjectID],
					[ChildObjectID],
					[ArtifactObjectID],
					[ObjectMachine],
					[ChildObjectMachine],
					[ArtefactMachine]
				FROM
					[dbo].[Artifact]
				WHERE
					[ArtifactID] = @ArtifactID
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Artifact_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Artifact table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ArtifactID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CAid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ChildObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ArtifactObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ChildObjectMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ArtefactMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ArtifactID]
	, [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [ArtifactObjectID]
	, [ObjectMachine]
	, [ChildObjectMachine]
	, [ArtefactMachine]
    FROM
	[dbo].[Artifact]
    WHERE 
	 ([ArtifactID] = @ArtifactID OR @ArtifactID IS NULL)
	AND ([CAid] = @CAid OR @CAid IS NULL)
	AND ([ObjectID] = @ObjectID OR @ObjectID IS NULL)
	AND ([ChildObjectID] = @ChildObjectID OR @ChildObjectID IS NULL)
	AND ([ArtifactObjectID] = @ArtifactObjectID OR @ArtifactObjectID IS NULL)
	AND ([ObjectMachine] = @ObjectMachine OR @ObjectMachine IS NULL)
	AND ([ChildObjectMachine] = @ChildObjectMachine OR @ChildObjectMachine IS NULL)
	AND ([ArtefactMachine] = @ArtefactMachine OR @ArtefactMachine IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ArtifactID]
	, [CAid]
	, [ObjectID]
	, [ChildObjectID]
	, [ArtifactObjectID]
	, [ObjectMachine]
	, [ChildObjectMachine]
	, [ArtefactMachine]
    FROM
	[dbo].[Artifact]
    WHERE 
	 ([ArtifactID] = @ArtifactID AND @ArtifactID is not null)
	OR ([CAid] = @CAid AND @CAid is not null)
	OR ([ObjectID] = @ObjectID AND @ObjectID is not null)
	OR ([ChildObjectID] = @ChildObjectID AND @ChildObjectID is not null)
	OR ([ArtifactObjectID] = @ArtifactObjectID AND @ArtifactObjectID is not null)
	OR ([ObjectMachine] = @ObjectMachine AND @ObjectMachine is not null)
	OR ([ChildObjectMachine] = @ChildObjectMachine AND @ChildObjectMachine is not null)
	OR ([ArtefactMachine] = @ArtefactMachine AND @ArtefactMachine is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Artifact_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Artifact table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ArtifactID]
					, [CAid]
					, [ObjectID]
					, [ChildObjectID]
					, [ArtifactObjectID]
					, [ObjectMachine]
					, [ChildObjectMachine]
					, [ArtefactMachine]
					FROM [dbo].[Artifact] {0}
				)
				SELECT
				       [ArtifactID],
				       [CAid],
				       [ObjectID],
				       [ChildObjectID],
				       [ArtifactObjectID],
				       [ObjectMachine],
				       [ChildObjectMachine],
				       [ArtefactMachine]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Artifact] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Permission_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Permission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Description],
					[PermissionType]
				FROM
					[dbo].[Permission]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Permission_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Permission table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [PermissionType]'
				SET @SQL = @SQL + ' FROM [dbo].[Permission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [PermissionType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Permission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Permission_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Permission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PermissionType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Permission]
					(
					[Description]
					,[PermissionType]
					)
				VALUES
					(
					@Description
					,@PermissionType
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Permission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@PermissionType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Permission]
				SET
					[Description] = @Description
					,[PermissionType] = @PermissionType
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Permission table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Permission] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Permission table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Description],
					[PermissionType]
				FROM
					[dbo].[Permission]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_GetByUserIDFromUserPermission" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Permission].[pkid]
       ,dbo.[Permission].[Description]
       ,dbo.[Permission].[PermissionType]
  FROM dbo.[Permission]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[UserPermission] 
                WHERE dbo.[UserPermission].[UserID] = @UserID
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_GetByWorkspaceNameWorkspaceTypeIdFromUserPermission" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WorkspaceName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@WorkspaceTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Permission].[pkid]
       ,dbo.[Permission].[Description]
       ,dbo.[Permission].[PermissionType]
  FROM dbo.[Permission]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[UserPermission] 
                WHERE dbo.[UserPermission].[WorkspaceName] = @WorkspaceName
                  AND dbo.[UserPermission].[WorkspaceTypeId] = @WorkspaceTypeId
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Permission_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Permission table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@PermissionType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Description]
	, [PermissionType]
    FROM
	[dbo].[Permission]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([PermissionType] = @PermissionType OR @PermissionType IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Description]
	, [PermissionType]
    FROM
	[dbo].[Permission]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([PermissionType] = @PermissionType AND @PermissionType is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Permission_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Permission table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Description]
					, [PermissionType]
					FROM [dbo].[Permission] {0}
				)
				SELECT
				       [pkid],
				       [Description],
				       [PermissionType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Permission] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFileObject_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GraphFileObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[GraphFileID],
					[MetaObjectID],
					[MachineID],
					[GraphFileMachine]
				FROM
					[dbo].[GraphFileObject]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_GraphFileObject_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFileObject table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[GraphFileID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [GraphFileID]'
				SET @SQL = @SQL + ', [MetaObjectID]'
				SET @SQL = @SQL + ', [MachineID]'
				SET @SQL = @SQL + ', [GraphFileMachine]'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFileObject]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [GraphFileID],'
				SET @SQL = @SQL + ' [MetaObjectID],'
				SET @SQL = @SQL + ' [MachineID],'
				SET @SQL = @SQL + ' [GraphFileMachine]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GraphFileObject]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_GraphFileObject_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GraphFileObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[GraphFileObject]
					(
					[GraphFileID]
					,[MetaObjectID]
					,[MachineID]
					,[GraphFileMachine]
					)
				VALUES
					(
					@GraphFileID
					,@MetaObjectID
					,@MachineID
					,@GraphFileMachine
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GraphFileObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalGraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalMetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalMachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalGraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GraphFileObject]
				SET
					[GraphFileID] = @GraphFileID
					,[MetaObjectID] = @MetaObjectID
					,[MachineID] = @MachineID
					,[GraphFileMachine] = @GraphFileMachine
				WHERE
[GraphFileID] = @OriginalGraphFileID 
AND [MetaObjectID] = @OriginalMetaObjectID 
AND [MachineID] = @OriginalMachineID 
AND [GraphFileMachine] = @OriginalGraphFileMachine 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GraphFileObject table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[GraphFileObject] WITH (ROWLOCK) 
				WHERE
					[GraphFileID] = @GraphFileID
					AND [MetaObjectID] = @MetaObjectID
					AND [MachineID] = @MachineID
					AND [GraphFileMachine] = @GraphFileMachine
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_GetByGraphFileIDGraphFileMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[GraphFileID],
					[MetaObjectID],
					[MachineID],
					[GraphFileMachine]
				FROM
					[dbo].[GraphFileObject]
				WHERE
					[GraphFileID] = @GraphFileID
					AND [GraphFileMachine] = @GraphFileMachine
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_GetByMetaObjectIDMachineID" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileObject table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[GraphFileID],
					[MetaObjectID],
					[MachineID],
					[GraphFileMachine]
				FROM
					[dbo].[GraphFileObject]
				WHERE
					[MetaObjectID] = @MetaObjectID
					AND [MachineID] = @MachineID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_GetByGraphFileIDMetaObjectIDMachineIDGraphFileMachine" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GraphFileObject table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[GraphFileID],
					[MetaObjectID],
					[MachineID],
					[GraphFileMachine]
				FROM
					[dbo].[GraphFileObject]
				WHERE
					[GraphFileID] = @GraphFileID
					AND [MetaObjectID] = @MetaObjectID
					AND [MachineID] = @MachineID
					AND [GraphFileMachine] = @GraphFileMachine
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_GraphFileObject_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GraphFileObject table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@GraphFileID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MetaObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@GraphFileMachine" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GraphFileID]
	, [MetaObjectID]
	, [MachineID]
	, [GraphFileMachine]
    FROM
	[dbo].[GraphFileObject]
    WHERE 
	 ([GraphFileID] = @GraphFileID OR @GraphFileID IS NULL)
	AND ([MetaObjectID] = @MetaObjectID OR @MetaObjectID IS NULL)
	AND ([MachineID] = @MachineID OR @MachineID IS NULL)
	AND ([GraphFileMachine] = @GraphFileMachine OR @GraphFileMachine IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GraphFileID]
	, [MetaObjectID]
	, [MachineID]
	, [GraphFileMachine]
    FROM
	[dbo].[GraphFileObject]
    WHERE 
	 ([GraphFileID] = @GraphFileID AND @GraphFileID is not null)
	OR ([MetaObjectID] = @MetaObjectID AND @MetaObjectID is not null)
	OR ([MachineID] = @MachineID AND @MachineID is not null)
	OR ([GraphFileMachine] = @GraphFileMachine AND @GraphFileMachine is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_GraphFileObject_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GraphFileObject table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [GraphFileID]
					, [MetaObjectID]
					, [MachineID]
					, [GraphFileMachine]
					FROM [dbo].[GraphFileObject] {0}
				)
				SELECT
				       [GraphFileID],
				       [MetaObjectID],
				       [MachineID],
				       [GraphFileMachine]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GraphFileObject] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Field_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Field table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[pkid],
					[Class],
					[Name],
					[DataType],
					[Category],
					[Description],
					[IsUnique],
					[SortOrder],
					[IsActive]
				FROM
					[dbo].[Field]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_Field_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Field table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[pkid]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Class]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DataType]'
				SET @SQL = @SQL + ', [Category]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [IsUnique]'
				SET @SQL = @SQL + ', [SortOrder]'
				SET @SQL = @SQL + ', [IsActive]'
				SET @SQL = @SQL + ' FROM [dbo].[Field]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Class],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DataType],'
				SET @SQL = @SQL + ' [Category],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [IsUnique],'
				SET @SQL = @SQL + ' [SortOrder],'
				SET @SQL = @SQL + ' [IsActive]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Field]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_Field_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Field table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DataType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault=""/>
				<parameter name="@IsUnique" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SortOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Field]
					(
					[Class]
					,[Name]
					,[DataType]
					,[Category]
					,[Description]
					,[IsUnique]
					,[SortOrder]
					,[IsActive]
					)
				VALUES
					(
					@Class
					,@Name
					,@DataType
					,@Category
					,@Description
					,@IsUnique
					,@SortOrder
					,@IsActive
					)
				
				-- Get the identity value
				SET @pkid = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Field_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Field table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DataType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault=""/>
				<parameter name="@IsUnique" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@SortOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Field]
				SET
					[Class] = @Class
					,[Name] = @Name
					,[DataType] = @DataType
					,[Category] = @Category
					,[Description] = @Description
					,[IsUnique] = @IsUnique
					,[SortOrder] = @SortOrder
					,[IsActive] = @IsActive
				WHERE
[pkid] = @pkid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Field_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Field table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Field] WITH (ROWLOCK) 
				WHERE
					[pkid] = @pkid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Field_GetByClass" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Field table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[pkid],
					[Class],
					[Name],
					[DataType],
					[Category],
					[Description],
					[IsUnique],
					[SortOrder],
					[IsActive]
				FROM
					[dbo].[Field]
				WHERE
					[Class] = @Class
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Field_GetBypkid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Field table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[pkid],
					[Class],
					[Name],
					[DataType],
					[Category],
					[Description],
					[IsUnique],
					[SortOrder],
					[IsActive]
				FROM
					[dbo].[Field]
				WHERE
					[pkid] = @pkid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="PROC_Field_GetByObjectIDMachineIDFromObjectFieldValue" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ObjectID" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@MachineID" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Field].[pkid]
       ,dbo.[Field].[Class]
       ,dbo.[Field].[Name]
       ,dbo.[Field].[DataType]
       ,dbo.[Field].[Category]
       ,dbo.[Field].[Description]
       ,dbo.[Field].[IsUnique]
       ,dbo.[Field].[SortOrder]
       ,dbo.[Field].[IsActive]
  FROM dbo.[Field]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ObjectFieldValue] 
                WHERE dbo.[ObjectFieldValue].[ObjectID] = @ObjectID
                  AND dbo.[ObjectFieldValue].[MachineID] = @MachineID
                  AND dbo.[ObjectFieldValue].[FieldID] = dbo.[Field].[pkid]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="PROC_Field_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Field table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@pkid" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Class" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Name" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DataType" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Category" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Description" type="varchar" direction="Input" size="120" precision="0" scale="0" param="(120)" nulldefault="null"/>
				<parameter name="@IsUnique" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SortOrder" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsActive" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [pkid]
	, [Class]
	, [Name]
	, [DataType]
	, [Category]
	, [Description]
	, [IsUnique]
	, [SortOrder]
	, [IsActive]
    FROM
	[dbo].[Field]
    WHERE 
	 ([pkid] = @pkid OR @pkid IS NULL)
	AND ([Class] = @Class OR @Class IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DataType] = @DataType OR @DataType IS NULL)
	AND ([Category] = @Category OR @Category IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([IsUnique] = @IsUnique OR @IsUnique IS NULL)
	AND ([SortOrder] = @SortOrder OR @SortOrder IS NULL)
	AND ([IsActive] = @IsActive OR @IsActive IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [pkid]
	, [Class]
	, [Name]
	, [DataType]
	, [Category]
	, [Description]
	, [IsUnique]
	, [SortOrder]
	, [IsActive]
    FROM
	[dbo].[Field]
    WHERE 
	 ([pkid] = @pkid AND @pkid is not null)
	OR ([Class] = @Class AND @Class is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DataType] = @DataType AND @DataType is not null)
	OR ([Category] = @Category AND @Category is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([IsUnique] = @IsUnique AND @IsUnique is not null)
	OR ([SortOrder] = @SortOrder AND @SortOrder is not null)
	OR ([IsActive] = @IsActive AND @IsActive is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="PROC_Field_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Field table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [pkid]
					, [Class]
					, [Name]
					, [DataType]
					, [Category]
					, [Description]
					, [IsUnique]
					, [SortOrder]
					, [IsActive]
					FROM [dbo].[Field] {0}
				)
				SELECT
				       [pkid],
				       [Class],
				       [Name],
				       [DataType],
				       [Category],
				       [Description],
				       [IsUnique],
				       [SortOrder],
				       [IsActive]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Field] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Activity_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ExecutionIndicator],
					[ContextualIndicator],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Activity_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Activity_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExecutionIndicator]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Activity_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExecutionIndicator],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Activity_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Activity_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ExecutionIndicator]
					, [ContextualIndicator]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Activity_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ExecutionIndicator],
				       [ContextualIndicator],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Activity_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Activity_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ExecutionIndicator],
					[ContextualIndicator],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Activity_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Activity_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExecutionIndicator]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Activity_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExecutionIndicator],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Activity_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Activity_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Activity_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ExecutionIndicator]
					, [ContextualIndicator]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Activity_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ExecutionIndicator],
				       [ContextualIndicator],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Activity_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Attribute_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[DomainType],
					[DomainDef],
					[Length],
					[GapType]
				FROM
					[dbo].[METAView_Attribute_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Attribute_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [DomainType]'
				SET @SQL = @SQL + ', [DomainDef]'
				SET @SQL = @SQL + ', [Length]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Attribute_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [DomainType],'
				SET @SQL = @SQL + ' [DomainDef],'
				SET @SQL = @SQL + ' [Length],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Attribute_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Attribute_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [DomainType]
					, [DomainDef]
					, [Length]
					, [GapType]
					FROM [dbo].[METAView_Attribute_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [DomainType],
				       [DomainDef],
				       [Length],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Attribute_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Attribute_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[DomainType],
					[DomainDef],
					[Length],
					[GapType]
				FROM
					[dbo].[METAView_Attribute_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Attribute_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [DomainType]'
				SET @SQL = @SQL + ', [DomainDef]'
				SET @SQL = @SQL + ', [Length]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Attribute_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [DomainType],'
				SET @SQL = @SQL + ' [DomainDef],'
				SET @SQL = @SQL + ' [Length],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Attribute_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Attribute_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Attribute_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [DomainType]
					, [DomainDef]
					, [Length]
					, [GapType]
					FROM [dbo].[METAView_Attribute_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [DomainType],
				       [DomainDef],
				       [Length],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Attribute_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CAD_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_CAD_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CAD_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CAD_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CAD_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CAD_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_CAD_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CAD_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CAD_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_CAD_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CAD_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CAD_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CAD_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CAD_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CAD_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_CAD_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CAD_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CADReal_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_CADReal_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CADReal_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CADReal_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CADReal_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CADReal_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_CADReal_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CADReal_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CADReal_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_CADReal_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CADReal_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CADReal_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CADReal_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CADReal_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CADReal_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_CADReal_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CADReal_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CategoryFactor_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_CategoryFactor_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CategoryFactor_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CategoryFactor_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CategoryFactor_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CategoryFactor_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_CategoryFactor_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CategoryFactor_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CategoryFactor_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_CategoryFactor_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CategoryFactor_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CategoryFactor_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CategoryFactor_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CategoryFactor_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CategoryFactor_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_CategoryFactor_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CategoryFactor_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Competency_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[Level],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Competency_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Competency_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Level]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Competency_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Level],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Competency_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Competency_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [Level]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Competency_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [Level],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Competency_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Competency_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[Level],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Competency_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Competency_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Level]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Competency_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Level],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Competency_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Competency_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Competency_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [Level]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Competency_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [Level],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Competency_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Condition_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Condition_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Condition_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Condition_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Condition_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Condition_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Condition_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Condition_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Condition_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Condition_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Condition_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Condition_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Condition_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Condition_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Condition_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Condition_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Condition_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Conditional_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ConditionalType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Conditional_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Conditional_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ConditionalType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Conditional_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ConditionalType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Conditional_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Conditional_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ConditionalType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Conditional_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ConditionalType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Conditional_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Conditional_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ConditionalType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Conditional_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Conditional_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ConditionalType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Conditional_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ConditionalType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Conditional_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Conditional_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Conditional_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ConditionalType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Conditional_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ConditionalType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Conditional_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConditionalDescription_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[Sequence],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConditionalDescription_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConditionalDescription_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [Sequence]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConditionalDescription_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [Sequence],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConditionalDescription_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConditionalDescription_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [Sequence]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConditionalDescription_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [Sequence],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConditionalDescription_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConditionalDescription_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[Sequence],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConditionalDescription_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConditionalDescription_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [Sequence]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConditionalDescription_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [Sequence],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConditionalDescription_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConditionalDescription_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConditionalDescription_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [Sequence]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConditionalDescription_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [Sequence],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConditionalDescription_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConnectionSpeed_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConnectionSpeed_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionSpeed_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionSpeed_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionSpeed_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionSpeed_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConnectionSpeed_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConnectionSpeed_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConnectionSpeed_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConnectionSpeed_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionSpeed_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionSpeed_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionSpeed_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionSpeed_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionSpeed_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConnectionSpeed_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConnectionSpeed_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConnectionType_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConnectionType_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionType_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionType_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionType_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionType_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConnectionType_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConnectionType_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ConnectionType_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ConnectionType_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionType_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionType_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ConnectionType_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ConnectionType_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ConnectionType_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ConnectionType_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ConnectionType_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CSF_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Number],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_CSF_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CSF_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Number]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CSF_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Number],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CSF_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CSF_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Number]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_CSF_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Number],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CSF_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_CSF_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Number],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_CSF_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CSF_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Number]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CSF_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Number],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_CSF_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_CSF_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_CSF_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Number]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_CSF_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Number],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_CSF_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataColumn_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DomainDef],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ColumnType],
					[ColumnLength],
					[GapType]
				FROM
					[dbo].[METAView_DataColumn_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataColumn_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DomainDef]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ColumnType]'
				SET @SQL = @SQL + ', [ColumnLength]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataColumn_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DomainDef],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ColumnType],'
				SET @SQL = @SQL + ' [ColumnLength],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataColumn_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataColumn_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DomainDef]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ColumnType]
					, [ColumnLength]
					, [GapType]
					FROM [dbo].[METAView_DataColumn_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DomainDef],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ColumnType],
				       [ColumnLength],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataColumn_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataColumn_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DomainDef],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ColumnType],
					[ColumnLength],
					[GapType]
				FROM
					[dbo].[METAView_DataColumn_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataColumn_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DomainDef]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ColumnType]'
				SET @SQL = @SQL + ', [ColumnLength]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataColumn_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DomainDef],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ColumnType],'
				SET @SQL = @SQL + ' [ColumnLength],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataColumn_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataColumn_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataColumn_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DomainDef]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ColumnType]
					, [ColumnLength]
					, [GapType]
					FROM [dbo].[METAView_DataColumn_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DomainDef],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ColumnType],
				       [ColumnLength],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataColumn_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataSchema_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DataSchemaType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ArchPriority],
					[DatabaseType],
					[GapType]
				FROM
					[dbo].[METAView_DataSchema_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataSchema_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DataSchemaType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ArchPriority]'
				SET @SQL = @SQL + ', [DatabaseType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataSchema_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DataSchemaType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ArchPriority],'
				SET @SQL = @SQL + ' [DatabaseType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataSchema_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataSchema_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DataSchemaType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ArchPriority]
					, [DatabaseType]
					, [GapType]
					FROM [dbo].[METAView_DataSchema_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DataSchemaType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ArchPriority],
				       [DatabaseType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataSchema_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataSchema_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DataSchemaType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ArchPriority],
					[DatabaseType],
					[GapType]
				FROM
					[dbo].[METAView_DataSchema_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataSchema_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DataSchemaType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ArchPriority]'
				SET @SQL = @SQL + ', [DatabaseType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataSchema_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DataSchemaType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ArchPriority],'
				SET @SQL = @SQL + ' [DatabaseType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataSchema_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataSchema_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataSchema_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DataSchemaType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ArchPriority]
					, [DatabaseType]
					, [GapType]
					FROM [dbo].[METAView_DataSchema_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DataSchemaType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ArchPriority],
				       [DatabaseType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataSchema_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataTable_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[InitialPopulation],
					[GrowthRateOverTime],
					[RecordSize],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_DataTable_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataTable_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [InitialPopulation]'
				SET @SQL = @SQL + ', [GrowthRateOverTime]'
				SET @SQL = @SQL + ', [RecordSize]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataTable_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [InitialPopulation],'
				SET @SQL = @SQL + ' [GrowthRateOverTime],'
				SET @SQL = @SQL + ' [RecordSize],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataTable_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataTable_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [InitialPopulation]
					, [GrowthRateOverTime]
					, [RecordSize]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_DataTable_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [InitialPopulation],
				       [GrowthRateOverTime],
				       [RecordSize],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataTable_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataTable_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[InitialPopulation],
					[GrowthRateOverTime],
					[RecordSize],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_DataTable_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataTable_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [InitialPopulation]'
				SET @SQL = @SQL + ', [GrowthRateOverTime]'
				SET @SQL = @SQL + ', [RecordSize]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataTable_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [InitialPopulation],'
				SET @SQL = @SQL + ' [GrowthRateOverTime],'
				SET @SQL = @SQL + ' [RecordSize],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataTable_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataTable_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataTable_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [InitialPopulation]
					, [GrowthRateOverTime]
					, [RecordSize]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_DataTable_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [InitialPopulation],
				       [GrowthRateOverTime],
				       [RecordSize],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataTable_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataView_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DataViewType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_DataView_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataView_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DataViewType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataView_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DataViewType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataView_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataView_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DataViewType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_DataView_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DataViewType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataView_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DataView_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[DataViewType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_DataView_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataView_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DataViewType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataView_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DataViewType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DataView_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DataView_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DataView_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [DataViewType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_DataView_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [DataViewType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DataView_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DatedResponsibility_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_DatedResponsibility_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DatedResponsibility_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DatedResponsibility_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DatedResponsibility_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DatedResponsibility_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_DatedResponsibility_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DatedResponsibility_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_DatedResponsibility_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_DatedResponsibility_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DatedResponsibility_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DatedResponsibility_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_DatedResponsibility_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_DatedResponsibility_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_DatedResponsibility_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_DatedResponsibility_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_DatedResponsibility_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Employee_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Surname],
					[Title],
					[EmployeeNumber],
					[IDNumber],
					[Email],
					[Telephone],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Mobile],
					[Fax],
					[GapType]
				FROM
					[dbo].[METAView_Employee_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Employee_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Surname]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [EmployeeNumber]'
				SET @SQL = @SQL + ', [IDNumber]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Mobile]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Employee_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Surname],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [EmployeeNumber],'
				SET @SQL = @SQL + ' [IDNumber],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Mobile],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Employee_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Employee_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Surname]
					, [Title]
					, [EmployeeNumber]
					, [IDNumber]
					, [Email]
					, [Telephone]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Mobile]
					, [Fax]
					, [GapType]
					FROM [dbo].[METAView_Employee_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Surname],
				       [Title],
				       [EmployeeNumber],
				       [IDNumber],
				       [Email],
				       [Telephone],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Mobile],
				       [Fax],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Employee_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Employee_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Surname],
					[Title],
					[EmployeeNumber],
					[IDNumber],
					[Email],
					[Telephone],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Mobile],
					[Fax],
					[GapType]
				FROM
					[dbo].[METAView_Employee_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Employee_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Surname]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [EmployeeNumber]'
				SET @SQL = @SQL + ', [IDNumber]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Mobile]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Employee_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Surname],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [EmployeeNumber],'
				SET @SQL = @SQL + ' [IDNumber],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Mobile],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Employee_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Employee_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Employee_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Surname]
					, [Title]
					, [EmployeeNumber]
					, [IDNumber]
					, [Email]
					, [Telephone]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Mobile]
					, [Fax]
					, [GapType]
					FROM [dbo].[METAView_Employee_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Surname],
				       [Title],
				       [EmployeeNumber],
				       [IDNumber],
				       [Email],
				       [Telephone],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Mobile],
				       [Fax],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Employee_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Entity_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[EntityType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Entity_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Entity_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [EntityType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Entity_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [EntityType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Entity_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Entity_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [EntityType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Entity_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [EntityType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Entity_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Entity_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[EntityType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Entity_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Entity_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [EntityType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Entity_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [EntityType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Entity_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Entity_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Entity_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [EntityType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Entity_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [EntityType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Entity_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Environment_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Environment_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Environment_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Environment_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Environment_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Environment_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Environment_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Environment_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Environment_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Environment_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Environment_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Environment_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Environment_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Environment_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Environment_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Environment_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Environment_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_EnvironmentCategory_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_EnvironmentCategory_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_EnvironmentCategory_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_EnvironmentCategory_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_EnvironmentCategory_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_EnvironmentCategory_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_EnvironmentCategory_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_EnvironmentCategory_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_EnvironmentCategory_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_EnvironmentCategory_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_EnvironmentCategory_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_EnvironmentCategory_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_EnvironmentCategory_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_EnvironmentCategory_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_EnvironmentCategory_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_EnvironmentCategory_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_EnvironmentCategory_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Exception_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Exception_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Exception_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Exception_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Exception_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Exception_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Exception_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Exception_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Exception_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Exception_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Exception_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Exception_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Exception_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Exception_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Exception_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Exception_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Exception_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_FlowDescription_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Sequence],
					[Condition],
					[Description],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[TimeIndicator],
					[GapType]
				FROM
					[dbo].[METAView_FlowDescription_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FlowDescription_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Sequence]'
				SET @SQL = @SQL + ', [Condition]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FlowDescription_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Sequence],'
				SET @SQL = @SQL + ' [Condition],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FlowDescription_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FlowDescription_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Sequence]
					, [Condition]
					, [Description]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [TimeIndicator]
					, [GapType]
					FROM [dbo].[METAView_FlowDescription_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Sequence],
				       [Condition],
				       [Description],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [TimeIndicator],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_FlowDescription_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_FlowDescription_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Sequence],
					[Condition],
					[Description],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[TimeIndicator],
					[GapType]
				FROM
					[dbo].[METAView_FlowDescription_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FlowDescription_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Sequence]'
				SET @SQL = @SQL + ', [Condition]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FlowDescription_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Sequence],'
				SET @SQL = @SQL + ' [Condition],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FlowDescription_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_FlowDescription_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FlowDescription_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Sequence]
					, [Condition]
					, [Description]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [TimeIndicator]
					, [GapType]
					FROM [dbo].[METAView_FlowDescription_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Sequence],
				       [Condition],
				       [Description],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [TimeIndicator],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_FlowDescription_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Function_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Function_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ContextualIndicator],
					[FunctionCriticality],
					[ManagementAbility],
					[InfoAvailability],
					[LegalAspects],
					[Technology],
					[Budget],
					[Energy],
					[RawMaterial],
					[SkillAvailability],
					[Efficiency],
					[Effectiveness],
					[Manpower],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[EnvironmentInd],
					[GovernanceMech],
					[CapitalAvailability],
					[Competencies],
					[Ethics],
					[Facilities],
					[ServicesUsage],
					[Equipment],
					[TimeIndicator],
					[Effeciency],
					[Effectiviness],
					[GapType]
				FROM
					[dbo].[METAView_Function_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Function_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Function_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [FunctionCriticality]'
				SET @SQL = @SQL + ', [ManagementAbility]'
				SET @SQL = @SQL + ', [InfoAvailability]'
				SET @SQL = @SQL + ', [LegalAspects]'
				SET @SQL = @SQL + ', [Technology]'
				SET @SQL = @SQL + ', [Budget]'
				SET @SQL = @SQL + ', [Energy]'
				SET @SQL = @SQL + ', [RawMaterial]'
				SET @SQL = @SQL + ', [SkillAvailability]'
				SET @SQL = @SQL + ', [Efficiency]'
				SET @SQL = @SQL + ', [Effectiveness]'
				SET @SQL = @SQL + ', [Manpower]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [EnvironmentInd]'
				SET @SQL = @SQL + ', [GovernanceMech]'
				SET @SQL = @SQL + ', [CapitalAvailability]'
				SET @SQL = @SQL + ', [Competencies]'
				SET @SQL = @SQL + ', [Ethics]'
				SET @SQL = @SQL + ', [Facilities]'
				SET @SQL = @SQL + ', [ServicesUsage]'
				SET @SQL = @SQL + ', [Equipment]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [Effeciency]'
				SET @SQL = @SQL + ', [Effectiviness]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Function_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [FunctionCriticality],'
				SET @SQL = @SQL + ' [ManagementAbility],'
				SET @SQL = @SQL + ' [InfoAvailability],'
				SET @SQL = @SQL + ' [LegalAspects],'
				SET @SQL = @SQL + ' [Technology],'
				SET @SQL = @SQL + ' [Budget],'
				SET @SQL = @SQL + ' [Energy],'
				SET @SQL = @SQL + ' [RawMaterial],'
				SET @SQL = @SQL + ' [SkillAvailability],'
				SET @SQL = @SQL + ' [Efficiency],'
				SET @SQL = @SQL + ' [Effectiveness],'
				SET @SQL = @SQL + ' [Manpower],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [EnvironmentInd],'
				SET @SQL = @SQL + ' [GovernanceMech],'
				SET @SQL = @SQL + ' [CapitalAvailability],'
				SET @SQL = @SQL + ' [Competencies],'
				SET @SQL = @SQL + ' [Ethics],'
				SET @SQL = @SQL + ' [Facilities],'
				SET @SQL = @SQL + ' [ServicesUsage],'
				SET @SQL = @SQL + ' [Equipment],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [Effeciency],'
				SET @SQL = @SQL + ' [Effectiviness],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Function_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Function_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Function_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ContextualIndicator]
					, [FunctionCriticality]
					, [ManagementAbility]
					, [InfoAvailability]
					, [LegalAspects]
					, [Technology]
					, [Budget]
					, [Energy]
					, [RawMaterial]
					, [SkillAvailability]
					, [Efficiency]
					, [Effectiveness]
					, [Manpower]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [EnvironmentInd]
					, [GovernanceMech]
					, [CapitalAvailability]
					, [Competencies]
					, [Ethics]
					, [Facilities]
					, [ServicesUsage]
					, [Equipment]
					, [TimeIndicator]
					, [Effeciency]
					, [Effectiviness]
					, [GapType]
					FROM [dbo].[METAView_Function_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ContextualIndicator],
				       [FunctionCriticality],
				       [ManagementAbility],
				       [InfoAvailability],
				       [LegalAspects],
				       [Technology],
				       [Budget],
				       [Energy],
				       [RawMaterial],
				       [SkillAvailability],
				       [Efficiency],
				       [Effectiveness],
				       [Manpower],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [EnvironmentInd],
				       [GovernanceMech],
				       [CapitalAvailability],
				       [Competencies],
				       [Ethics],
				       [Facilities],
				       [ServicesUsage],
				       [Equipment],
				       [TimeIndicator],
				       [Effeciency],
				       [Effectiviness],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Function_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Function_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Function_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ContextualIndicator],
					[FunctionCriticality],
					[ManagementAbility],
					[InfoAvailability],
					[LegalAspects],
					[Technology],
					[Budget],
					[Energy],
					[RawMaterial],
					[SkillAvailability],
					[Efficiency],
					[Effectiveness],
					[Manpower],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[EnvironmentInd],
					[GovernanceMech],
					[CapitalAvailability],
					[Competencies],
					[Ethics],
					[Facilities],
					[ServicesUsage],
					[Equipment],
					[TimeIndicator],
					[Effeciency],
					[Effectiviness],
					[GapType]
				FROM
					[dbo].[METAView_Function_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Function_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Function_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [FunctionCriticality]'
				SET @SQL = @SQL + ', [ManagementAbility]'
				SET @SQL = @SQL + ', [InfoAvailability]'
				SET @SQL = @SQL + ', [LegalAspects]'
				SET @SQL = @SQL + ', [Technology]'
				SET @SQL = @SQL + ', [Budget]'
				SET @SQL = @SQL + ', [Energy]'
				SET @SQL = @SQL + ', [RawMaterial]'
				SET @SQL = @SQL + ', [SkillAvailability]'
				SET @SQL = @SQL + ', [Efficiency]'
				SET @SQL = @SQL + ', [Effectiveness]'
				SET @SQL = @SQL + ', [Manpower]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [EnvironmentInd]'
				SET @SQL = @SQL + ', [GovernanceMech]'
				SET @SQL = @SQL + ', [CapitalAvailability]'
				SET @SQL = @SQL + ', [Competencies]'
				SET @SQL = @SQL + ', [Ethics]'
				SET @SQL = @SQL + ', [Facilities]'
				SET @SQL = @SQL + ', [ServicesUsage]'
				SET @SQL = @SQL + ', [Equipment]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [Effeciency]'
				SET @SQL = @SQL + ', [Effectiviness]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Function_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [FunctionCriticality],'
				SET @SQL = @SQL + ' [ManagementAbility],'
				SET @SQL = @SQL + ' [InfoAvailability],'
				SET @SQL = @SQL + ' [LegalAspects],'
				SET @SQL = @SQL + ' [Technology],'
				SET @SQL = @SQL + ' [Budget],'
				SET @SQL = @SQL + ' [Energy],'
				SET @SQL = @SQL + ' [RawMaterial],'
				SET @SQL = @SQL + ' [SkillAvailability],'
				SET @SQL = @SQL + ' [Efficiency],'
				SET @SQL = @SQL + ' [Effectiveness],'
				SET @SQL = @SQL + ' [Manpower],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [EnvironmentInd],'
				SET @SQL = @SQL + ' [GovernanceMech],'
				SET @SQL = @SQL + ' [CapitalAvailability],'
				SET @SQL = @SQL + ' [Competencies],'
				SET @SQL = @SQL + ' [Ethics],'
				SET @SQL = @SQL + ' [Facilities],'
				SET @SQL = @SQL + ' [ServicesUsage],'
				SET @SQL = @SQL + ' [Equipment],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [Effeciency],'
				SET @SQL = @SQL + ' [Effectiviness],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Function_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Function_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Function_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ContextualIndicator]
					, [FunctionCriticality]
					, [ManagementAbility]
					, [InfoAvailability]
					, [LegalAspects]
					, [Technology]
					, [Budget]
					, [Energy]
					, [RawMaterial]
					, [SkillAvailability]
					, [Efficiency]
					, [Effectiveness]
					, [Manpower]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [EnvironmentInd]
					, [GovernanceMech]
					, [CapitalAvailability]
					, [Competencies]
					, [Ethics]
					, [Facilities]
					, [ServicesUsage]
					, [Equipment]
					, [TimeIndicator]
					, [Effeciency]
					, [Effectiviness]
					, [GapType]
					FROM [dbo].[METAView_Function_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ContextualIndicator],
				       [FunctionCriticality],
				       [ManagementAbility],
				       [InfoAvailability],
				       [LegalAspects],
				       [Technology],
				       [Budget],
				       [Energy],
				       [RawMaterial],
				       [SkillAvailability],
				       [Efficiency],
				       [Effectiveness],
				       [Manpower],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [EnvironmentInd],
				       [GovernanceMech],
				       [CapitalAvailability],
				       [Competencies],
				       [Ethics],
				       [Facilities],
				       [ServicesUsage],
				       [Equipment],
				       [TimeIndicator],
				       [Effeciency],
				       [Effectiviness],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Function_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_FunctionalDependency_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[InferenceRule],
					[Condition],
					[Description],
					[CohesionWeight],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_FunctionalDependency_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FunctionalDependency_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [InferenceRule]'
				SET @SQL = @SQL + ', [Condition]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CohesionWeight]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FunctionalDependency_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [InferenceRule],'
				SET @SQL = @SQL + ' [Condition],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CohesionWeight],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FunctionalDependency_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FunctionalDependency_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [InferenceRule]
					, [Condition]
					, [Description]
					, [CohesionWeight]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_FunctionalDependency_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [InferenceRule],
				       [Condition],
				       [Description],
				       [CohesionWeight],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_FunctionalDependency_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_FunctionalDependency_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[InferenceRule],
					[Condition],
					[Description],
					[CohesionWeight],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_FunctionalDependency_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FunctionalDependency_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [InferenceRule]'
				SET @SQL = @SQL + ', [Condition]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CohesionWeight]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FunctionalDependency_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [InferenceRule],'
				SET @SQL = @SQL + ' [Condition],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CohesionWeight],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_FunctionalDependency_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_FunctionalDependency_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_FunctionalDependency_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [InferenceRule]
					, [Condition]
					, [Description]
					, [CohesionWeight]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_FunctionalDependency_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [InferenceRule],
				       [Condition],
				       [Description],
				       [CohesionWeight],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_FunctionalDependency_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_GovernanceMechanism_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[EnvironmentInd],
					[GovernanceMechType],
					[UniqueRef],
					[ValidityPeriod],
					[Description],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_GovernanceMechanism_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_GovernanceMechanism_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [EnvironmentInd]'
				SET @SQL = @SQL + ', [GovernanceMechType]'
				SET @SQL = @SQL + ', [UniqueRef]'
				SET @SQL = @SQL + ', [ValidityPeriod]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_GovernanceMechanism_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [EnvironmentInd],'
				SET @SQL = @SQL + ' [GovernanceMechType],'
				SET @SQL = @SQL + ' [UniqueRef],'
				SET @SQL = @SQL + ' [ValidityPeriod],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_GovernanceMechanism_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_GovernanceMechanism_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [EnvironmentInd]
					, [GovernanceMechType]
					, [UniqueRef]
					, [ValidityPeriod]
					, [Description]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_GovernanceMechanism_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [EnvironmentInd],
				       [GovernanceMechType],
				       [UniqueRef],
				       [ValidityPeriod],
				       [Description],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_GovernanceMechanism_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_GovernanceMechanism_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[EnvironmentInd],
					[GovernanceMechType],
					[UniqueRef],
					[ValidityPeriod],
					[Description],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_GovernanceMechanism_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_GovernanceMechanism_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [EnvironmentInd]'
				SET @SQL = @SQL + ', [GovernanceMechType]'
				SET @SQL = @SQL + ', [UniqueRef]'
				SET @SQL = @SQL + ', [ValidityPeriod]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_GovernanceMechanism_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [EnvironmentInd],'
				SET @SQL = @SQL + ' [GovernanceMechType],'
				SET @SQL = @SQL + ' [UniqueRef],'
				SET @SQL = @SQL + ' [ValidityPeriod],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_GovernanceMechanism_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_GovernanceMechanism_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_GovernanceMechanism_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [EnvironmentInd]
					, [GovernanceMechType]
					, [UniqueRef]
					, [ValidityPeriod]
					, [Description]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_GovernanceMechanism_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [EnvironmentInd],
				       [GovernanceMechType],
				       [UniqueRef],
				       [ValidityPeriod],
				       [Description],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_GovernanceMechanism_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Implication_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Ext_Inf_Indicator],
					[Int_Capability_Indicator],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Implication_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Implication_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Ext_Inf_Indicator]'
				SET @SQL = @SQL + ', [Int_Capability_Indicator]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Implication_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Ext_Inf_Indicator],'
				SET @SQL = @SQL + ' [Int_Capability_Indicator],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Implication_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Implication_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Ext_Inf_Indicator]
					, [Int_Capability_Indicator]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Implication_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Ext_Inf_Indicator],
				       [Int_Capability_Indicator],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Implication_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Implication_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Ext_Inf_Indicator],
					[Int_Capability_Indicator],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Implication_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Implication_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Ext_Inf_Indicator]'
				SET @SQL = @SQL + ', [Int_Capability_Indicator]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Implication_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Ext_Inf_Indicator],'
				SET @SQL = @SQL + ' [Int_Capability_Indicator],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Implication_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Implication_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Implication_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Ext_Inf_Indicator]
					, [Int_Capability_Indicator]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Implication_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Ext_Inf_Indicator],
				       [Int_Capability_Indicator],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Implication_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Iteration_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[IterationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Iteration_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Iteration_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [IterationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Iteration_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [IterationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Iteration_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Iteration_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [IterationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Iteration_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [IterationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Iteration_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Iteration_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[IterationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Iteration_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Iteration_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [IterationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Iteration_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [IterationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Iteration_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Iteration_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Iteration_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [IterationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Iteration_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [IterationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Iteration_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Job_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Job_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Job_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Job_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Job_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Job_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Job_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Job_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Job_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Job_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Job_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Job_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Job_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Job_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Job_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Job_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Job_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Job_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Job_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Job_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Job_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Job_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_JobPosition_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[TotalRequired],
					[TotalOccupied],
					[TotalAvailable],
					[TimeStamp],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_JobPosition_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_JobPosition_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [TotalRequired]'
				SET @SQL = @SQL + ', [TotalOccupied]'
				SET @SQL = @SQL + ', [TotalAvailable]'
				SET @SQL = @SQL + ', [TimeStamp]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_JobPosition_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [TotalRequired],'
				SET @SQL = @SQL + ' [TotalOccupied],'
				SET @SQL = @SQL + ' [TotalAvailable],'
				SET @SQL = @SQL + ' [TimeStamp],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_JobPosition_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_JobPosition_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [TotalRequired]
					, [TotalOccupied]
					, [TotalAvailable]
					, [TimeStamp]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_JobPosition_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [TotalRequired],
				       [TotalOccupied],
				       [TotalAvailable],
				       [TimeStamp],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_JobPosition_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_JobPosition_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[TotalRequired],
					[TotalOccupied],
					[TotalAvailable],
					[TimeStamp],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_JobPosition_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_JobPosition_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [TotalRequired]'
				SET @SQL = @SQL + ', [TotalOccupied]'
				SET @SQL = @SQL + ', [TotalAvailable]'
				SET @SQL = @SQL + ', [TimeStamp]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_JobPosition_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [TotalRequired],'
				SET @SQL = @SQL + ' [TotalOccupied],'
				SET @SQL = @SQL + ' [TotalAvailable],'
				SET @SQL = @SQL + ' [TimeStamp],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_JobPosition_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_JobPosition_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_JobPosition_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [TotalRequired]
					, [TotalOccupied]
					, [TotalAvailable]
					, [TimeStamp]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_JobPosition_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [TotalRequired],
				       [TotalOccupied],
				       [TotalAvailable],
				       [TimeStamp],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_JobPosition_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Location_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Location_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[LocationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Address],
					[Telephone],
					[Fax],
					[GapType]
				FROM
					[dbo].[METAView_Location_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Location_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Location_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [LocationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Location_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [LocationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Location_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Location_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Location_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [LocationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Address]
					, [Telephone]
					, [Fax]
					, [GapType]
					FROM [dbo].[METAView_Location_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [LocationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Address],
				       [Telephone],
				       [Fax],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Location_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Location_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Location_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[LocationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Address],
					[Telephone],
					[Fax],
					[GapType]
				FROM
					[dbo].[METAView_Location_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Location_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Location_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [LocationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Location_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [LocationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Location_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Location_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Location_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [LocationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Address]
					, [Telephone]
					, [Fax]
					, [GapType]
					FROM [dbo].[METAView_Location_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [LocationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Address],
				       [Telephone],
				       [Fax],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Location_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_LocationAssociation_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Distance],
					[TimeIndicator],
					[AssociationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_LocationAssociation_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_LocationAssociation_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Distance]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [AssociationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_LocationAssociation_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Distance],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [AssociationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_LocationAssociation_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_LocationAssociation_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Distance]
					, [TimeIndicator]
					, [AssociationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_LocationAssociation_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Distance],
				       [TimeIndicator],
				       [AssociationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_LocationAssociation_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_LocationAssociation_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Distance],
					[TimeIndicator],
					[AssociationType],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_LocationAssociation_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_LocationAssociation_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Distance]'
				SET @SQL = @SQL + ', [TimeIndicator]'
				SET @SQL = @SQL + ', [AssociationType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_LocationAssociation_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Distance],'
				SET @SQL = @SQL + ' [TimeIndicator],'
				SET @SQL = @SQL + ' [AssociationType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_LocationAssociation_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_LocationAssociation_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_LocationAssociation_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Distance]
					, [TimeIndicator]
					, [AssociationType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_LocationAssociation_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Distance],
				       [TimeIndicator],
				       [AssociationType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_LocationAssociation_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Logic_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Description],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Logic_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Logic_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Logic_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Logic_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Logic_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Description]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Logic_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Description],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Logic_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Logic_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Description],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Logic_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Logic_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Logic_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Logic_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Logic_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Logic_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Description]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Logic_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Description],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Logic_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_MeasurementItem_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_MeasurementItem_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MeasurementItem_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MeasurementItem_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MeasurementItem_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MeasurementItem_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_MeasurementItem_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_MeasurementItem_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_MeasurementItem_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_MeasurementItem_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MeasurementItem_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MeasurementItem_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MeasurementItem_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_MeasurementItem_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MeasurementItem_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_MeasurementItem_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_MeasurementItem_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Model_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Model_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_Model_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Model_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Model_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Model_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Model_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Model_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Model_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_Model_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Model_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Model_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Model_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_Model_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Model_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Model_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Model_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Model_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Model_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Model_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_Model_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Model_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ModelReal_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_ModelReal_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ModelReal_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ModelReal_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ModelReal_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ModelReal_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_ModelReal_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ModelReal_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ModelReal_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID]
				FROM
					[dbo].[METAView_ModelReal_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ModelReal_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ModelReal_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ModelReal_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ModelReal_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ModelReal_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					FROM [dbo].[METAView_ModelReal_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ModelReal_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_MutuallyExclusiveIndicator_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[SelectorType],
					[GapType]
				FROM
					[dbo].[METAView_MutuallyExclusiveIndicator_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MutuallyExclusiveIndicator_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [SelectorType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MutuallyExclusiveIndicator_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [SelectorType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MutuallyExclusiveIndicator_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MutuallyExclusiveIndicator_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [SelectorType]
					, [GapType]
					FROM [dbo].[METAView_MutuallyExclusiveIndicator_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [SelectorType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_MutuallyExclusiveIndicator_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_MutuallyExclusiveIndicator_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[SelectorType],
					[GapType]
				FROM
					[dbo].[METAView_MutuallyExclusiveIndicator_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MutuallyExclusiveIndicator_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [SelectorType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MutuallyExclusiveIndicator_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [SelectorType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_MutuallyExclusiveIndicator_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_MutuallyExclusiveIndicator_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_MutuallyExclusiveIndicator_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [SelectorType]
					, [GapType]
					FROM [dbo].[METAView_MutuallyExclusiveIndicator_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [SelectorType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_MutuallyExclusiveIndicator_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_NetworkComponent_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[MacAddress],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[ConnectionSpeed],
					[Number_of_Ports],
					[Number_of_Ports_Available],
					[Range],
					[isDNS],
					[isDHCP],
					[isManaged],
					[Mem_Total],
					[DatePurchased],
					[UnderWarranty],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[NetworkType],
					[GapType]
				FROM
					[dbo].[METAView_NetworkComponent_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_NetworkComponent_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [MacAddress]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [ConnectionSpeed]'
				SET @SQL = @SQL + ', [Number_of_Ports]'
				SET @SQL = @SQL + ', [Number_of_Ports_Available]'
				SET @SQL = @SQL + ', [Range]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [isManaged]'
				SET @SQL = @SQL + ', [Mem_Total]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [NetworkType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_NetworkComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [MacAddress],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [ConnectionSpeed],'
				SET @SQL = @SQL + ' [Number_of_Ports],'
				SET @SQL = @SQL + ' [Number_of_Ports_Available],'
				SET @SQL = @SQL + ' [Range],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [isManaged],'
				SET @SQL = @SQL + ' [Mem_Total],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [NetworkType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_NetworkComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_NetworkComponent_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [MacAddress]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [ConnectionSpeed]
					, [Number_of_Ports]
					, [Number_of_Ports_Available]
					, [Range]
					, [isDNS]
					, [isDHCP]
					, [isManaged]
					, [Mem_Total]
					, [DatePurchased]
					, [UnderWarranty]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [NetworkType]
					, [GapType]
					FROM [dbo].[METAView_NetworkComponent_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [MacAddress],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [ConnectionSpeed],
				       [Number_of_Ports],
				       [Number_of_Ports_Available],
				       [Range],
				       [isDNS],
				       [isDHCP],
				       [isManaged],
				       [Mem_Total],
				       [DatePurchased],
				       [UnderWarranty],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [NetworkType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_NetworkComponent_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_NetworkComponent_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[MacAddress],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[ConnectionSpeed],
					[Number_of_Ports],
					[Number_of_Ports_Available],
					[Range],
					[isDNS],
					[isDHCP],
					[isManaged],
					[Mem_Total],
					[DatePurchased],
					[UnderWarranty],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[NetworkType],
					[GapType]
				FROM
					[dbo].[METAView_NetworkComponent_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_NetworkComponent_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [MacAddress]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [ConnectionSpeed]'
				SET @SQL = @SQL + ', [Number_of_Ports]'
				SET @SQL = @SQL + ', [Number_of_Ports_Available]'
				SET @SQL = @SQL + ', [Range]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [isManaged]'
				SET @SQL = @SQL + ', [Mem_Total]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [NetworkType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_NetworkComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [MacAddress],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [ConnectionSpeed],'
				SET @SQL = @SQL + ' [Number_of_Ports],'
				SET @SQL = @SQL + ' [Number_of_Ports_Available],'
				SET @SQL = @SQL + ' [Range],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [isManaged],'
				SET @SQL = @SQL + ' [Mem_Total],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [NetworkType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_NetworkComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_NetworkComponent_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_NetworkComponent_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [MacAddress]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [ConnectionSpeed]
					, [Number_of_Ports]
					, [Number_of_Ports_Available]
					, [Range]
					, [isDNS]
					, [isDHCP]
					, [isManaged]
					, [Mem_Total]
					, [DatePurchased]
					, [UnderWarranty]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [NetworkType]
					, [GapType]
					FROM [dbo].[METAView_NetworkComponent_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [MacAddress],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [ConnectionSpeed],
				       [Number_of_Ports],
				       [Number_of_Ports_Available],
				       [Range],
				       [isDNS],
				       [isDHCP],
				       [isManaged],
				       [Mem_Total],
				       [DatePurchased],
				       [UnderWarranty],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [NetworkType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_NetworkComponent_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Object_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Object_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Type],
					[GapType]
				FROM
					[dbo].[METAView_Object_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Object_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Object_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Object_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Object_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Object_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Object_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Type]
					, [GapType]
					FROM [dbo].[METAView_Object_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Type],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Object_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Object_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Object_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Type],
					[GapType]
				FROM
					[dbo].[METAView_Object_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Object_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Object_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Object_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Object_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Object_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Object_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Type]
					, [GapType]
					FROM [dbo].[METAView_Object_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Type],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Object_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_OrganizationalUnit_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Telephone],
					[Fax],
					[Email],
					[GapType]
				FROM
					[dbo].[METAView_OrganizationalUnit_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_OrganizationalUnit_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_OrganizationalUnit_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_OrganizationalUnit_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_OrganizationalUnit_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Telephone]
					, [Fax]
					, [Email]
					, [GapType]
					FROM [dbo].[METAView_OrganizationalUnit_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Telephone],
				       [Fax],
				       [Email],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_OrganizationalUnit_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_OrganizationalUnit_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Type],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[Telephone],
					[Fax],
					[Email],
					[GapType]
				FROM
					[dbo].[METAView_OrganizationalUnit_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_OrganizationalUnit_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_OrganizationalUnit_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_OrganizationalUnit_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_OrganizationalUnit_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_OrganizationalUnit_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Type]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [Telephone]
					, [Fax]
					, [Email]
					, [GapType]
					FROM [dbo].[METAView_OrganizationalUnit_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Type],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [Telephone],
				       [Fax],
				       [Email],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_OrganizationalUnit_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Peripheral_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[NetworkAddress1],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[Copy_PPM],
					[Print_PPM],
					[isColor],
					[isManaged],
					[isNetwork],
					[DatePurchased],
					[UnderWarranty],
					[Contract],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Peripheral_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Peripheral_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [NetworkAddress1]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [Copy_PPM]'
				SET @SQL = @SQL + ', [Print_PPM]'
				SET @SQL = @SQL + ', [isColor]'
				SET @SQL = @SQL + ', [isManaged]'
				SET @SQL = @SQL + ', [isNetwork]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [Contract]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Peripheral_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [NetworkAddress1],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [Copy_PPM],'
				SET @SQL = @SQL + ' [Print_PPM],'
				SET @SQL = @SQL + ' [isColor],'
				SET @SQL = @SQL + ' [isManaged],'
				SET @SQL = @SQL + ' [isNetwork],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [Contract],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Peripheral_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Peripheral_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [NetworkAddress1]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [Copy_PPM]
					, [Print_PPM]
					, [isColor]
					, [isManaged]
					, [isNetwork]
					, [DatePurchased]
					, [UnderWarranty]
					, [Contract]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Peripheral_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [NetworkAddress1],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [Copy_PPM],
				       [Print_PPM],
				       [isColor],
				       [isManaged],
				       [isNetwork],
				       [DatePurchased],
				       [UnderWarranty],
				       [Contract],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Peripheral_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Peripheral_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[NetworkAddress1],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[Copy_PPM],
					[Print_PPM],
					[isColor],
					[isManaged],
					[isNetwork],
					[DatePurchased],
					[UnderWarranty],
					[Contract],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Peripheral_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Peripheral_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [NetworkAddress1]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [Copy_PPM]'
				SET @SQL = @SQL + ', [Print_PPM]'
				SET @SQL = @SQL + ', [isColor]'
				SET @SQL = @SQL + ', [isManaged]'
				SET @SQL = @SQL + ', [isNetwork]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [Contract]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Peripheral_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [NetworkAddress1],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [Copy_PPM],'
				SET @SQL = @SQL + ' [Print_PPM],'
				SET @SQL = @SQL + ' [isColor],'
				SET @SQL = @SQL + ' [isManaged],'
				SET @SQL = @SQL + ' [isNetwork],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [Contract],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Peripheral_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Peripheral_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Peripheral_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [NetworkAddress1]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [Copy_PPM]
					, [Print_PPM]
					, [isColor]
					, [isManaged]
					, [isNetwork]
					, [DatePurchased]
					, [UnderWarranty]
					, [Contract]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Peripheral_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [NetworkAddress1],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [Copy_PPM],
				       [Print_PPM],
				       [isColor],
				       [isManaged],
				       [isNetwork],
				       [DatePurchased],
				       [UnderWarranty],
				       [Contract],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Peripheral_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ProbOfRealization_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ProbOfRealization_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ProbOfRealization_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ProbOfRealization_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ProbOfRealization_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ProbOfRealization_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ProbOfRealization_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ProbOfRealization_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_ProbOfRealization_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_ProbOfRealization_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ProbOfRealization_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ProbOfRealization_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_ProbOfRealization_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_ProbOfRealization_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_ProbOfRealization_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_ProbOfRealization_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_ProbOfRealization_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Process_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Process_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ExecutionIndicator],
					[ContextualIndicator],
					[SequenceNumber],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Process_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Process_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Process_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExecutionIndicator]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [SequenceNumber]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Process_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExecutionIndicator],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [SequenceNumber],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Process_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Process_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Process_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ExecutionIndicator]
					, [ContextualIndicator]
					, [SequenceNumber]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Process_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ExecutionIndicator],
				       [ContextualIndicator],
				       [SequenceNumber],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Process_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Process_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Process_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[ExecutionIndicator],
					[ContextualIndicator],
					[SequenceNumber],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Process_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Process_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Process_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExecutionIndicator]'
				SET @SQL = @SQL + ', [ContextualIndicator]'
				SET @SQL = @SQL + ', [SequenceNumber]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Process_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExecutionIndicator],'
				SET @SQL = @SQL + ' [ContextualIndicator],'
				SET @SQL = @SQL + ' [SequenceNumber],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Process_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Process_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Process_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [ExecutionIndicator]
					, [ContextualIndicator]
					, [SequenceNumber]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Process_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [ExecutionIndicator],
				       [ContextualIndicator],
				       [SequenceNumber],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Process_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Rationale_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[UniqueRef],
					[RationaleType],
					[Value],
					[AuthorName],
					[EffectiveDate],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Rationale_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Rationale_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [UniqueRef]'
				SET @SQL = @SQL + ', [RationaleType]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [AuthorName]'
				SET @SQL = @SQL + ', [EffectiveDate]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Rationale_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [UniqueRef],'
				SET @SQL = @SQL + ' [RationaleType],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [AuthorName],'
				SET @SQL = @SQL + ' [EffectiveDate],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Rationale_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Rationale_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [UniqueRef]
					, [RationaleType]
					, [Value]
					, [AuthorName]
					, [EffectiveDate]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Rationale_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [UniqueRef],
				       [RationaleType],
				       [Value],
				       [AuthorName],
				       [EffectiveDate],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Rationale_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Rationale_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[UniqueRef],
					[RationaleType],
					[Value],
					[AuthorName],
					[EffectiveDate],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Rationale_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Rationale_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [UniqueRef]'
				SET @SQL = @SQL + ', [RationaleType]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [AuthorName]'
				SET @SQL = @SQL + ', [EffectiveDate]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Rationale_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [UniqueRef],'
				SET @SQL = @SQL + ' [RationaleType],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [AuthorName],'
				SET @SQL = @SQL + ' [EffectiveDate],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Rationale_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Rationale_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Rationale_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [UniqueRef]
					, [RationaleType]
					, [Value]
					, [AuthorName]
					, [EffectiveDate]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Rationale_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [UniqueRef],
				       [RationaleType],
				       [Value],
				       [AuthorName],
				       [EffectiveDate],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Rationale_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Responsibility_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Responsibility_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Responsibility_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Responsibility_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Responsibility_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Responsibility_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Responsibility_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Responsibility_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Responsibility_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Responsibility_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Responsibility_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Responsibility_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Responsibility_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Responsibility_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Responsibility_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Responsibility_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Responsibility_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Role_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Role_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Role_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Role_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Role_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Role_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Role_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Role_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Role_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Role_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Role_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Role_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Role_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_Role_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Role_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Role_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Role_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Role_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Role_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Role_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_Role_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Role_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Scenario_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Acc_Prob_of_Real],
					[Start_Date],
					[End_Date],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Scenario_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Scenario_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Acc_Prob_of_Real]'
				SET @SQL = @SQL + ', [Start_Date]'
				SET @SQL = @SQL + ', [End_Date]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Scenario_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Acc_Prob_of_Real],'
				SET @SQL = @SQL + ' [Start_Date],'
				SET @SQL = @SQL + ' [End_Date],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Scenario_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Scenario_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Acc_Prob_of_Real]
					, [Start_Date]
					, [End_Date]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Scenario_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Acc_Prob_of_Real],
				       [Start_Date],
				       [End_Date],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Scenario_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Scenario_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[Acc_Prob_of_Real],
					[Start_Date],
					[End_Date],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Scenario_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Scenario_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Acc_Prob_of_Real]'
				SET @SQL = @SQL + ', [Start_Date]'
				SET @SQL = @SQL + ', [End_Date]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Scenario_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Acc_Prob_of_Real],'
				SET @SQL = @SQL + ' [Start_Date],'
				SET @SQL = @SQL + ' [End_Date],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Scenario_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Scenario_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Scenario_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [Acc_Prob_of_Real]
					, [Start_Date]
					, [End_Date]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Scenario_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [Acc_Prob_of_Real],
				       [Start_Date],
				       [End_Date],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Scenario_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_SelectorAttribute_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_SelectorAttribute_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SelectorAttribute_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SelectorAttribute_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SelectorAttribute_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SelectorAttribute_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_SelectorAttribute_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_SelectorAttribute_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_SelectorAttribute_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_SelectorAttribute_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SelectorAttribute_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SelectorAttribute_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SelectorAttribute_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_SelectorAttribute_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SelectorAttribute_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_SelectorAttribute_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_SelectorAttribute_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Skill_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Skill_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Skill_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Skill_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Skill_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Skill_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Skill_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Skill_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Skill_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_Skill_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Skill_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Skill_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Skill_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Skill_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Skill_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_Skill_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Skill_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Software_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Software_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[Copyright],
					[Publisher],
					[InternalName],
					[Language],
					[DateCreated],
					[isDNS],
					[isDHCP],
					[isLicensed],
					[LicenseNumber],
					[DatePurchased],
					[Version],
					[ID],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[UserInterface],
					[GapType]
				FROM
					[dbo].[METAView_Software_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Software_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Software_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [Copyright]'
				SET @SQL = @SQL + ', [Publisher]'
				SET @SQL = @SQL + ', [InternalName]'
				SET @SQL = @SQL + ', [Language]'
				SET @SQL = @SQL + ', [DateCreated]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [isLicensed]'
				SET @SQL = @SQL + ', [LicenseNumber]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [Version]'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [UserInterface]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Software_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [Copyright],'
				SET @SQL = @SQL + ' [Publisher],'
				SET @SQL = @SQL + ' [InternalName],'
				SET @SQL = @SQL + ' [Language],'
				SET @SQL = @SQL + ' [DateCreated],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [isLicensed],'
				SET @SQL = @SQL + ' [LicenseNumber],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [Version],'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [UserInterface],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Software_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Software_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Software_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [Copyright]
					, [Publisher]
					, [InternalName]
					, [Language]
					, [DateCreated]
					, [isDNS]
					, [isDHCP]
					, [isLicensed]
					, [LicenseNumber]
					, [DatePurchased]
					, [Version]
					, [ID]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [UserInterface]
					, [GapType]
					FROM [dbo].[METAView_Software_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [Copyright],
				       [Publisher],
				       [InternalName],
				       [Language],
				       [DateCreated],
				       [isDNS],
				       [isDHCP],
				       [isLicensed],
				       [LicenseNumber],
				       [DatePurchased],
				       [Version],
				       [ID],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [UserInterface],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Software_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Software_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_Software_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[Copyright],
					[Publisher],
					[InternalName],
					[Language],
					[DateCreated],
					[isDNS],
					[isDHCP],
					[isLicensed],
					[LicenseNumber],
					[DatePurchased],
					[Version],
					[ID],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[UserInterface],
					[GapType]
				FROM
					[dbo].[METAView_Software_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_Software_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Software_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [Copyright]'
				SET @SQL = @SQL + ', [Publisher]'
				SET @SQL = @SQL + ', [InternalName]'
				SET @SQL = @SQL + ', [Language]'
				SET @SQL = @SQL + ', [DateCreated]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [isLicensed]'
				SET @SQL = @SQL + ', [LicenseNumber]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [Version]'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [UserInterface]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Software_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [Copyright],'
				SET @SQL = @SQL + ' [Publisher],'
				SET @SQL = @SQL + ' [InternalName],'
				SET @SQL = @SQL + ' [Language],'
				SET @SQL = @SQL + ' [DateCreated],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [isLicensed],'
				SET @SQL = @SQL + ' [LicenseNumber],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [Version],'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [UserInterface],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_Software_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_Software_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_Software_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [Copyright]
					, [Publisher]
					, [InternalName]
					, [Language]
					, [DateCreated]
					, [isDNS]
					, [isDHCP]
					, [isLicensed]
					, [LicenseNumber]
					, [DatePurchased]
					, [Version]
					, [ID]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [UserInterface]
					, [GapType]
					FROM [dbo].[METAView_Software_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [Copyright],
				       [Publisher],
				       [InternalName],
				       [Language],
				       [DateCreated],
				       [isDNS],
				       [isDHCP],
				       [isLicensed],
				       [LicenseNumber],
				       [DatePurchased],
				       [Version],
				       [ID],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [UserInterface],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_Software_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_StorageComponent_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityIndicator],
					[Configuration],
					[NetworkAddress1],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[Capacity],
					[Number_of_Disks],
					[DatePurchased],
					[UnderWarranty],
					[FileSystem],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_StorageComponent_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StorageComponent_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityIndicator]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [NetworkAddress1]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [Capacity]'
				SET @SQL = @SQL + ', [Number_of_Disks]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [FileSystem]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StorageComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityIndicator],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [NetworkAddress1],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [Capacity],'
				SET @SQL = @SQL + ' [Number_of_Disks],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [FileSystem],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StorageComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StorageComponent_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityIndicator]
					, [Configuration]
					, [NetworkAddress1]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [Capacity]
					, [Number_of_Disks]
					, [DatePurchased]
					, [UnderWarranty]
					, [FileSystem]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_StorageComponent_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityIndicator],
				       [Configuration],
				       [NetworkAddress1],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [Capacity],
				       [Number_of_Disks],
				       [DatePurchased],
				       [UnderWarranty],
				       [FileSystem],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_StorageComponent_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_StorageComponent_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityIndicator],
					[Configuration],
					[NetworkAddress1],
					[NetworkAddress2],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[Capacity],
					[Number_of_Disks],
					[DatePurchased],
					[UnderWarranty],
					[FileSystem],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_StorageComponent_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StorageComponent_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityIndicator]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [NetworkAddress1]'
				SET @SQL = @SQL + ', [NetworkAddress2]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [Capacity]'
				SET @SQL = @SQL + ', [Number_of_Disks]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [FileSystem]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StorageComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityIndicator],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [NetworkAddress1],'
				SET @SQL = @SQL + ' [NetworkAddress2],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [Capacity],'
				SET @SQL = @SQL + ' [Number_of_Disks],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [FileSystem],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StorageComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_StorageComponent_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StorageComponent_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityIndicator]
					, [Configuration]
					, [NetworkAddress1]
					, [NetworkAddress2]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [Capacity]
					, [Number_of_Disks]
					, [DatePurchased]
					, [UnderWarranty]
					, [FileSystem]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_StorageComponent_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityIndicator],
				       [Configuration],
				       [NetworkAddress1],
				       [NetworkAddress2],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [Capacity],
				       [Number_of_Disks],
				       [DatePurchased],
				       [UnderWarranty],
				       [FileSystem],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_StorageComponent_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_StrategicTheme_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_StrategicTheme_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StrategicTheme_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StrategicTheme_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StrategicTheme_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StrategicTheme_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_StrategicTheme_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_StrategicTheme_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_StrategicTheme_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_StrategicTheme_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StrategicTheme_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StrategicTheme_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_StrategicTheme_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_StrategicTheme_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_StrategicTheme_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_StrategicTheme_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_StrategicTheme_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_SystemComponent_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[MACAddress],
					[StaticIP],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[isDNS],
					[isDHCP],
					[Capacity],
					[Mem_Total],
					[CPU_Type],
					[CPU_Speed],
					[Monitor],
					[Video_Card],
					[Number_Of_Disks],
					[DatePurchased],
					[UnderWarranty],
					[Domain],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ServerType],
					[GapType]
				FROM
					[dbo].[METAView_SystemComponent_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SystemComponent_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [MACAddress]'
				SET @SQL = @SQL + ', [StaticIP]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [Capacity]'
				SET @SQL = @SQL + ', [Mem_Total]'
				SET @SQL = @SQL + ', [CPU_Type]'
				SET @SQL = @SQL + ', [CPU_Speed]'
				SET @SQL = @SQL + ', [Monitor]'
				SET @SQL = @SQL + ', [Video_Card]'
				SET @SQL = @SQL + ', [Number_Of_Disks]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [Domain]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ServerType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SystemComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [MACAddress],'
				SET @SQL = @SQL + ' [StaticIP],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [Capacity],'
				SET @SQL = @SQL + ' [Mem_Total],'
				SET @SQL = @SQL + ' [CPU_Type],'
				SET @SQL = @SQL + ' [CPU_Speed],'
				SET @SQL = @SQL + ' [Monitor],'
				SET @SQL = @SQL + ' [Video_Card],'
				SET @SQL = @SQL + ' [Number_Of_Disks],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [Domain],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ServerType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SystemComponent_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SystemComponent_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [MACAddress]
					, [StaticIP]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [isDNS]
					, [isDHCP]
					, [Capacity]
					, [Mem_Total]
					, [CPU_Type]
					, [CPU_Speed]
					, [Monitor]
					, [Video_Card]
					, [Number_Of_Disks]
					, [DatePurchased]
					, [UnderWarranty]
					, [Domain]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ServerType]
					, [GapType]
					FROM [dbo].[METAView_SystemComponent_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [MACAddress],
				       [StaticIP],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [isDNS],
				       [isDHCP],
				       [Capacity],
				       [Mem_Total],
				       [CPU_Type],
				       [CPU_Speed],
				       [Monitor],
				       [Video_Card],
				       [Number_Of_Disks],
				       [DatePurchased],
				       [UnderWarranty],
				       [Domain],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ServerType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_SystemComponent_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_SystemComponent_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Type],
					[Name],
					[Description],
					[SeverityRating],
					[Configuration],
					[MACAddress],
					[StaticIP],
					[NetworkAddress3],
					[NetworkAddress4],
					[NetworkAddress5],
					[Make],
					[Model],
					[SerialNumber],
					[AssetNumber],
					[isDNS],
					[isDHCP],
					[Capacity],
					[Mem_Total],
					[CPU_Type],
					[CPU_Speed],
					[Monitor],
					[Video_Card],
					[Number_Of_Disks],
					[DatePurchased],
					[UnderWarranty],
					[Domain],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[ServerType],
					[GapType]
				FROM
					[dbo].[METAView_SystemComponent_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SystemComponent_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Type]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [SeverityRating]'
				SET @SQL = @SQL + ', [Configuration]'
				SET @SQL = @SQL + ', [MACAddress]'
				SET @SQL = @SQL + ', [StaticIP]'
				SET @SQL = @SQL + ', [NetworkAddress3]'
				SET @SQL = @SQL + ', [NetworkAddress4]'
				SET @SQL = @SQL + ', [NetworkAddress5]'
				SET @SQL = @SQL + ', [Make]'
				SET @SQL = @SQL + ', [Model]'
				SET @SQL = @SQL + ', [SerialNumber]'
				SET @SQL = @SQL + ', [AssetNumber]'
				SET @SQL = @SQL + ', [isDNS]'
				SET @SQL = @SQL + ', [isDHCP]'
				SET @SQL = @SQL + ', [Capacity]'
				SET @SQL = @SQL + ', [Mem_Total]'
				SET @SQL = @SQL + ', [CPU_Type]'
				SET @SQL = @SQL + ', [CPU_Speed]'
				SET @SQL = @SQL + ', [Monitor]'
				SET @SQL = @SQL + ', [Video_Card]'
				SET @SQL = @SQL + ', [Number_Of_Disks]'
				SET @SQL = @SQL + ', [DatePurchased]'
				SET @SQL = @SQL + ', [UnderWarranty]'
				SET @SQL = @SQL + ', [Domain]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [ServerType]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SystemComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Type],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [SeverityRating],'
				SET @SQL = @SQL + ' [Configuration],'
				SET @SQL = @SQL + ' [MACAddress],'
				SET @SQL = @SQL + ' [StaticIP],'
				SET @SQL = @SQL + ' [NetworkAddress3],'
				SET @SQL = @SQL + ' [NetworkAddress4],'
				SET @SQL = @SQL + ' [NetworkAddress5],'
				SET @SQL = @SQL + ' [Make],'
				SET @SQL = @SQL + ' [Model],'
				SET @SQL = @SQL + ' [SerialNumber],'
				SET @SQL = @SQL + ' [AssetNumber],'
				SET @SQL = @SQL + ' [isDNS],'
				SET @SQL = @SQL + ' [isDHCP],'
				SET @SQL = @SQL + ' [Capacity],'
				SET @SQL = @SQL + ' [Mem_Total],'
				SET @SQL = @SQL + ' [CPU_Type],'
				SET @SQL = @SQL + ' [CPU_Speed],'
				SET @SQL = @SQL + ' [Monitor],'
				SET @SQL = @SQL + ' [Video_Card],'
				SET @SQL = @SQL + ' [Number_Of_Disks],'
				SET @SQL = @SQL + ' [DatePurchased],'
				SET @SQL = @SQL + ' [UnderWarranty],'
				SET @SQL = @SQL + ' [Domain],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [ServerType],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_SystemComponent_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_SystemComponent_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_SystemComponent_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Type]
					, [Name]
					, [Description]
					, [SeverityRating]
					, [Configuration]
					, [MACAddress]
					, [StaticIP]
					, [NetworkAddress3]
					, [NetworkAddress4]
					, [NetworkAddress5]
					, [Make]
					, [Model]
					, [SerialNumber]
					, [AssetNumber]
					, [isDNS]
					, [isDHCP]
					, [Capacity]
					, [Mem_Total]
					, [CPU_Type]
					, [CPU_Speed]
					, [Monitor]
					, [Video_Card]
					, [Number_Of_Disks]
					, [DatePurchased]
					, [UnderWarranty]
					, [Domain]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [ServerType]
					, [GapType]
					FROM [dbo].[METAView_SystemComponent_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Type],
				       [Name],
				       [Description],
				       [SeverityRating],
				       [Configuration],
				       [MACAddress],
				       [StaticIP],
				       [NetworkAddress3],
				       [NetworkAddress4],
				       [NetworkAddress5],
				       [Make],
				       [Model],
				       [SerialNumber],
				       [AssetNumber],
				       [isDNS],
				       [isDHCP],
				       [Capacity],
				       [Mem_Total],
				       [CPU_Type],
				       [CPU_Speed],
				       [Monitor],
				       [Video_Card],
				       [Number_Of_Disks],
				       [DatePurchased],
				       [UnderWarranty],
				       [Domain],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [ServerType],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_SystemComponent_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeIndicator_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_TimeIndicator_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeIndicator_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeIndicator_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeIndicator_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeIndicator_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_TimeIndicator_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeIndicator_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeIndicator_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Value],
					[CustomField1],
					[CustomField2],
					[CustomField3],
					[GapType]
				FROM
					[dbo].[METAView_TimeIndicator_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeIndicator_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeIndicator_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3],'
				SET @SQL = @SQL + ' [GapType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeIndicator_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeIndicator_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeIndicator_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Value]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					, [GapType]
					FROM [dbo].[METAView_TimeIndicator_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Value],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3],
				       [GapType]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeIndicator_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeScheme_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_TimeScheme_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeScheme_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeScheme_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeScheme_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeScheme_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_TimeScheme_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeScheme_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeScheme_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_TimeScheme_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeScheme_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeScheme_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeScheme_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeScheme_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeScheme_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_TimeScheme_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeScheme_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Listing_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeUnit_Listing view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[TimeUnitType],
					[Value],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_TimeUnit_Listing]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Listing_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeUnit_Listing view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [TimeUnitType]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeUnit_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [TimeUnitType],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeUnit_Listing]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Listing_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeUnit_Listing table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [TimeUnitType]
					, [Value]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_TimeUnit_Listing] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [TimeUnitType],
				       [Value],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeUnit_Listing] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Retrieval_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the METAView_TimeUnit_Retrieval view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[WorkspaceName],
					[WorkspaceTypeId],
					[VCStatusID],
					[pkid],
					[Machine],
					[VCMachineID],
					[Name],
					[TimeUnitType],
					[Value],
					[GapType],
					[CustomField1],
					[CustomField2],
					[CustomField3]
				FROM
					[dbo].[METAView_TimeUnit_Retrieval]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Retrieval_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeUnit_Retrieval view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WorkspaceName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WorkspaceName]'
				SET @SQL = @SQL + ', [WorkspaceTypeId]'
				SET @SQL = @SQL + ', [VCStatusID]'
				SET @SQL = @SQL + ', [pkid]'
				SET @SQL = @SQL + ', [Machine]'
				SET @SQL = @SQL + ', [VCMachineID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [TimeUnitType]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [GapType]'
				SET @SQL = @SQL + ', [CustomField1]'
				SET @SQL = @SQL + ', [CustomField2]'
				SET @SQL = @SQL + ', [CustomField3]'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeUnit_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WorkspaceName],'
				SET @SQL = @SQL + ' [WorkspaceTypeId],'
				SET @SQL = @SQL + ' [VCStatusID],'
				SET @SQL = @SQL + ' [pkid],'
				SET @SQL = @SQL + ' [Machine],'
				SET @SQL = @SQL + ' [VCMachineID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [TimeUnitType],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [GapType],'
				SET @SQL = @SQL + ' [CustomField1],'
				SET @SQL = @SQL + ' [CustomField2],'
				SET @SQL = @SQL + ' [CustomField3]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[METAView_TimeUnit_Retrieval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_METAView_TimeUnit_Retrieval_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the METAView_TimeUnit_Retrieval table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [WorkspaceName]
					, [WorkspaceTypeId]
					, [VCStatusID]
					, [pkid]
					, [Machine]
					, [VCMachineID]
					, [Name]
					, [TimeUnitType]
					, [Value]
					, [GapType]
					, [CustomField1]
					, [CustomField2]
					, [CustomField3]
					FROM [dbo].[METAView_TimeUnit_Retrieval] {0}
				)
				SELECT
				       [WorkspaceName],
				       [WorkspaceTypeId],
				       [VCStatusID],
				       [pkid],
				       [Machine],
				       [VCMachineID],
				       [Name],
				       [TimeUnitType],
				       [Value],
				       [GapType],
				       [CustomField1],
				       [CustomField2],
				       [CustomField3]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[METAView_TimeUnit_Retrieval] {0};
				
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_vw_FieldValue_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_FieldValue view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Field],
					[ValueString],
					[ValueInt],
					[ValueDouble],
					[ValueObjectID],
					[ValueDate],
					[ValueBoolean]
				FROM
					[dbo].[vw_FieldValue]
					
				SELECT @@ROWCOUNT			
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="PROC_vw_FieldValue_Get" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FieldValue view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Field]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Field]'
				SET @SQL = @SQL + ', [ValueString]'
				SET @SQL = @SQL + ', [ValueInt]'
				SET @SQL = @SQL + ', [ValueDouble]'
				SET @SQL = @SQL + ', [ValueObjectID]'
				SET @SQL = @SQL + ', [ValueDate]'
				SET @SQL = @SQL + ', [ValueBoolean]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FieldValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Field],'
				SET @SQL = @SQL + ' [ValueString],'
				SET @SQL = @SQL + ' [ValueInt],'
				SET @SQL = @SQL + ' [ValueDouble],'
				SET @SQL = @SQL + ' [ValueObjectID],'
				SET @SQL = @SQL + ' [ValueDate],'
				SET @SQL = @SQL + ' [ValueBoolean]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FieldValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="PROC_vw_FieldValue_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FieldValue table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
					, [Field]
					, [ValueString]
					, [ValueInt]
					, [ValueDouble]
					, [ValueObjectID]
					, [ValueDate]
					, [ValueBoolean]
					FROM [dbo].[vw_FieldValue] {0}
				)
				SELECT
				       [Field],
				       [ValueString],
				       [ValueInt],
				       [ValueDouble],
				       [ValueObjectID],
				       [ValueDate],
				       [ValueBoolean]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				
				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[vw_FieldValue] {0};
				
				END
			]]></body>
		</procedure>
		
</procedures>
</root>
