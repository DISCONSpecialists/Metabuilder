/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwOidFlows.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'vw_OID_Flows' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwOidFlowsBase")]
	public abstract partial class VwOidFlowsBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// FromPKID : 
		/// </summary>
		private System.Int32		  _fromPkid = (int)0;
		
		/// <summary>
		/// FromName : 
		/// </summary>
		private System.String		  _fromName = null;
		
		/// <summary>
		/// FromType : 
		/// </summary>
		private System.String		  _fromType = null;
		
		/// <summary>
		/// ToPKID : 
		/// </summary>
		private System.Int32		  _toPkid = (int)0;
		
		/// <summary>
		/// ToName : 
		/// </summary>
		private System.String		  _toName = null;
		
		/// <summary>
		/// ToType : 
		/// </summary>
		private System.String		  _toType = null;
		
		/// <summary>
		/// DescriptionOfProcess : 
		/// </summary>
		private System.String		  _descriptionOfProcess = null;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		private System.String		  _sequence = null;
		
		/// <summary>
		/// FlowPKID : 
		/// </summary>
		private System.Int32		  _flowPkid = (int)0;
		
		/// <summary>
		/// Conditions : 
		/// </summary>
		private System.String		  _conditions = null;
		
		/// <summary>
		/// Comments : 
		/// </summary>
		private System.String		  _comments = null;
		
		/// <summary>
		/// Class : 
		/// </summary>
		private System.String		  _safeNameClass = null;
		
		/// <summary>
		/// DesignMappingName : 
		/// </summary>
		private System.String		  _designMappingName = null;
		
		/// <summary>
		/// DesignMappingVersion : 
		/// </summary>
		private System.String		  _designMappingVersion = null;
		
		/// <summary>
		/// DesignMappingID : 
		/// </summary>
		private System.String		  _designMappingId = null;
		
		/// <summary>
		/// TransactionVolume : 
		/// </summary>
		private System.String		  _transactionVolume = null;
		
		/// <summary>
		/// TransactionFrequency : 
		/// </summary>
		private System.String		  _transactionFrequency = null;
		
		/// <summary>
		/// RateOfVolumeChange : 
		/// </summary>
		private System.String		  _rateOfVolumeChange = null;
		
		/// <summary>
		/// TransactionDuration : 
		/// </summary>
		private System.String		  _transactionDuration = null;
		
		/// <summary>
		/// FromLocatedAtName : 
		/// </summary>
		private System.String		  _fromLocatedAtName = null;
		
		/// <summary>
		/// FromLocatedAtType : 
		/// </summary>
		private System.String		  _fromLocatedAtType = null;
		
		/// <summary>
		/// ToLocatedAtName : 
		/// </summary>
		private System.String		  _toLocatedAtName = null;
		
		/// <summary>
		/// ToLocatedAtType : 
		/// </summary>
		private System.String		  _toLocatedAtType = null;
		
		/// <summary>
		/// WorkspaceID : 
		/// </summary>
		private System.Int32		  _workspaceId = (int)0;
		
		/// <summary>
		/// GF_From : 
		/// </summary>
		private System.Int32		  _gfFrom = (int)0;
		
		/// <summary>
		/// GF_To : 
		/// </summary>
		private System.Int32		  _gfTo = (int)0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwOidFlowsBase"/> instance.
		///</summary>
		public VwOidFlowsBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwOidFlowsBase"/> instance.
		///</summary>
		///<param name="_fromPkid"></param>
		///<param name="_fromName"></param>
		///<param name="_fromType"></param>
		///<param name="_toPkid"></param>
		///<param name="_toName"></param>
		///<param name="_toType"></param>
		///<param name="_descriptionOfProcess"></param>
		///<param name="_sequence"></param>
		///<param name="_flowPkid"></param>
		///<param name="_conditions"></param>
		///<param name="_comments"></param>
		///<param name="_safeNameClass"></param>
		///<param name="_designMappingName"></param>
		///<param name="_designMappingVersion"></param>
		///<param name="_designMappingId"></param>
		///<param name="_transactionVolume"></param>
		///<param name="_transactionFrequency"></param>
		///<param name="_rateOfVolumeChange"></param>
		///<param name="_transactionDuration"></param>
		///<param name="_fromLocatedAtName"></param>
		///<param name="_fromLocatedAtType"></param>
		///<param name="_toLocatedAtName"></param>
		///<param name="_toLocatedAtType"></param>
		///<param name="_workspaceId"></param>
		///<param name="_gfFrom"></param>
		///<param name="_gfTo"></param>
		public VwOidFlowsBase(System.Int32 _fromPkid, System.String _fromName, System.String _fromType, System.Int32 _toPkid, System.String _toName, System.String _toType, System.String _descriptionOfProcess, System.String _sequence, System.Int32 _flowPkid, System.String _conditions, System.String _comments, System.String _safeNameClass, System.String _designMappingName, System.String _designMappingVersion, System.String _designMappingId, System.String _transactionVolume, System.String _transactionFrequency, System.String _rateOfVolumeChange, System.String _transactionDuration, System.String _fromLocatedAtName, System.String _fromLocatedAtType, System.String _toLocatedAtName, System.String _toLocatedAtType, System.Int32 _workspaceId, System.Int32 _gfFrom, System.Int32 _gfTo)
		{
			this._fromPkid = _fromPkid;
			this._fromName = _fromName;
			this._fromType = _fromType;
			this._toPkid = _toPkid;
			this._toName = _toName;
			this._toType = _toType;
			this._descriptionOfProcess = _descriptionOfProcess;
			this._sequence = _sequence;
			this._flowPkid = _flowPkid;
			this._conditions = _conditions;
			this._comments = _comments;
			this._safeNameClass = _safeNameClass;
			this._designMappingName = _designMappingName;
			this._designMappingVersion = _designMappingVersion;
			this._designMappingId = _designMappingId;
			this._transactionVolume = _transactionVolume;
			this._transactionFrequency = _transactionFrequency;
			this._rateOfVolumeChange = _rateOfVolumeChange;
			this._transactionDuration = _transactionDuration;
			this._fromLocatedAtName = _fromLocatedAtName;
			this._fromLocatedAtType = _fromLocatedAtType;
			this._toLocatedAtName = _toLocatedAtName;
			this._toLocatedAtType = _toLocatedAtType;
			this._workspaceId = _workspaceId;
			this._gfFrom = _gfFrom;
			this._gfTo = _gfTo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwOidFlows"/> instance.
		///</summary>
		///<param name="_fromPkid"></param>
		///<param name="_fromName"></param>
		///<param name="_fromType"></param>
		///<param name="_toPkid"></param>
		///<param name="_toName"></param>
		///<param name="_toType"></param>
		///<param name="_descriptionOfProcess"></param>
		///<param name="_sequence"></param>
		///<param name="_flowPkid"></param>
		///<param name="_conditions"></param>
		///<param name="_comments"></param>
		///<param name="_safeNameClass"></param>
		///<param name="_designMappingName"></param>
		///<param name="_designMappingVersion"></param>
		///<param name="_designMappingId"></param>
		///<param name="_transactionVolume"></param>
		///<param name="_transactionFrequency"></param>
		///<param name="_rateOfVolumeChange"></param>
		///<param name="_transactionDuration"></param>
		///<param name="_fromLocatedAtName"></param>
		///<param name="_fromLocatedAtType"></param>
		///<param name="_toLocatedAtName"></param>
		///<param name="_toLocatedAtType"></param>
		///<param name="_workspaceId"></param>
		///<param name="_gfFrom"></param>
		///<param name="_gfTo"></param>
		public static VwOidFlows CreateVwOidFlows(System.Int32 _fromPkid, System.String _fromName, System.String _fromType, System.Int32 _toPkid, System.String _toName, System.String _toType, System.String _descriptionOfProcess, System.String _sequence, System.Int32 _flowPkid, System.String _conditions, System.String _comments, System.String _safeNameClass, System.String _designMappingName, System.String _designMappingVersion, System.String _designMappingId, System.String _transactionVolume, System.String _transactionFrequency, System.String _rateOfVolumeChange, System.String _transactionDuration, System.String _fromLocatedAtName, System.String _fromLocatedAtType, System.String _toLocatedAtName, System.String _toLocatedAtType, System.Int32 _workspaceId, System.Int32 _gfFrom, System.Int32 _gfTo)
		{
			VwOidFlows newVwOidFlows = new VwOidFlows();
			newVwOidFlows.FromPkid = _fromPkid;
			newVwOidFlows.FromName = _fromName;
			newVwOidFlows.FromType = _fromType;
			newVwOidFlows.ToPkid = _toPkid;
			newVwOidFlows.ToName = _toName;
			newVwOidFlows.ToType = _toType;
			newVwOidFlows.DescriptionOfProcess = _descriptionOfProcess;
			newVwOidFlows.Sequence = _sequence;
			newVwOidFlows.FlowPkid = _flowPkid;
			newVwOidFlows.Conditions = _conditions;
			newVwOidFlows.Comments = _comments;
			newVwOidFlows.SafeNameClass = _safeNameClass;
			newVwOidFlows.DesignMappingName = _designMappingName;
			newVwOidFlows.DesignMappingVersion = _designMappingVersion;
			newVwOidFlows.DesignMappingId = _designMappingId;
			newVwOidFlows.TransactionVolume = _transactionVolume;
			newVwOidFlows.TransactionFrequency = _transactionFrequency;
			newVwOidFlows.RateOfVolumeChange = _rateOfVolumeChange;
			newVwOidFlows.TransactionDuration = _transactionDuration;
			newVwOidFlows.FromLocatedAtName = _fromLocatedAtName;
			newVwOidFlows.FromLocatedAtType = _fromLocatedAtType;
			newVwOidFlows.ToLocatedAtName = _toLocatedAtName;
			newVwOidFlows.ToLocatedAtType = _toLocatedAtType;
			newVwOidFlows.WorkspaceId = _workspaceId;
			newVwOidFlows.GfFrom = _gfFrom;
			newVwOidFlows.GfTo = _gfTo;
			return newVwOidFlows;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the FromPKID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 FromPkid
		{
			get
			{
				return this._fromPkid; 
			}
			set
			{
				if (_fromPkid == value)
					return;
					
				this._fromPkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("FromPkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FromName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FromName
		{
			get
			{
				return this._fromName; 
			}
			set
			{
				if (_fromName == value)
					return;
					
				this._fromName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FromName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FromType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FromType
		{
			get
			{
				return this._fromType; 
			}
			set
			{
				if (_fromType == value)
					return;
					
				this._fromType = value;
				this._isDirty = true;
				
				OnPropertyChanged("FromType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ToPKID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ToPkid
		{
			get
			{
				return this._toPkid; 
			}
			set
			{
				if (_toPkid == value)
					return;
					
				this._toPkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("ToPkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ToName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ToName
		{
			get
			{
				return this._toName; 
			}
			set
			{
				if (_toName == value)
					return;
					
				this._toName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ToName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ToType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ToType
		{
			get
			{
				return this._toType; 
			}
			set
			{
				if (_toType == value)
					return;
					
				this._toType = value;
				this._isDirty = true;
				
				OnPropertyChanged("ToType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DescriptionOfProcess property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DescriptionOfProcess
		{
			get
			{
				return this._descriptionOfProcess; 
			}
			set
			{
				if (_descriptionOfProcess == value)
					return;
					
				this._descriptionOfProcess = value;
				this._isDirty = true;
				
				OnPropertyChanged("DescriptionOfProcess");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sequence
		{
			get
			{
				return this._sequence; 
			}
			set
			{
				if (_sequence == value)
					return;
					
				this._sequence = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FlowPKID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 FlowPkid
		{
			get
			{
				return this._flowPkid; 
			}
			set
			{
				if (_flowPkid == value)
					return;
					
				this._flowPkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("FlowPkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Conditions property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Conditions
		{
			get
			{
				return this._conditions; 
			}
			set
			{
				if (_conditions == value)
					return;
					
				this._conditions = value;
				this._isDirty = true;
				
				OnPropertyChanged("Conditions");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Comments
		{
			get
			{
				return this._comments; 
			}
			set
			{
				if (_comments == value)
					return;
					
				this._comments = value;
				this._isDirty = true;
				
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Class property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SafeNameClass
		{
			get
			{
				return this._safeNameClass; 
			}
			set
			{
				if (_safeNameClass == value)
					return;
					
				this._safeNameClass = value;
				this._isDirty = true;
				
				OnPropertyChanged("SafeNameClass");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DesignMappingName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DesignMappingName
		{
			get
			{
				return this._designMappingName; 
			}
			set
			{
				if (_designMappingName == value)
					return;
					
				this._designMappingName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DesignMappingName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DesignMappingVersion property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DesignMappingVersion
		{
			get
			{
				return this._designMappingVersion; 
			}
			set
			{
				if (_designMappingVersion == value)
					return;
					
				this._designMappingVersion = value;
				this._isDirty = true;
				
				OnPropertyChanged("DesignMappingVersion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DesignMappingID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DesignMappingId
		{
			get
			{
				return this._designMappingId; 
			}
			set
			{
				if (_designMappingId == value)
					return;
					
				this._designMappingId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DesignMappingId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionVolume property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TransactionVolume
		{
			get
			{
				return this._transactionVolume; 
			}
			set
			{
				if (_transactionVolume == value)
					return;
					
				this._transactionVolume = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionFrequency property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TransactionFrequency
		{
			get
			{
				return this._transactionFrequency; 
			}
			set
			{
				if (_transactionFrequency == value)
					return;
					
				this._transactionFrequency = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionFrequency");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RateOfVolumeChange property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RateOfVolumeChange
		{
			get
			{
				return this._rateOfVolumeChange; 
			}
			set
			{
				if (_rateOfVolumeChange == value)
					return;
					
				this._rateOfVolumeChange = value;
				this._isDirty = true;
				
				OnPropertyChanged("RateOfVolumeChange");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionDuration property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TransactionDuration
		{
			get
			{
				return this._transactionDuration; 
			}
			set
			{
				if (_transactionDuration == value)
					return;
					
				this._transactionDuration = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FromLocatedAtName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FromLocatedAtName
		{
			get
			{
				return this._fromLocatedAtName; 
			}
			set
			{
				if (_fromLocatedAtName == value)
					return;
					
				this._fromLocatedAtName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FromLocatedAtName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FromLocatedAtType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FromLocatedAtType
		{
			get
			{
				return this._fromLocatedAtType; 
			}
			set
			{
				if (_fromLocatedAtType == value)
					return;
					
				this._fromLocatedAtType = value;
				this._isDirty = true;
				
				OnPropertyChanged("FromLocatedAtType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ToLocatedAtName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ToLocatedAtName
		{
			get
			{
				return this._toLocatedAtName; 
			}
			set
			{
				if (_toLocatedAtName == value)
					return;
					
				this._toLocatedAtName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ToLocatedAtName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ToLocatedAtType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ToLocatedAtType
		{
			get
			{
				return this._toLocatedAtType; 
			}
			set
			{
				if (_toLocatedAtType == value)
					return;
					
				this._toLocatedAtType = value;
				this._isDirty = true;
				
				OnPropertyChanged("ToLocatedAtType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 WorkspaceId
		{
			get
			{
				return this._workspaceId; 
			}
			set
			{
				if (_workspaceId == value)
					return;
					
				this._workspaceId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GF_From property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 GfFrom
		{
			get
			{
				return this._gfFrom; 
			}
			set
			{
				if (_gfFrom == value)
					return;
					
				this._gfFrom = value;
				this._isDirty = true;
				
				OnPropertyChanged("GfFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GF_To property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 GfTo
		{
			get
			{
				return this._gfTo; 
			}
			set
			{
				if (_gfTo == value)
					return;
					
				this._gfTo = value;
				this._isDirty = true;
				
				OnPropertyChanged("GfTo");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_OID_Flows"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwOidFlowsBase Entity 
		///</summary>
		public virtual VwOidFlowsBase Copy()
		{
			//shallow copy entity
			VwOidFlows copy = new VwOidFlows();
				copy.FromPkid = this.FromPkid;
				copy.FromName = this.FromName;
				copy.FromType = this.FromType;
				copy.ToPkid = this.ToPkid;
				copy.ToName = this.ToName;
				copy.ToType = this.ToType;
				copy.DescriptionOfProcess = this.DescriptionOfProcess;
				copy.Sequence = this.Sequence;
				copy.FlowPkid = this.FlowPkid;
				copy.Conditions = this.Conditions;
				copy.Comments = this.Comments;
				copy.SafeNameClass = this.SafeNameClass;
				copy.DesignMappingName = this.DesignMappingName;
				copy.DesignMappingVersion = this.DesignMappingVersion;
				copy.DesignMappingId = this.DesignMappingId;
				copy.TransactionVolume = this.TransactionVolume;
				copy.TransactionFrequency = this.TransactionFrequency;
				copy.RateOfVolumeChange = this.RateOfVolumeChange;
				copy.TransactionDuration = this.TransactionDuration;
				copy.FromLocatedAtName = this.FromLocatedAtName;
				copy.FromLocatedAtType = this.FromLocatedAtType;
				copy.ToLocatedAtName = this.ToLocatedAtName;
				copy.ToLocatedAtType = this.ToLocatedAtType;
				copy.WorkspaceId = this.WorkspaceId;
				copy.GfFrom = this.GfFrom;
				copy.GfTo = this.GfTo;
			copy.AcceptChanges();
			return (VwOidFlows)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwOidFlowsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwOidFlowsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwOidFlowsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwOidFlowsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwOidFlowsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwOidFlowsBase Object1, VwOidFlowsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.FromPkid != Object2.FromPkid)
				equal = false;
			if (Object1.FromName != null && Object2.FromName != null )
			{
				if (Object1.FromName != Object2.FromName)
					equal = false;
			}
			else if (Object1.FromName == null ^ Object1.FromName == null )
			{
				equal = false;
			}
			if (Object1.FromType != null && Object2.FromType != null )
			{
				if (Object1.FromType != Object2.FromType)
					equal = false;
			}
			else if (Object1.FromType == null ^ Object1.FromType == null )
			{
				equal = false;
			}
			if (Object1.ToPkid != Object2.ToPkid)
				equal = false;
			if (Object1.ToName != null && Object2.ToName != null )
			{
				if (Object1.ToName != Object2.ToName)
					equal = false;
			}
			else if (Object1.ToName == null ^ Object1.ToName == null )
			{
				equal = false;
			}
			if (Object1.ToType != null && Object2.ToType != null )
			{
				if (Object1.ToType != Object2.ToType)
					equal = false;
			}
			else if (Object1.ToType == null ^ Object1.ToType == null )
			{
				equal = false;
			}
			if (Object1.DescriptionOfProcess != null && Object2.DescriptionOfProcess != null )
			{
				if (Object1.DescriptionOfProcess != Object2.DescriptionOfProcess)
					equal = false;
			}
			else if (Object1.DescriptionOfProcess == null ^ Object1.DescriptionOfProcess == null )
			{
				equal = false;
			}
			if (Object1.Sequence != null && Object2.Sequence != null )
			{
				if (Object1.Sequence != Object2.Sequence)
					equal = false;
			}
			else if (Object1.Sequence == null ^ Object1.Sequence == null )
			{
				equal = false;
			}
			if (Object1.FlowPkid != Object2.FlowPkid)
				equal = false;
			if (Object1.Conditions != null && Object2.Conditions != null )
			{
				if (Object1.Conditions != Object2.Conditions)
					equal = false;
			}
			else if (Object1.Conditions == null ^ Object1.Conditions == null )
			{
				equal = false;
			}
			if (Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object1.Comments == null )
			{
				equal = false;
			}
			if (Object1.SafeNameClass != null && Object2.SafeNameClass != null )
			{
				if (Object1.SafeNameClass != Object2.SafeNameClass)
					equal = false;
			}
			else if (Object1.SafeNameClass == null ^ Object1.SafeNameClass == null )
			{
				equal = false;
			}
			if (Object1.DesignMappingName != null && Object2.DesignMappingName != null )
			{
				if (Object1.DesignMappingName != Object2.DesignMappingName)
					equal = false;
			}
			else if (Object1.DesignMappingName == null ^ Object1.DesignMappingName == null )
			{
				equal = false;
			}
			if (Object1.DesignMappingVersion != null && Object2.DesignMappingVersion != null )
			{
				if (Object1.DesignMappingVersion != Object2.DesignMappingVersion)
					equal = false;
			}
			else if (Object1.DesignMappingVersion == null ^ Object1.DesignMappingVersion == null )
			{
				equal = false;
			}
			if (Object1.DesignMappingId != null && Object2.DesignMappingId != null )
			{
				if (Object1.DesignMappingId != Object2.DesignMappingId)
					equal = false;
			}
			else if (Object1.DesignMappingId == null ^ Object1.DesignMappingId == null )
			{
				equal = false;
			}
			if (Object1.TransactionVolume != null && Object2.TransactionVolume != null )
			{
				if (Object1.TransactionVolume != Object2.TransactionVolume)
					equal = false;
			}
			else if (Object1.TransactionVolume == null ^ Object1.TransactionVolume == null )
			{
				equal = false;
			}
			if (Object1.TransactionFrequency != null && Object2.TransactionFrequency != null )
			{
				if (Object1.TransactionFrequency != Object2.TransactionFrequency)
					equal = false;
			}
			else if (Object1.TransactionFrequency == null ^ Object1.TransactionFrequency == null )
			{
				equal = false;
			}
			if (Object1.RateOfVolumeChange != null && Object2.RateOfVolumeChange != null )
			{
				if (Object1.RateOfVolumeChange != Object2.RateOfVolumeChange)
					equal = false;
			}
			else if (Object1.RateOfVolumeChange == null ^ Object1.RateOfVolumeChange == null )
			{
				equal = false;
			}
			if (Object1.TransactionDuration != null && Object2.TransactionDuration != null )
			{
				if (Object1.TransactionDuration != Object2.TransactionDuration)
					equal = false;
			}
			else if (Object1.TransactionDuration == null ^ Object1.TransactionDuration == null )
			{
				equal = false;
			}
			if (Object1.FromLocatedAtName != null && Object2.FromLocatedAtName != null )
			{
				if (Object1.FromLocatedAtName != Object2.FromLocatedAtName)
					equal = false;
			}
			else if (Object1.FromLocatedAtName == null ^ Object1.FromLocatedAtName == null )
			{
				equal = false;
			}
			if (Object1.FromLocatedAtType != null && Object2.FromLocatedAtType != null )
			{
				if (Object1.FromLocatedAtType != Object2.FromLocatedAtType)
					equal = false;
			}
			else if (Object1.FromLocatedAtType == null ^ Object1.FromLocatedAtType == null )
			{
				equal = false;
			}
			if (Object1.ToLocatedAtName != null && Object2.ToLocatedAtName != null )
			{
				if (Object1.ToLocatedAtName != Object2.ToLocatedAtName)
					equal = false;
			}
			else if (Object1.ToLocatedAtName == null ^ Object1.ToLocatedAtName == null )
			{
				equal = false;
			}
			if (Object1.ToLocatedAtType != null && Object2.ToLocatedAtType != null )
			{
				if (Object1.ToLocatedAtType != Object2.ToLocatedAtType)
					equal = false;
			}
			else if (Object1.ToLocatedAtType == null ^ Object1.ToLocatedAtType == null )
			{
				equal = false;
			}
			if (Object1.WorkspaceId != Object2.WorkspaceId)
				equal = false;
			if (Object1.GfFrom != Object2.GfFrom)
				equal = false;
			if (Object1.GfTo != Object2.GfTo)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwOidFlows entity, string propertyName)
		{
			switch (propertyName)
			{
				case "FromPkid":
					return entity.FromPkid;
				case "FromName":
					return entity.FromName;
				case "FromType":
					return entity.FromType;
				case "ToPkid":
					return entity.ToPkid;
				case "ToName":
					return entity.ToName;
				case "ToType":
					return entity.ToType;
				case "DescriptionOfProcess":
					return entity.DescriptionOfProcess;
				case "Sequence":
					return entity.Sequence;
				case "FlowPkid":
					return entity.FlowPkid;
				case "Conditions":
					return entity.Conditions;
				case "Comments":
					return entity.Comments;
				case "SafeNameClass":
					return entity.SafeNameClass;
				case "DesignMappingName":
					return entity.DesignMappingName;
				case "DesignMappingVersion":
					return entity.DesignMappingVersion;
				case "DesignMappingId":
					return entity.DesignMappingId;
				case "TransactionVolume":
					return entity.TransactionVolume;
				case "TransactionFrequency":
					return entity.TransactionFrequency;
				case "RateOfVolumeChange":
					return entity.RateOfVolumeChange;
				case "TransactionDuration":
					return entity.TransactionDuration;
				case "FromLocatedAtName":
					return entity.FromLocatedAtName;
				case "FromLocatedAtType":
					return entity.FromLocatedAtType;
				case "ToLocatedAtName":
					return entity.ToLocatedAtName;
				case "ToLocatedAtType":
					return entity.ToLocatedAtType;
				case "WorkspaceId":
					return entity.WorkspaceId;
				case "GfFrom":
					return entity.GfFrom;
				case "GfTo":
					return entity.GfTo;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwOidFlows, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{27}{26}- FromPkid: {0}{26}- FromName: {1}{26}- FromType: {2}{26}- ToPkid: {3}{26}- ToName: {4}{26}- ToType: {5}{26}- DescriptionOfProcess: {6}{26}- Sequence: {7}{26}- FlowPkid: {8}{26}- Conditions: {9}{26}- Comments: {10}{26}- SafeNameClass: {11}{26}- DesignMappingName: {12}{26}- DesignMappingVersion: {13}{26}- DesignMappingId: {14}{26}- TransactionVolume: {15}{26}- TransactionFrequency: {16}{26}- RateOfVolumeChange: {17}{26}- TransactionDuration: {18}{26}- FromLocatedAtName: {19}{26}- FromLocatedAtType: {20}{26}- ToLocatedAtName: {21}{26}- ToLocatedAtType: {22}{26}- WorkspaceId: {23}{26}- GfFrom: {24}{26}- GfTo: {25}{26}", 
				this.FromPkid,
				(this.FromName == null) ? string.Empty : this.FromName.ToString(),
			     
				(this.FromType == null) ? string.Empty : this.FromType.ToString(),
			     
				this.ToPkid,
				(this.ToName == null) ? string.Empty : this.ToName.ToString(),
			     
				(this.ToType == null) ? string.Empty : this.ToType.ToString(),
			     
				(this.DescriptionOfProcess == null) ? string.Empty : this.DescriptionOfProcess.ToString(),
			     
				(this.Sequence == null) ? string.Empty : this.Sequence.ToString(),
			     
				this.FlowPkid,
				(this.Conditions == null) ? string.Empty : this.Conditions.ToString(),
			     
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
			     
				(this.SafeNameClass == null) ? string.Empty : this.SafeNameClass.ToString(),
			     
				(this.DesignMappingName == null) ? string.Empty : this.DesignMappingName.ToString(),
			     
				(this.DesignMappingVersion == null) ? string.Empty : this.DesignMappingVersion.ToString(),
			     
				(this.DesignMappingId == null) ? string.Empty : this.DesignMappingId.ToString(),
			     
				(this.TransactionVolume == null) ? string.Empty : this.TransactionVolume.ToString(),
			     
				(this.TransactionFrequency == null) ? string.Empty : this.TransactionFrequency.ToString(),
			     
				(this.RateOfVolumeChange == null) ? string.Empty : this.RateOfVolumeChange.ToString(),
			     
				(this.TransactionDuration == null) ? string.Empty : this.TransactionDuration.ToString(),
			     
				(this.FromLocatedAtName == null) ? string.Empty : this.FromLocatedAtName.ToString(),
			     
				(this.FromLocatedAtType == null) ? string.Empty : this.FromLocatedAtType.ToString(),
			     
				(this.ToLocatedAtName == null) ? string.Empty : this.ToLocatedAtName.ToString(),
			     
				(this.ToLocatedAtType == null) ? string.Empty : this.ToLocatedAtType.ToString(),
			     
				this.WorkspaceId,
				this.GfFrom,
				this.GfTo,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwOidFlows columns.
	/// </summary>
	[Serializable]
	public enum VwOidFlowsColumn
	{
		/// <summary>
		/// FromPKID : 
		/// </summary>
		[EnumTextValue("FromPKID")]
		[ColumnEnum("FromPKID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FromPkid,
		/// <summary>
		/// FromName : 
		/// </summary>
		[EnumTextValue("FromName")]
		[ColumnEnum("FromName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FromName,
		/// <summary>
		/// FromType : 
		/// </summary>
		[EnumTextValue("FromType")]
		[ColumnEnum("FromType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FromType,
		/// <summary>
		/// ToPKID : 
		/// </summary>
		[EnumTextValue("ToPKID")]
		[ColumnEnum("ToPKID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ToPkid,
		/// <summary>
		/// ToName : 
		/// </summary>
		[EnumTextValue("ToName")]
		[ColumnEnum("ToName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ToName,
		/// <summary>
		/// ToType : 
		/// </summary>
		[EnumTextValue("ToType")]
		[ColumnEnum("ToType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ToType,
		/// <summary>
		/// DescriptionOfProcess : 
		/// </summary>
		[EnumTextValue("DescriptionOfProcess")]
		[ColumnEnum("DescriptionOfProcess", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DescriptionOfProcess,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Sequence,
		/// <summary>
		/// FlowPKID : 
		/// </summary>
		[EnumTextValue("FlowPKID")]
		[ColumnEnum("FlowPKID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FlowPkid,
		/// <summary>
		/// Conditions : 
		/// </summary>
		[EnumTextValue("Conditions")]
		[ColumnEnum("Conditions", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Conditions,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("Comments")]
		[ColumnEnum("Comments", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Comments,
		/// <summary>
		/// Class : 
		/// </summary>
		[EnumTextValue("Class")]
		[ColumnEnum("Class", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SafeNameClass,
		/// <summary>
		/// DesignMappingName : 
		/// </summary>
		[EnumTextValue("DesignMappingName")]
		[ColumnEnum("DesignMappingName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DesignMappingName,
		/// <summary>
		/// DesignMappingVersion : 
		/// </summary>
		[EnumTextValue("DesignMappingVersion")]
		[ColumnEnum("DesignMappingVersion", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DesignMappingVersion,
		/// <summary>
		/// DesignMappingID : 
		/// </summary>
		[EnumTextValue("DesignMappingID")]
		[ColumnEnum("DesignMappingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DesignMappingId,
		/// <summary>
		/// TransactionVolume : 
		/// </summary>
		[EnumTextValue("TransactionVolume")]
		[ColumnEnum("TransactionVolume", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		TransactionVolume,
		/// <summary>
		/// TransactionFrequency : 
		/// </summary>
		[EnumTextValue("TransactionFrequency")]
		[ColumnEnum("TransactionFrequency", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		TransactionFrequency,
		/// <summary>
		/// RateOfVolumeChange : 
		/// </summary>
		[EnumTextValue("RateOfVolumeChange")]
		[ColumnEnum("RateOfVolumeChange", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		RateOfVolumeChange,
		/// <summary>
		/// TransactionDuration : 
		/// </summary>
		[EnumTextValue("TransactionDuration")]
		[ColumnEnum("TransactionDuration", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		TransactionDuration,
		/// <summary>
		/// FromLocatedAtName : 
		/// </summary>
		[EnumTextValue("FromLocatedAtName")]
		[ColumnEnum("FromLocatedAtName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FromLocatedAtName,
		/// <summary>
		/// FromLocatedAtType : 
		/// </summary>
		[EnumTextValue("FromLocatedAtType")]
		[ColumnEnum("FromLocatedAtType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FromLocatedAtType,
		/// <summary>
		/// ToLocatedAtName : 
		/// </summary>
		[EnumTextValue("ToLocatedAtName")]
		[ColumnEnum("ToLocatedAtName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ToLocatedAtName,
		/// <summary>
		/// ToLocatedAtType : 
		/// </summary>
		[EnumTextValue("ToLocatedAtType")]
		[ColumnEnum("ToLocatedAtType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ToLocatedAtType,
		/// <summary>
		/// WorkspaceID : 
		/// </summary>
		[EnumTextValue("WorkspaceID")]
		[ColumnEnum("WorkspaceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		WorkspaceId,
		/// <summary>
		/// GF_From : 
		/// </summary>
		[EnumTextValue("GF_From")]
		[ColumnEnum("GF_From", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		GfFrom,
		/// <summary>
		/// GF_To : 
		/// </summary>
		[EnumTextValue("GF_To")]
		[ColumnEnum("GF_To", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		GfTo
	}//End enum

} // end namespace
