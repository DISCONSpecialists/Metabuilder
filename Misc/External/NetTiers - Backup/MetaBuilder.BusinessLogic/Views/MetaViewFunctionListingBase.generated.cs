/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file METAViewFunctionListing.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'METAView_Function_Listing' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("METAViewFunctionListingBase")]
	public abstract partial class METAViewFunctionListingBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		private System.String		  _workspaceName = string.Empty;
		
		/// <summary>
		/// WorkspaceTypeID : 
		/// </summary>
		private System.Int32?		  _workspaceTypeID = null;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		private System.Int32		  _vCStatusID = (int)0;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Machine : 
		/// </summary>
		private System.String		  _machine = string.Empty;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		private System.String		  _vCMachineID = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = null;
		
		/// <summary>
		/// ContextualIndicator : 
		/// </summary>
		private System.String		  _contextualIndicator = null;
		
		/// <summary>
		/// FunctionCriticality : 
		/// </summary>
		private System.Int32?		  _functionCriticality = null;
		
		/// <summary>
		/// ManagementAbility : 
		/// </summary>
		private System.String		  _managementAbility = null;
		
		/// <summary>
		/// InfoAvailability : 
		/// </summary>
		private System.String		  _infoAvailability = null;
		
		/// <summary>
		/// LegalAspects : 
		/// </summary>
		private System.String		  _legalAspects = null;
		
		/// <summary>
		/// Technology : 
		/// </summary>
		private System.String		  _technology = null;
		
		/// <summary>
		/// Budget : 
		/// </summary>
		private System.String		  _budget = null;
		
		/// <summary>
		/// Energy : 
		/// </summary>
		private System.String		  _energy = null;
		
		/// <summary>
		/// RawMaterial : 
		/// </summary>
		private System.String		  _rawMaterial = null;
		
		/// <summary>
		/// SkillAvailability : 
		/// </summary>
		private System.String		  _skillAvailability = null;
		
		/// <summary>
		/// Efficiency : 
		/// </summary>
		private System.String		  _efficiency = null;
		
		/// <summary>
		/// Effectiveness : 
		/// </summary>
		private System.String		  _effectiveness = null;
		
		/// <summary>
		/// Manpower : 
		/// </summary>
		private System.String		  _manpower = null;
		
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		private System.String		  _customField1 = null;
		
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		private System.String		  _customField2 = null;
		
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		private System.String		  _customField3 = null;
		
		/// <summary>
		/// EnvironmentInd : 
		/// </summary>
		private System.String		  _environmentInd = null;
		
		/// <summary>
		/// GovernanceMech : 
		/// </summary>
		private System.String		  _governanceMech = null;
		
		/// <summary>
		/// CapitalAvailability : 
		/// </summary>
		private System.String		  _capitalAvailability = null;
		
		/// <summary>
		/// Competencies : 
		/// </summary>
		private System.String		  _competencies = null;
		
		/// <summary>
		/// Ethics : 
		/// </summary>
		private System.String		  _ethics = null;
		
		/// <summary>
		/// Facilities : 
		/// </summary>
		private System.String		  _facilities = null;
		
		/// <summary>
		/// ServicesUsage : 
		/// </summary>
		private System.String		  _servicesUsage = null;
		
		/// <summary>
		/// Equipment : 
		/// </summary>
		private System.String		  _equipment = null;
		
		/// <summary>
		/// TimeIndicator : 
		/// </summary>
		private System.String		  _timeIndicator = null;
		
		/// <summary>
		/// Effeciency : 
		/// </summary>
		private System.String		  _effeciency = null;
		
		/// <summary>
		/// Effectiviness : 
		/// </summary>
		private System.String		  _effectiviness = null;
		
		/// <summary>
		/// GapType : 
		/// </summary>
		private System.String		  _gapType = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="METAViewFunctionListingBase"/> instance.
		///</summary>
		public METAViewFunctionListingBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="METAViewFunctionListingBase"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeID"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_name"></param>
		///<param name="_contextualIndicator"></param>
		///<param name="_functionCriticality"></param>
		///<param name="_managementAbility"></param>
		///<param name="_infoAvailability"></param>
		///<param name="_legalAspects"></param>
		///<param name="_technology"></param>
		///<param name="_budget"></param>
		///<param name="_energy"></param>
		///<param name="_rawMaterial"></param>
		///<param name="_skillAvailability"></param>
		///<param name="_efficiency"></param>
		///<param name="_effectiveness"></param>
		///<param name="_manpower"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_environmentInd"></param>
		///<param name="_governanceMech"></param>
		///<param name="_capitalAvailability"></param>
		///<param name="_competencies"></param>
		///<param name="_ethics"></param>
		///<param name="_facilities"></param>
		///<param name="_servicesUsage"></param>
		///<param name="_equipment"></param>
		///<param name="_timeIndicator"></param>
		///<param name="_effeciency"></param>
		///<param name="_effectiviness"></param>
		///<param name="_gapType"></param>
		public METAViewFunctionListingBase(System.String _workspaceName, System.Int32? _workspaceTypeID, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _name, System.String _contextualIndicator, System.Int32? _functionCriticality, System.String _managementAbility, System.String _infoAvailability, System.String _legalAspects, System.String _technology, System.String _budget, System.String _energy, System.String _rawMaterial, System.String _skillAvailability, System.String _efficiency, System.String _effectiveness, System.String _manpower, System.String _customField1, System.String _customField2, System.String _customField3, System.String _environmentInd, System.String _governanceMech, System.String _capitalAvailability, System.String _competencies, System.String _ethics, System.String _facilities, System.String _servicesUsage, System.String _equipment, System.String _timeIndicator, System.String _effeciency, System.String _effectiviness, System.String _gapType)
		{
			this._workspaceName = _workspaceName;
			this._workspaceTypeID = _workspaceTypeID;
			this._vCStatusID = _vCStatusID;
			this._pkid = _pkid;
			this._machine = _machine;
			this._vCMachineID = _vCMachineID;
			this._name = _name;
			this._contextualIndicator = _contextualIndicator;
			this._functionCriticality = _functionCriticality;
			this._managementAbility = _managementAbility;
			this._infoAvailability = _infoAvailability;
			this._legalAspects = _legalAspects;
			this._technology = _technology;
			this._budget = _budget;
			this._energy = _energy;
			this._rawMaterial = _rawMaterial;
			this._skillAvailability = _skillAvailability;
			this._efficiency = _efficiency;
			this._effectiveness = _effectiveness;
			this._manpower = _manpower;
			this._customField1 = _customField1;
			this._customField2 = _customField2;
			this._customField3 = _customField3;
			this._environmentInd = _environmentInd;
			this._governanceMech = _governanceMech;
			this._capitalAvailability = _capitalAvailability;
			this._competencies = _competencies;
			this._ethics = _ethics;
			this._facilities = _facilities;
			this._servicesUsage = _servicesUsage;
			this._equipment = _equipment;
			this._timeIndicator = _timeIndicator;
			this._effeciency = _effeciency;
			this._effectiviness = _effectiviness;
			this._gapType = _gapType;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="METAViewFunctionListing"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeID"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_name"></param>
		///<param name="_contextualIndicator"></param>
		///<param name="_functionCriticality"></param>
		///<param name="_managementAbility"></param>
		///<param name="_infoAvailability"></param>
		///<param name="_legalAspects"></param>
		///<param name="_technology"></param>
		///<param name="_budget"></param>
		///<param name="_energy"></param>
		///<param name="_rawMaterial"></param>
		///<param name="_skillAvailability"></param>
		///<param name="_efficiency"></param>
		///<param name="_effectiveness"></param>
		///<param name="_manpower"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_environmentInd"></param>
		///<param name="_governanceMech"></param>
		///<param name="_capitalAvailability"></param>
		///<param name="_competencies"></param>
		///<param name="_ethics"></param>
		///<param name="_facilities"></param>
		///<param name="_servicesUsage"></param>
		///<param name="_equipment"></param>
		///<param name="_timeIndicator"></param>
		///<param name="_effeciency"></param>
		///<param name="_effectiviness"></param>
		///<param name="_gapType"></param>
		public static METAViewFunctionListing CreateMETAViewFunctionListing(System.String _workspaceName, System.Int32? _workspaceTypeID, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _name, System.String _contextualIndicator, System.Int32? _functionCriticality, System.String _managementAbility, System.String _infoAvailability, System.String _legalAspects, System.String _technology, System.String _budget, System.String _energy, System.String _rawMaterial, System.String _skillAvailability, System.String _efficiency, System.String _effectiveness, System.String _manpower, System.String _customField1, System.String _customField2, System.String _customField3, System.String _environmentInd, System.String _governanceMech, System.String _capitalAvailability, System.String _competencies, System.String _ethics, System.String _facilities, System.String _servicesUsage, System.String _equipment, System.String _timeIndicator, System.String _effeciency, System.String _effectiviness, System.String _gapType)
		{
			METAViewFunctionListing newMETAViewFunctionListing = new METAViewFunctionListing();
			newMETAViewFunctionListing.WorkspaceName = _workspaceName;
			newMETAViewFunctionListing.WorkspaceTypeID = _workspaceTypeID;
			newMETAViewFunctionListing.VCStatusID = _vCStatusID;
			newMETAViewFunctionListing.Pkid = _pkid;
			newMETAViewFunctionListing.Machine = _machine;
			newMETAViewFunctionListing.VCMachineID = _vCMachineID;
			newMETAViewFunctionListing.Name = _name;
			newMETAViewFunctionListing.ContextualIndicator = _contextualIndicator;
			newMETAViewFunctionListing.FunctionCriticality = _functionCriticality;
			newMETAViewFunctionListing.ManagementAbility = _managementAbility;
			newMETAViewFunctionListing.InfoAvailability = _infoAvailability;
			newMETAViewFunctionListing.LegalAspects = _legalAspects;
			newMETAViewFunctionListing.Technology = _technology;
			newMETAViewFunctionListing.Budget = _budget;
			newMETAViewFunctionListing.Energy = _energy;
			newMETAViewFunctionListing.RawMaterial = _rawMaterial;
			newMETAViewFunctionListing.SkillAvailability = _skillAvailability;
			newMETAViewFunctionListing.Efficiency = _efficiency;
			newMETAViewFunctionListing.Effectiveness = _effectiveness;
			newMETAViewFunctionListing.Manpower = _manpower;
			newMETAViewFunctionListing.CustomField1 = _customField1;
			newMETAViewFunctionListing.CustomField2 = _customField2;
			newMETAViewFunctionListing.CustomField3 = _customField3;
			newMETAViewFunctionListing.EnvironmentInd = _environmentInd;
			newMETAViewFunctionListing.GovernanceMech = _governanceMech;
			newMETAViewFunctionListing.CapitalAvailability = _capitalAvailability;
			newMETAViewFunctionListing.Competencies = _competencies;
			newMETAViewFunctionListing.Ethics = _ethics;
			newMETAViewFunctionListing.Facilities = _facilities;
			newMETAViewFunctionListing.ServicesUsage = _servicesUsage;
			newMETAViewFunctionListing.Equipment = _equipment;
			newMETAViewFunctionListing.TimeIndicator = _timeIndicator;
			newMETAViewFunctionListing.Effeciency = _effeciency;
			newMETAViewFunctionListing.Effectiviness = _effectiviness;
			newMETAViewFunctionListing.GapType = _gapType;
			return newMETAViewFunctionListing;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this._workspaceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WorkspaceName does not allow null values.");
				if (_workspaceName == value)
					return;
					
				this._workspaceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? WorkspaceTypeID
		{
			get
			{
				return this._workspaceTypeID; 
			}
			set
			{
				if (_workspaceTypeID == value && WorkspaceTypeID != null )
					return;
					
				this._workspaceTypeID = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this._vCStatusID; 
			}
			set
			{
				if (_vCStatusID == value)
					return;
					
				this._vCStatusID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Machine
		{
			get
			{
				return this._machine; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Machine does not allow null values.");
				if (_machine == value)
					return;
					
				this._machine = value;
				this._isDirty = true;
				
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this._vCMachineID; 
			}
			set
			{
				if (_vCMachineID == value)
					return;
					
				this._vCMachineID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ContextualIndicator property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ContextualIndicator
		{
			get
			{
				return this._contextualIndicator; 
			}
			set
			{
				if (_contextualIndicator == value)
					return;
					
				this._contextualIndicator = value;
				this._isDirty = true;
				
				OnPropertyChanged("ContextualIndicator");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FunctionCriticality property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFunctionCriticalityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? FunctionCriticality
		{
			get
			{
				return this._functionCriticality; 
			}
			set
			{
				if (_functionCriticality == value && FunctionCriticality != null )
					return;
					
				this._functionCriticality = value;
				this._isDirty = true;
				
				OnPropertyChanged("FunctionCriticality");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ManagementAbility property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ManagementAbility
		{
			get
			{
				return this._managementAbility; 
			}
			set
			{
				if (_managementAbility == value)
					return;
					
				this._managementAbility = value;
				this._isDirty = true;
				
				OnPropertyChanged("ManagementAbility");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InfoAvailability property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String InfoAvailability
		{
			get
			{
				return this._infoAvailability; 
			}
			set
			{
				if (_infoAvailability == value)
					return;
					
				this._infoAvailability = value;
				this._isDirty = true;
				
				OnPropertyChanged("InfoAvailability");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LegalAspects property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LegalAspects
		{
			get
			{
				return this._legalAspects; 
			}
			set
			{
				if (_legalAspects == value)
					return;
					
				this._legalAspects = value;
				this._isDirty = true;
				
				OnPropertyChanged("LegalAspects");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Technology property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Technology
		{
			get
			{
				return this._technology; 
			}
			set
			{
				if (_technology == value)
					return;
					
				this._technology = value;
				this._isDirty = true;
				
				OnPropertyChanged("Technology");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Budget property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Budget
		{
			get
			{
				return this._budget; 
			}
			set
			{
				if (_budget == value)
					return;
					
				this._budget = value;
				this._isDirty = true;
				
				OnPropertyChanged("Budget");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Energy property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Energy
		{
			get
			{
				return this._energy; 
			}
			set
			{
				if (_energy == value)
					return;
					
				this._energy = value;
				this._isDirty = true;
				
				OnPropertyChanged("Energy");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RawMaterial property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RawMaterial
		{
			get
			{
				return this._rawMaterial; 
			}
			set
			{
				if (_rawMaterial == value)
					return;
					
				this._rawMaterial = value;
				this._isDirty = true;
				
				OnPropertyChanged("RawMaterial");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SkillAvailability property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SkillAvailability
		{
			get
			{
				return this._skillAvailability; 
			}
			set
			{
				if (_skillAvailability == value)
					return;
					
				this._skillAvailability = value;
				this._isDirty = true;
				
				OnPropertyChanged("SkillAvailability");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Efficiency property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Efficiency
		{
			get
			{
				return this._efficiency; 
			}
			set
			{
				if (_efficiency == value)
					return;
					
				this._efficiency = value;
				this._isDirty = true;
				
				OnPropertyChanged("Efficiency");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Effectiveness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Effectiveness
		{
			get
			{
				return this._effectiveness; 
			}
			set
			{
				if (_effectiveness == value)
					return;
					
				this._effectiveness = value;
				this._isDirty = true;
				
				OnPropertyChanged("Effectiveness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Manpower property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Manpower
		{
			get
			{
				return this._manpower; 
			}
			set
			{
				if (_manpower == value)
					return;
					
				this._manpower = value;
				this._isDirty = true;
				
				OnPropertyChanged("Manpower");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField1
		{
			get
			{
				return this._customField1; 
			}
			set
			{
				if (_customField1 == value)
					return;
					
				this._customField1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField2
		{
			get
			{
				return this._customField2; 
			}
			set
			{
				if (_customField2 == value)
					return;
					
				this._customField2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField3
		{
			get
			{
				return this._customField3; 
			}
			set
			{
				if (_customField3 == value)
					return;
					
				this._customField3 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField3");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EnvironmentInd property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EnvironmentInd
		{
			get
			{
				return this._environmentInd; 
			}
			set
			{
				if (_environmentInd == value)
					return;
					
				this._environmentInd = value;
				this._isDirty = true;
				
				OnPropertyChanged("EnvironmentInd");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GovernanceMech property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GovernanceMech
		{
			get
			{
				return this._governanceMech; 
			}
			set
			{
				if (_governanceMech == value)
					return;
					
				this._governanceMech = value;
				this._isDirty = true;
				
				OnPropertyChanged("GovernanceMech");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CapitalAvailability property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CapitalAvailability
		{
			get
			{
				return this._capitalAvailability; 
			}
			set
			{
				if (_capitalAvailability == value)
					return;
					
				this._capitalAvailability = value;
				this._isDirty = true;
				
				OnPropertyChanged("CapitalAvailability");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Competencies property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Competencies
		{
			get
			{
				return this._competencies; 
			}
			set
			{
				if (_competencies == value)
					return;
					
				this._competencies = value;
				this._isDirty = true;
				
				OnPropertyChanged("Competencies");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Ethics property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Ethics
		{
			get
			{
				return this._ethics; 
			}
			set
			{
				if (_ethics == value)
					return;
					
				this._ethics = value;
				this._isDirty = true;
				
				OnPropertyChanged("Ethics");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Facilities property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Facilities
		{
			get
			{
				return this._facilities; 
			}
			set
			{
				if (_facilities == value)
					return;
					
				this._facilities = value;
				this._isDirty = true;
				
				OnPropertyChanged("Facilities");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ServicesUsage property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ServicesUsage
		{
			get
			{
				return this._servicesUsage; 
			}
			set
			{
				if (_servicesUsage == value)
					return;
					
				this._servicesUsage = value;
				this._isDirty = true;
				
				OnPropertyChanged("ServicesUsage");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Equipment property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Equipment
		{
			get
			{
				return this._equipment; 
			}
			set
			{
				if (_equipment == value)
					return;
					
				this._equipment = value;
				this._isDirty = true;
				
				OnPropertyChanged("Equipment");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TimeIndicator property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TimeIndicator
		{
			get
			{
				return this._timeIndicator; 
			}
			set
			{
				if (_timeIndicator == value)
					return;
					
				this._timeIndicator = value;
				this._isDirty = true;
				
				OnPropertyChanged("TimeIndicator");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Effeciency property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Effeciency
		{
			get
			{
				return this._effeciency; 
			}
			set
			{
				if (_effeciency == value)
					return;
					
				this._effeciency = value;
				this._isDirty = true;
				
				OnPropertyChanged("Effeciency");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Effectiviness property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Effectiviness
		{
			get
			{
				return this._effectiviness; 
			}
			set
			{
				if (_effectiviness == value)
					return;
					
				this._effectiviness = value;
				this._isDirty = true;
				
				OnPropertyChanged("Effectiviness");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GapType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GapType
		{
			get
			{
				return this._gapType; 
			}
			set
			{
				if (_gapType == value)
					return;
					
				this._gapType = value;
				this._isDirty = true;
				
				OnPropertyChanged("GapType");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "METAView_Function_Listing"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed METAViewFunctionListingBase Entity 
		///</summary>
		public virtual METAViewFunctionListingBase Copy()
		{
			//shallow copy entity
			METAViewFunctionListing copy = new METAViewFunctionListing();
				copy.WorkspaceName = this.WorkspaceName;
				copy.WorkspaceTypeID = this.WorkspaceTypeID;
				copy.VCStatusID = this.VCStatusID;
				copy.Pkid = this.Pkid;
				copy.Machine = this.Machine;
				copy.VCMachineID = this.VCMachineID;
				copy.Name = this.Name;
				copy.ContextualIndicator = this.ContextualIndicator;
				copy.FunctionCriticality = this.FunctionCriticality;
				copy.ManagementAbility = this.ManagementAbility;
				copy.InfoAvailability = this.InfoAvailability;
				copy.LegalAspects = this.LegalAspects;
				copy.Technology = this.Technology;
				copy.Budget = this.Budget;
				copy.Energy = this.Energy;
				copy.RawMaterial = this.RawMaterial;
				copy.SkillAvailability = this.SkillAvailability;
				copy.Efficiency = this.Efficiency;
				copy.Effectiveness = this.Effectiveness;
				copy.Manpower = this.Manpower;
				copy.CustomField1 = this.CustomField1;
				copy.CustomField2 = this.CustomField2;
				copy.CustomField3 = this.CustomField3;
				copy.EnvironmentInd = this.EnvironmentInd;
				copy.GovernanceMech = this.GovernanceMech;
				copy.CapitalAvailability = this.CapitalAvailability;
				copy.Competencies = this.Competencies;
				copy.Ethics = this.Ethics;
				copy.Facilities = this.Facilities;
				copy.ServicesUsage = this.ServicesUsage;
				copy.Equipment = this.Equipment;
				copy.TimeIndicator = this.TimeIndicator;
				copy.Effeciency = this.Effeciency;
				copy.Effectiviness = this.Effectiviness;
				copy.GapType = this.GapType;
			copy.AcceptChanges();
			return (METAViewFunctionListing)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="METAViewFunctionListingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(METAViewFunctionListingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="METAViewFunctionListingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="METAViewFunctionListingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="METAViewFunctionListingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(METAViewFunctionListingBase Object1, METAViewFunctionListingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.WorkspaceTypeID != null && Object2.WorkspaceTypeID != null )
			{
				if (Object1.WorkspaceTypeID != Object2.WorkspaceTypeID)
					equal = false;
			}
			else if (Object1.WorkspaceTypeID == null ^ Object1.WorkspaceTypeID == null )
			{
				equal = false;
			}
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if (Object1.Pkid != Object2.Pkid)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object1.VCMachineID == null )
			{
				equal = false;
			}
			if (Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.ContextualIndicator != null && Object2.ContextualIndicator != null )
			{
				if (Object1.ContextualIndicator != Object2.ContextualIndicator)
					equal = false;
			}
			else if (Object1.ContextualIndicator == null ^ Object1.ContextualIndicator == null )
			{
				equal = false;
			}
			if (Object1.FunctionCriticality != null && Object2.FunctionCriticality != null )
			{
				if (Object1.FunctionCriticality != Object2.FunctionCriticality)
					equal = false;
			}
			else if (Object1.FunctionCriticality == null ^ Object1.FunctionCriticality == null )
			{
				equal = false;
			}
			if (Object1.ManagementAbility != null && Object2.ManagementAbility != null )
			{
				if (Object1.ManagementAbility != Object2.ManagementAbility)
					equal = false;
			}
			else if (Object1.ManagementAbility == null ^ Object1.ManagementAbility == null )
			{
				equal = false;
			}
			if (Object1.InfoAvailability != null && Object2.InfoAvailability != null )
			{
				if (Object1.InfoAvailability != Object2.InfoAvailability)
					equal = false;
			}
			else if (Object1.InfoAvailability == null ^ Object1.InfoAvailability == null )
			{
				equal = false;
			}
			if (Object1.LegalAspects != null && Object2.LegalAspects != null )
			{
				if (Object1.LegalAspects != Object2.LegalAspects)
					equal = false;
			}
			else if (Object1.LegalAspects == null ^ Object1.LegalAspects == null )
			{
				equal = false;
			}
			if (Object1.Technology != null && Object2.Technology != null )
			{
				if (Object1.Technology != Object2.Technology)
					equal = false;
			}
			else if (Object1.Technology == null ^ Object1.Technology == null )
			{
				equal = false;
			}
			if (Object1.Budget != null && Object2.Budget != null )
			{
				if (Object1.Budget != Object2.Budget)
					equal = false;
			}
			else if (Object1.Budget == null ^ Object1.Budget == null )
			{
				equal = false;
			}
			if (Object1.Energy != null && Object2.Energy != null )
			{
				if (Object1.Energy != Object2.Energy)
					equal = false;
			}
			else if (Object1.Energy == null ^ Object1.Energy == null )
			{
				equal = false;
			}
			if (Object1.RawMaterial != null && Object2.RawMaterial != null )
			{
				if (Object1.RawMaterial != Object2.RawMaterial)
					equal = false;
			}
			else if (Object1.RawMaterial == null ^ Object1.RawMaterial == null )
			{
				equal = false;
			}
			if (Object1.SkillAvailability != null && Object2.SkillAvailability != null )
			{
				if (Object1.SkillAvailability != Object2.SkillAvailability)
					equal = false;
			}
			else if (Object1.SkillAvailability == null ^ Object1.SkillAvailability == null )
			{
				equal = false;
			}
			if (Object1.Efficiency != null && Object2.Efficiency != null )
			{
				if (Object1.Efficiency != Object2.Efficiency)
					equal = false;
			}
			else if (Object1.Efficiency == null ^ Object1.Efficiency == null )
			{
				equal = false;
			}
			if (Object1.Effectiveness != null && Object2.Effectiveness != null )
			{
				if (Object1.Effectiveness != Object2.Effectiveness)
					equal = false;
			}
			else if (Object1.Effectiveness == null ^ Object1.Effectiveness == null )
			{
				equal = false;
			}
			if (Object1.Manpower != null && Object2.Manpower != null )
			{
				if (Object1.Manpower != Object2.Manpower)
					equal = false;
			}
			else if (Object1.Manpower == null ^ Object1.Manpower == null )
			{
				equal = false;
			}
			if (Object1.CustomField1 != null && Object2.CustomField1 != null )
			{
				if (Object1.CustomField1 != Object2.CustomField1)
					equal = false;
			}
			else if (Object1.CustomField1 == null ^ Object1.CustomField1 == null )
			{
				equal = false;
			}
			if (Object1.CustomField2 != null && Object2.CustomField2 != null )
			{
				if (Object1.CustomField2 != Object2.CustomField2)
					equal = false;
			}
			else if (Object1.CustomField2 == null ^ Object1.CustomField2 == null )
			{
				equal = false;
			}
			if (Object1.CustomField3 != null && Object2.CustomField3 != null )
			{
				if (Object1.CustomField3 != Object2.CustomField3)
					equal = false;
			}
			else if (Object1.CustomField3 == null ^ Object1.CustomField3 == null )
			{
				equal = false;
			}
			if (Object1.EnvironmentInd != null && Object2.EnvironmentInd != null )
			{
				if (Object1.EnvironmentInd != Object2.EnvironmentInd)
					equal = false;
			}
			else if (Object1.EnvironmentInd == null ^ Object1.EnvironmentInd == null )
			{
				equal = false;
			}
			if (Object1.GovernanceMech != null && Object2.GovernanceMech != null )
			{
				if (Object1.GovernanceMech != Object2.GovernanceMech)
					equal = false;
			}
			else if (Object1.GovernanceMech == null ^ Object1.GovernanceMech == null )
			{
				equal = false;
			}
			if (Object1.CapitalAvailability != null && Object2.CapitalAvailability != null )
			{
				if (Object1.CapitalAvailability != Object2.CapitalAvailability)
					equal = false;
			}
			else if (Object1.CapitalAvailability == null ^ Object1.CapitalAvailability == null )
			{
				equal = false;
			}
			if (Object1.Competencies != null && Object2.Competencies != null )
			{
				if (Object1.Competencies != Object2.Competencies)
					equal = false;
			}
			else if (Object1.Competencies == null ^ Object1.Competencies == null )
			{
				equal = false;
			}
			if (Object1.Ethics != null && Object2.Ethics != null )
			{
				if (Object1.Ethics != Object2.Ethics)
					equal = false;
			}
			else if (Object1.Ethics == null ^ Object1.Ethics == null )
			{
				equal = false;
			}
			if (Object1.Facilities != null && Object2.Facilities != null )
			{
				if (Object1.Facilities != Object2.Facilities)
					equal = false;
			}
			else if (Object1.Facilities == null ^ Object1.Facilities == null )
			{
				equal = false;
			}
			if (Object1.ServicesUsage != null && Object2.ServicesUsage != null )
			{
				if (Object1.ServicesUsage != Object2.ServicesUsage)
					equal = false;
			}
			else if (Object1.ServicesUsage == null ^ Object1.ServicesUsage == null )
			{
				equal = false;
			}
			if (Object1.Equipment != null && Object2.Equipment != null )
			{
				if (Object1.Equipment != Object2.Equipment)
					equal = false;
			}
			else if (Object1.Equipment == null ^ Object1.Equipment == null )
			{
				equal = false;
			}
			if (Object1.TimeIndicator != null && Object2.TimeIndicator != null )
			{
				if (Object1.TimeIndicator != Object2.TimeIndicator)
					equal = false;
			}
			else if (Object1.TimeIndicator == null ^ Object1.TimeIndicator == null )
			{
				equal = false;
			}
			if (Object1.Effeciency != null && Object2.Effeciency != null )
			{
				if (Object1.Effeciency != Object2.Effeciency)
					equal = false;
			}
			else if (Object1.Effeciency == null ^ Object1.Effeciency == null )
			{
				equal = false;
			}
			if (Object1.Effectiviness != null && Object2.Effectiviness != null )
			{
				if (Object1.Effectiviness != Object2.Effectiviness)
					equal = false;
			}
			else if (Object1.Effectiviness == null ^ Object1.Effectiviness == null )
			{
				equal = false;
			}
			if (Object1.GapType != null && Object2.GapType != null )
			{
				if (Object1.GapType != Object2.GapType)
					equal = false;
			}
			else if (Object1.GapType == null ^ Object1.GapType == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(METAViewFunctionListing entity, string propertyName)
		{
			switch (propertyName)
			{
				case "WorkspaceName":
					return entity.WorkspaceName;
				case "WorkspaceTypeID":
					return entity.WorkspaceTypeID;
				case "VCStatusID":
					return entity.VCStatusID;
				case "Pkid":
					return entity.Pkid;
				case "Machine":
					return entity.Machine;
				case "VCMachineID":
					return entity.VCMachineID;
				case "Name":
					return entity.Name;
				case "ContextualIndicator":
					return entity.ContextualIndicator;
				case "FunctionCriticality":
					return entity.FunctionCriticality;
				case "ManagementAbility":
					return entity.ManagementAbility;
				case "InfoAvailability":
					return entity.InfoAvailability;
				case "LegalAspects":
					return entity.LegalAspects;
				case "Technology":
					return entity.Technology;
				case "Budget":
					return entity.Budget;
				case "Energy":
					return entity.Energy;
				case "RawMaterial":
					return entity.RawMaterial;
				case "SkillAvailability":
					return entity.SkillAvailability;
				case "Efficiency":
					return entity.Efficiency;
				case "Effectiveness":
					return entity.Effectiveness;
				case "Manpower":
					return entity.Manpower;
				case "CustomField1":
					return entity.CustomField1;
				case "CustomField2":
					return entity.CustomField2;
				case "CustomField3":
					return entity.CustomField3;
				case "EnvironmentInd":
					return entity.EnvironmentInd;
				case "GovernanceMech":
					return entity.GovernanceMech;
				case "CapitalAvailability":
					return entity.CapitalAvailability;
				case "Competencies":
					return entity.Competencies;
				case "Ethics":
					return entity.Ethics;
				case "Facilities":
					return entity.Facilities;
				case "ServicesUsage":
					return entity.ServicesUsage;
				case "Equipment":
					return entity.Equipment;
				case "TimeIndicator":
					return entity.TimeIndicator;
				case "Effeciency":
					return entity.Effeciency;
				case "Effectiviness":
					return entity.Effectiviness;
				case "GapType":
					return entity.GapType;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as METAViewFunctionListing, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{36}{35}- WorkspaceName: {0}{35}- WorkspaceTypeID: {1}{35}- VCStatusID: {2}{35}- Pkid: {3}{35}- Machine: {4}{35}- VCMachineID: {5}{35}- Name: {6}{35}- ContextualIndicator: {7}{35}- FunctionCriticality: {8}{35}- ManagementAbility: {9}{35}- InfoAvailability: {10}{35}- LegalAspects: {11}{35}- Technology: {12}{35}- Budget: {13}{35}- Energy: {14}{35}- RawMaterial: {15}{35}- SkillAvailability: {16}{35}- Efficiency: {17}{35}- Effectiveness: {18}{35}- Manpower: {19}{35}- CustomField1: {20}{35}- CustomField2: {21}{35}- CustomField3: {22}{35}- EnvironmentInd: {23}{35}- GovernanceMech: {24}{35}- CapitalAvailability: {25}{35}- Competencies: {26}{35}- Ethics: {27}{35}- Facilities: {28}{35}- ServicesUsage: {29}{35}- Equipment: {30}{35}- TimeIndicator: {31}{35}- Effeciency: {32}{35}- Effectiviness: {33}{35}- GapType: {34}{35}", 
				this.WorkspaceName,
				(this.WorkspaceTypeID == null) ? string.Empty : this.WorkspaceTypeID.ToString(),
			     
				this.VCStatusID,
				this.Pkid,
				this.Machine,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
			     
				(this.Name == null) ? string.Empty : this.Name.ToString(),
			     
				(this.ContextualIndicator == null) ? string.Empty : this.ContextualIndicator.ToString(),
			     
				(this.FunctionCriticality == null) ? string.Empty : this.FunctionCriticality.ToString(),
			     
				(this.ManagementAbility == null) ? string.Empty : this.ManagementAbility.ToString(),
			     
				(this.InfoAvailability == null) ? string.Empty : this.InfoAvailability.ToString(),
			     
				(this.LegalAspects == null) ? string.Empty : this.LegalAspects.ToString(),
			     
				(this.Technology == null) ? string.Empty : this.Technology.ToString(),
			     
				(this.Budget == null) ? string.Empty : this.Budget.ToString(),
			     
				(this.Energy == null) ? string.Empty : this.Energy.ToString(),
			     
				(this.RawMaterial == null) ? string.Empty : this.RawMaterial.ToString(),
			     
				(this.SkillAvailability == null) ? string.Empty : this.SkillAvailability.ToString(),
			     
				(this.Efficiency == null) ? string.Empty : this.Efficiency.ToString(),
			     
				(this.Effectiveness == null) ? string.Empty : this.Effectiveness.ToString(),
			     
				(this.Manpower == null) ? string.Empty : this.Manpower.ToString(),
			     
				(this.CustomField1 == null) ? string.Empty : this.CustomField1.ToString(),
			     
				(this.CustomField2 == null) ? string.Empty : this.CustomField2.ToString(),
			     
				(this.CustomField3 == null) ? string.Empty : this.CustomField3.ToString(),
			     
				(this.EnvironmentInd == null) ? string.Empty : this.EnvironmentInd.ToString(),
			     
				(this.GovernanceMech == null) ? string.Empty : this.GovernanceMech.ToString(),
			     
				(this.CapitalAvailability == null) ? string.Empty : this.CapitalAvailability.ToString(),
			     
				(this.Competencies == null) ? string.Empty : this.Competencies.ToString(),
			     
				(this.Ethics == null) ? string.Empty : this.Ethics.ToString(),
			     
				(this.Facilities == null) ? string.Empty : this.Facilities.ToString(),
			     
				(this.ServicesUsage == null) ? string.Empty : this.ServicesUsage.ToString(),
			     
				(this.Equipment == null) ? string.Empty : this.Equipment.ToString(),
			     
				(this.TimeIndicator == null) ? string.Empty : this.TimeIndicator.ToString(),
			     
				(this.Effeciency == null) ? string.Empty : this.Effeciency.ToString(),
			     
				(this.Effectiviness == null) ? string.Empty : this.Effectiviness.ToString(),
			     
				(this.GapType == null) ? string.Empty : this.GapType.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the METAViewFunctionListing columns.
	/// </summary>
	[Serializable]
	public enum METAViewFunctionListingColumn
	{
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName,
		/// <summary>
		/// WorkspaceTypeID : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeID")]
		[ColumnEnum("WorkspaceTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeID,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Pkid,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Machine,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Name,
		/// <summary>
		/// ContextualIndicator : 
		/// </summary>
		[EnumTextValue("ContextualIndicator")]
		[ColumnEnum("ContextualIndicator", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ContextualIndicator,
		/// <summary>
		/// FunctionCriticality : 
		/// </summary>
		[EnumTextValue("FunctionCriticality")]
		[ColumnEnum("FunctionCriticality", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FunctionCriticality,
		/// <summary>
		/// ManagementAbility : 
		/// </summary>
		[EnumTextValue("ManagementAbility")]
		[ColumnEnum("ManagementAbility", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ManagementAbility,
		/// <summary>
		/// InfoAvailability : 
		/// </summary>
		[EnumTextValue("InfoAvailability")]
		[ColumnEnum("InfoAvailability", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		InfoAvailability,
		/// <summary>
		/// LegalAspects : 
		/// </summary>
		[EnumTextValue("LegalAspects")]
		[ColumnEnum("LegalAspects", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LegalAspects,
		/// <summary>
		/// Technology : 
		/// </summary>
		[EnumTextValue("Technology")]
		[ColumnEnum("Technology", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Technology,
		/// <summary>
		/// Budget : 
		/// </summary>
		[EnumTextValue("Budget")]
		[ColumnEnum("Budget", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Budget,
		/// <summary>
		/// Energy : 
		/// </summary>
		[EnumTextValue("Energy")]
		[ColumnEnum("Energy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Energy,
		/// <summary>
		/// RawMaterial : 
		/// </summary>
		[EnumTextValue("RawMaterial")]
		[ColumnEnum("RawMaterial", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		RawMaterial,
		/// <summary>
		/// SkillAvailability : 
		/// </summary>
		[EnumTextValue("SkillAvailability")]
		[ColumnEnum("SkillAvailability", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SkillAvailability,
		/// <summary>
		/// Efficiency : 
		/// </summary>
		[EnumTextValue("Efficiency")]
		[ColumnEnum("Efficiency", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Efficiency,
		/// <summary>
		/// Effectiveness : 
		/// </summary>
		[EnumTextValue("Effectiveness")]
		[ColumnEnum("Effectiveness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Effectiveness,
		/// <summary>
		/// Manpower : 
		/// </summary>
		[EnumTextValue("Manpower")]
		[ColumnEnum("Manpower", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Manpower,
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		[EnumTextValue("CustomField1")]
		[ColumnEnum("CustomField1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField1,
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		[EnumTextValue("CustomField2")]
		[ColumnEnum("CustomField2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField2,
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		[EnumTextValue("CustomField3")]
		[ColumnEnum("CustomField3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField3,
		/// <summary>
		/// EnvironmentInd : 
		/// </summary>
		[EnumTextValue("EnvironmentInd")]
		[ColumnEnum("EnvironmentInd", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		EnvironmentInd,
		/// <summary>
		/// GovernanceMech : 
		/// </summary>
		[EnumTextValue("GovernanceMech")]
		[ColumnEnum("GovernanceMech", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GovernanceMech,
		/// <summary>
		/// CapitalAvailability : 
		/// </summary>
		[EnumTextValue("CapitalAvailability")]
		[ColumnEnum("CapitalAvailability", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CapitalAvailability,
		/// <summary>
		/// Competencies : 
		/// </summary>
		[EnumTextValue("Competencies")]
		[ColumnEnum("Competencies", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Competencies,
		/// <summary>
		/// Ethics : 
		/// </summary>
		[EnumTextValue("Ethics")]
		[ColumnEnum("Ethics", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Ethics,
		/// <summary>
		/// Facilities : 
		/// </summary>
		[EnumTextValue("Facilities")]
		[ColumnEnum("Facilities", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Facilities,
		/// <summary>
		/// ServicesUsage : 
		/// </summary>
		[EnumTextValue("ServicesUsage")]
		[ColumnEnum("ServicesUsage", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ServicesUsage,
		/// <summary>
		/// Equipment : 
		/// </summary>
		[EnumTextValue("Equipment")]
		[ColumnEnum("Equipment", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Equipment,
		/// <summary>
		/// TimeIndicator : 
		/// </summary>
		[EnumTextValue("TimeIndicator")]
		[ColumnEnum("TimeIndicator", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		TimeIndicator,
		/// <summary>
		/// Effeciency : 
		/// </summary>
		[EnumTextValue("Effeciency")]
		[ColumnEnum("Effeciency", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Effeciency,
		/// <summary>
		/// Effectiviness : 
		/// </summary>
		[EnumTextValue("Effectiviness")]
		[ColumnEnum("Effectiviness", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Effectiviness,
		/// <summary>
		/// GapType : 
		/// </summary>
		[EnumTextValue("GapType")]
		[ColumnEnum("GapType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GapType
	}//End enum

} // end namespace
