
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GraphFileAssociation.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using MetaBuilder.BusinessLogic.Validation;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'GraphFileAssociation' table. [No description found the database]	
	///</summary>
	[Serializable]


	[DataObject, CLSCompliant(true)]
	public abstract partial class GraphFileAssociationBase : EntityBase, IGraphFileAssociation, IEntityId<GraphFileAssociationKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GraphFileAssociationEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GraphFileAssociationEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GraphFileAssociationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GraphFileAssociation> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GraphFileAssociationEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GraphFileAssociationEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GraphFileAssociationBase"/> instance.
		///</summary>
		public GraphFileAssociationBase()
		{
			this.entityData = new GraphFileAssociationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GraphFileAssociationBase"/> instance.
		///</summary>
		///<param name="_graphFileID"></param>
		///<param name="_graphFileMachine"></param>
		///<param name="_childObjectMachine"></param>
		///<param name="_cAid"></param>
		///<param name="_objectID"></param>
		///<param name="_childObjectID"></param>
		///<param name="_objectMachine"></param>
		public GraphFileAssociationBase(System.Int32 _graphFileID, System.String _graphFileMachine, 
			System.String _childObjectMachine, System.Int32 _cAid, System.Int32 _objectID, 
			System.Int32 _childObjectID, System.String _objectMachine)
		{
			this.entityData = new GraphFileAssociationEntityData();
			this.backupData = null;

			this.GraphFileID = _graphFileID;
			this.GraphFileMachine = _graphFileMachine;
			this.ChildObjectMachine = _childObjectMachine;
			this.CAid = _cAid;
			this.ObjectID = _objectID;
			this.ChildObjectID = _childObjectID;
			this.ObjectMachine = _objectMachine;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GraphFileAssociation"/> instance.
		///</summary>
		///<param name="_graphFileID"></param>
		///<param name="_graphFileMachine"></param>
		///<param name="_childObjectMachine"></param>
		///<param name="_cAid"></param>
		///<param name="_objectID"></param>
		///<param name="_childObjectID"></param>
		///<param name="_objectMachine"></param>
		public static GraphFileAssociation CreateGraphFileAssociation(System.Int32 _graphFileID, System.String _graphFileMachine, 
			System.String _childObjectMachine, System.Int32 _cAid, System.Int32 _objectID, 
			System.Int32 _childObjectID, System.String _objectMachine)
		{
			GraphFileAssociation newGraphFileAssociation = new GraphFileAssociation();
			newGraphFileAssociation.GraphFileID = _graphFileID;
			newGraphFileAssociation.GraphFileMachine = _graphFileMachine;
			newGraphFileAssociation.ChildObjectMachine = _childObjectMachine;
			newGraphFileAssociation.CAid = _cAid;
			newGraphFileAssociation.ObjectID = _objectID;
			newGraphFileAssociation.ChildObjectID = _childObjectID;
			newGraphFileAssociation.ObjectMachine = _objectMachine;
			return newGraphFileAssociation;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GraphFileID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 GraphFileID
		{
			get
			{
				return this.entityData.GraphFileID; 
			}
			
			set
			{
				if (this.entityData.GraphFileID == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.GraphFileID, this.entityData.GraphFileID);
				this.entityData.GraphFileID = value;
				this.EntityId.GraphFileID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.GraphFileID, this.entityData.GraphFileID);
				OnPropertyChanged("GraphFileID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GraphFileID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GraphFileID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalGraphFileID
		{
			get { return this.entityData.OriginalGraphFileID; }
			set { this.entityData.OriginalGraphFileID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GraphFileMachine property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String GraphFileMachine
		{
			get
			{
				return this.entityData.GraphFileMachine; 
			}
			
			set
			{
				if (this.entityData.GraphFileMachine == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.GraphFileMachine, this.entityData.GraphFileMachine);
				this.entityData.GraphFileMachine = value;
				this.EntityId.GraphFileMachine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.GraphFileMachine, this.entityData.GraphFileMachine);
				OnPropertyChanged("GraphFileMachine");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GraphFileMachine property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GraphFileMachine property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalGraphFileMachine
		{
			get { return this.entityData.OriginalGraphFileMachine; }
			set { this.entityData.OriginalGraphFileMachine = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ChildObjectMachine property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String ChildObjectMachine
		{
			get
			{
				return this.entityData.ChildObjectMachine; 
			}
			
			set
			{
				if (this.entityData.ChildObjectMachine == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.ChildObjectMachine, this.entityData.ChildObjectMachine);
				this.entityData.ChildObjectMachine = value;
				this.EntityId.ChildObjectMachine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.ChildObjectMachine, this.entityData.ChildObjectMachine);
				OnPropertyChanged("ChildObjectMachine");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ChildObjectMachine property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ChildObjectMachine property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalChildObjectMachine
		{
			get { return this.entityData.OriginalChildObjectMachine; }
			set { this.entityData.OriginalChildObjectMachine = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CAid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 CAid
		{
			get
			{
				return this.entityData.CAid; 
			}
			
			set
			{
				if (this.entityData.CAid == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.CAid, this.entityData.CAid);
				this.entityData.CAid = value;
				this.EntityId.CAid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.CAid, this.entityData.CAid);
				OnPropertyChanged("CAid");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CAid property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CAid property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalCAid
		{
			get { return this.entityData.OriginalCAid; }
			set { this.entityData.OriginalCAid = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ObjectID
		{
			get
			{
				return this.entityData.ObjectID; 
			}
			
			set
			{
				if (this.entityData.ObjectID == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.ObjectID, this.entityData.ObjectID);
				this.entityData.ObjectID = value;
				this.EntityId.ObjectID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.ObjectID, this.entityData.ObjectID);
				OnPropertyChanged("ObjectID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ObjectID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ObjectID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalObjectID
		{
			get { return this.entityData.OriginalObjectID; }
			set { this.entityData.OriginalObjectID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ChildObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ChildObjectID
		{
			get
			{
				return this.entityData.ChildObjectID; 
			}
			
			set
			{
				if (this.entityData.ChildObjectID == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.ChildObjectID, this.entityData.ChildObjectID);
				this.entityData.ChildObjectID = value;
				this.EntityId.ChildObjectID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.ChildObjectID, this.entityData.ChildObjectID);
				OnPropertyChanged("ChildObjectID");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ChildObjectID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ChildObjectID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalChildObjectID
		{
			get { return this.entityData.OriginalChildObjectID; }
			set { this.entityData.OriginalChildObjectID = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ObjectMachine property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String ObjectMachine
		{
			get
			{
				return this.entityData.ObjectMachine; 
			}
			
			set
			{
				if (this.entityData.ObjectMachine == value)
					return;
					
				OnColumnChanging(GraphFileAssociationColumn.ObjectMachine, this.entityData.ObjectMachine);
				this.entityData.ObjectMachine = value;
				this.EntityId.ObjectMachine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GraphFileAssociationColumn.ObjectMachine, this.entityData.ObjectMachine);
				OnPropertyChanged("ObjectMachine");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ObjectMachine property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ObjectMachine property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalObjectMachine
		{
			get { return this.entityData.OriginalObjectMachine; }
			set { this.entityData.OriginalObjectMachine = value; }
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GraphFile"/>.
		/// </summary>
		/// <value>The source GraphFile for GraphFileIDGraphFileMachine.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GraphFile GraphFileIDGraphFileMachineSource
      	{
            get { return entityData.GraphFileIDGraphFileMachineSource; }
            set { entityData.GraphFileIDGraphFileMachineSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ObjectAssociation"/>.
		/// </summary>
		/// <value>The source ObjectAssociation for CAidObjectIDChildObjectIDObjectMachineChildObjectMachine.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ObjectAssociation CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource
      	{
            get { return entityData.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource; }
            set { entityData.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GraphFileMachine", "Graph File Machine"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GraphFileMachine", "Graph File Machine", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ChildObjectMachine", "Child Object Machine"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChildObjectMachine", "Child Object Machine", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ObjectMachine", "Object Machine"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ObjectMachine", "Object Machine", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GraphFileAssociation"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GraphFileID", "GraphFileMachine", "ChildObjectMachine", "CAid", "ObjectID", "ChildObjectID", "ObjectMachine"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GraphFileAssociationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GraphFileAssociation) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GraphFileAssociation>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GraphFileAssociation);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GraphFileAssociation Entity 
		///</summary>
		protected virtual GraphFileAssociation Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GraphFileAssociation copy = new GraphFileAssociation();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GraphFileID = this.GraphFileID;
					copy.OriginalGraphFileID = this.OriginalGraphFileID;
				copy.GraphFileMachine = this.GraphFileMachine;
					copy.OriginalGraphFileMachine = this.OriginalGraphFileMachine;
				copy.ChildObjectMachine = this.ChildObjectMachine;
					copy.OriginalChildObjectMachine = this.OriginalChildObjectMachine;
				copy.CAid = this.CAid;
					copy.OriginalCAid = this.OriginalCAid;
				copy.ObjectID = this.ObjectID;
					copy.OriginalObjectID = this.OriginalObjectID;
				copy.ChildObjectID = this.ChildObjectID;
					copy.OriginalChildObjectID = this.OriginalChildObjectID;
				copy.ObjectMachine = this.ObjectMachine;
					copy.OriginalObjectMachine = this.OriginalObjectMachine;
			
			if (this.GraphFileIDGraphFileMachineSource != null && existingCopies.Contains(this.GraphFileIDGraphFileMachineSource))
				copy.GraphFileIDGraphFileMachineSource = existingCopies[this.GraphFileIDGraphFileMachineSource] as GraphFile;
			else
				copy.GraphFileIDGraphFileMachineSource = MakeCopyOf(this.GraphFileIDGraphFileMachineSource, existingCopies) as GraphFile;
			if (this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource != null && existingCopies.Contains(this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource))
				copy.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = existingCopies[this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource] as ObjectAssociation;
			else
				copy.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = MakeCopyOf(this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource, existingCopies) as ObjectAssociation;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GraphFileAssociation Entity 
		///</summary>
		public virtual GraphFileAssociation Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GraphFileAssociation Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GraphFileAssociation DeepCopy()
		{
			return EntityHelper.Clone<GraphFileAssociation>(this as GraphFileAssociation);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GraphFileAssociationEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GraphFileAssociationEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GraphFileAssociationEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GraphFileAssociationColumn column)
		{
			switch(column)
			{
					case GraphFileAssociationColumn.GraphFileID:
					return entityData.GraphFileID != _originalData.GraphFileID;
					case GraphFileAssociationColumn.GraphFileMachine:
					return entityData.GraphFileMachine != _originalData.GraphFileMachine;
					case GraphFileAssociationColumn.ChildObjectMachine:
					return entityData.ChildObjectMachine != _originalData.ChildObjectMachine;
					case GraphFileAssociationColumn.CAid:
					return entityData.CAid != _originalData.CAid;
					case GraphFileAssociationColumn.ObjectID:
					return entityData.ObjectID != _originalData.ObjectID;
					case GraphFileAssociationColumn.ChildObjectID:
					return entityData.ChildObjectID != _originalData.ChildObjectID;
					case GraphFileAssociationColumn.ObjectMachine:
					return entityData.ObjectMachine != _originalData.ObjectMachine;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GraphFileAssociationColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GraphFileID != _originalData.GraphFileID;
			result = result || entityData.GraphFileMachine != _originalData.GraphFileMachine;
			result = result || entityData.ChildObjectMachine != _originalData.ChildObjectMachine;
			result = result || entityData.CAid != _originalData.CAid;
			result = result || entityData.ObjectID != _originalData.ObjectID;
			result = result || entityData.ChildObjectID != _originalData.ChildObjectID;
			result = result || entityData.ObjectMachine != _originalData.ObjectMachine;
			return result;
		}	
		
		///<summary>
		///  Returns a GraphFileAssociation Entity with the original data.
		///</summary>
		public GraphFileAssociation GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGraphFileAssociation(
				_originalData.GraphFileID,
				_originalData.GraphFileMachine,
				_originalData.ChildObjectMachine,
				_originalData.CAid,
				_originalData.ObjectID,
				_originalData.ChildObjectID,
				_originalData.ObjectMachine
				);
				
			return (GraphFileAssociation)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GraphFileAssociationBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GraphFileAssociationBase)
				return ValueEquals(this, (GraphFileAssociationBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GraphFileAssociationBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GraphFileID.GetHashCode() ^ 
					this.GraphFileMachine.GetHashCode() ^ 
					this.ChildObjectMachine.GetHashCode() ^ 
					this.CAid.GetHashCode() ^ 
					this.ObjectID.GetHashCode() ^ 
					this.ChildObjectID.GetHashCode() ^ 
					this.ObjectMachine.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GraphFileAssociationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GraphFileAssociationBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GraphFileAssociationBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GraphFileAssociationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GraphFileAssociationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GraphFileAssociationBase Object1, GraphFileAssociationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GraphFileID != Object2.GraphFileID)
				equal = false;
			if (Object1.GraphFileMachine != Object2.GraphFileMachine)
				equal = false;
			if (Object1.ChildObjectMachine != Object2.ChildObjectMachine)
				equal = false;
			if (Object1.CAid != Object2.CAid)
				equal = false;
			if (Object1.ObjectID != Object2.ObjectID)
				equal = false;
			if (Object1.ChildObjectID != Object2.ChildObjectID)
				equal = false;
			if (Object1.ObjectMachine != Object2.ObjectMachine)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GraphFileAssociationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GraphFileAssociationComparer GetComparer()
        {
            return new GraphFileAssociationComparer();
        }
        */

        // Comparer delegates back to GraphFileAssociation
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GraphFileAssociation rhs, GraphFileAssociationColumn which)
        {
            switch (which)
            {
            	
            	
            	case GraphFileAssociationColumn.GraphFileID:
            		return this.GraphFileID.CompareTo(rhs.GraphFileID);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.GraphFileMachine:
            		return this.GraphFileMachine.CompareTo(rhs.GraphFileMachine);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.ChildObjectMachine:
            		return this.ChildObjectMachine.CompareTo(rhs.ChildObjectMachine);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.CAid:
            		return this.CAid.CompareTo(rhs.CAid);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.ObjectID:
            		return this.ObjectID.CompareTo(rhs.ObjectID);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.ChildObjectID:
            		return this.ChildObjectID.CompareTo(rhs.ChildObjectID);
            		
            		                 
            	
            	
            	case GraphFileAssociationColumn.ObjectMachine:
            		return this.ObjectMachine.CompareTo(rhs.ObjectMachine);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GraphFileAssociationKey> Members
		
		// member variable for the EntityId property
		private GraphFileAssociationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GraphFileAssociationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GraphFileAssociationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GraphFileAssociation")
					.Append("|").Append( this.GraphFileID.ToString())
					.Append("|").Append( this.GraphFileMachine.ToString())
					.Append("|").Append( this.ChildObjectMachine.ToString())
					.Append("|").Append( this.CAid.ToString())
					.Append("|").Append( this.ObjectID.ToString())
					.Append("|").Append( this.ChildObjectID.ToString())
					.Append("|").Append( this.ObjectMachine.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- GraphFileID: {0}{7}- GraphFileMachine: {1}{7}- ChildObjectMachine: {2}{7}- CAid: {3}{7}- ObjectID: {4}{7}- ChildObjectID: {5}{7}- ObjectMachine: {6}{7}{9}", 
				this.GraphFileID,
				this.GraphFileMachine,
				this.ChildObjectMachine,
				this.CAid,
				this.ObjectID,
				this.ChildObjectID,
				this.ObjectMachine,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GraphFileAssociation' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GraphFileAssociationEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GraphFileID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.Int32 GraphFileID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalGraphFileID;
		
		/// <summary>			
		/// GraphFileMachine : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.String GraphFileMachine;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalGraphFileMachine;
		
		/// <summary>			
		/// ChildObjectMachine : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.String ChildObjectMachine;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalChildObjectMachine;
		
		/// <summary>			
		/// CAid : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.Int32 CAid;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalCAid;
		
		/// <summary>			
		/// ObjectID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.Int32 ObjectID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalObjectID;
		
		/// <summary>			
		/// ChildObjectID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.Int32 ChildObjectID;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalChildObjectID;
		
		/// <summary>			
		/// ObjectMachine : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GraphFileAssociation"</remarks>
		public System.String ObjectMachine;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalObjectMachine;
		
		#endregion
		
		#region Non Primary key(s)
		
		#endregion
			
		#region Source Foreign Key Property
				
		private GraphFile _graphFileIDGraphFileMachineSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GraphFile"/>.
		/// </summary>
		/// <value>The source GraphFile for GraphFileIDGraphFileMachine.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GraphFile GraphFileIDGraphFileMachineSource
      	{
            get { return this._graphFileIDGraphFileMachineSource; }
            set { this._graphFileIDGraphFileMachineSource = value; }
      	}
		private ObjectAssociation _cAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ObjectAssociation"/>.
		/// </summary>
		/// <value>The source ObjectAssociation for CAidObjectIDChildObjectIDObjectMachineChildObjectMachine.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ObjectAssociation CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource
      	{
            get { return this._cAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource; }
            set { this._cAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GraphFileAssociationEntityData _tmp = new GraphFileAssociationEntityData();
						
			_tmp.GraphFileID = this.GraphFileID;
			_tmp.OriginalGraphFileID = this.OriginalGraphFileID;
			_tmp.GraphFileMachine = this.GraphFileMachine;
			_tmp.OriginalGraphFileMachine = this.OriginalGraphFileMachine;
			_tmp.ChildObjectMachine = this.ChildObjectMachine;
			_tmp.OriginalChildObjectMachine = this.OriginalChildObjectMachine;
			_tmp.CAid = this.CAid;
			_tmp.OriginalCAid = this.OriginalCAid;
			_tmp.ObjectID = this.ObjectID;
			_tmp.OriginalObjectID = this.OriginalObjectID;
			_tmp.ChildObjectID = this.ChildObjectID;
			_tmp.OriginalChildObjectID = this.OriginalChildObjectID;
			_tmp.ObjectMachine = this.ObjectMachine;
			_tmp.OriginalObjectMachine = this.OriginalObjectMachine;
			
			
			#region Source Parent Composite Entities
			if (this.GraphFileIDGraphFileMachineSource != null)
				_tmp.GraphFileIDGraphFileMachineSource = MakeCopyOf(this.GraphFileIDGraphFileMachineSource) as GraphFile;
			if (this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource != null)
				_tmp.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = MakeCopyOf(this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource) as ObjectAssociation;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GraphFileAssociationEntityData _tmp = new GraphFileAssociationEntityData();
						
			_tmp.GraphFileID = this.GraphFileID;
			_tmp.OriginalGraphFileID = this.OriginalGraphFileID;
			_tmp.GraphFileMachine = this.GraphFileMachine;
			_tmp.OriginalGraphFileMachine = this.OriginalGraphFileMachine;
			_tmp.ChildObjectMachine = this.ChildObjectMachine;
			_tmp.OriginalChildObjectMachine = this.OriginalChildObjectMachine;
			_tmp.CAid = this.CAid;
			_tmp.OriginalCAid = this.OriginalCAid;
			_tmp.ObjectID = this.ObjectID;
			_tmp.OriginalObjectID = this.OriginalObjectID;
			_tmp.ChildObjectID = this.ChildObjectID;
			_tmp.OriginalChildObjectID = this.OriginalChildObjectID;
			_tmp.ObjectMachine = this.ObjectMachine;
			_tmp.OriginalObjectMachine = this.OriginalObjectMachine;
			
			
			#region Source Parent Composite Entities
			if (this.GraphFileIDGraphFileMachineSource != null && existingCopies.Contains(this.GraphFileIDGraphFileMachineSource))
				_tmp.GraphFileIDGraphFileMachineSource = existingCopies[this.GraphFileIDGraphFileMachineSource] as GraphFile;
			else
				_tmp.GraphFileIDGraphFileMachineSource = MakeCopyOf(this.GraphFileIDGraphFileMachineSource, existingCopies) as GraphFile;
			if (this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource != null && existingCopies.Contains(this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource))
				_tmp.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = existingCopies[this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource] as ObjectAssociation;
			else
				_tmp.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource = MakeCopyOf(this.CAidObjectIDChildObjectIDObjectMachineChildObjectMachineSource, existingCopies) as ObjectAssociation;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GraphFileAssociationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GraphFileAssociationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GraphFileAssociationColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GraphFileAssociationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GraphFileAssociationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GraphFileAssociationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GraphFileAssociationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GraphFileAssociationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GraphFileAssociationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GraphFileAssociationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GraphFileAssociationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GraphFileAssociationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GraphFileAssociationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GraphFileAssociation"/> object.
	/// </remarks>
	public class GraphFileAssociationEventArgs : System.EventArgs
	{
		private GraphFileAssociationColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GraphFileAssociationEventArgs class.
		///</summary>
		public GraphFileAssociationEventArgs(GraphFileAssociationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GraphFileAssociationEventArgs class.
		///</summary>
		public GraphFileAssociationEventArgs(GraphFileAssociationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GraphFileAssociationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GraphFileAssociationColumn" />
		public GraphFileAssociationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GraphFileAssociation related events.
	///</summary>
	public delegate void GraphFileAssociationEventHandler(object sender, GraphFileAssociationEventArgs e);
	
	#region GraphFileAssociationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GraphFileAssociationComparer : System.Collections.Generic.IComparer<GraphFileAssociation>
	{
		GraphFileAssociationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GraphFileAssociationComparer"/> class.
        /// </summary>
		public GraphFileAssociationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GraphFileAssociationComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GraphFileAssociationComparer(GraphFileAssociationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GraphFileAssociation"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GraphFileAssociation"/> to compare.</param>
        /// <param name="b">The second <c>GraphFileAssociation</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GraphFileAssociation a, GraphFileAssociation b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GraphFileAssociation entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GraphFileAssociation a, GraphFileAssociation b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GraphFileAssociationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GraphFileAssociationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GraphFileAssociation"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GraphFileAssociationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GraphFileAssociationKey class.
		/// </summary>
		public GraphFileAssociationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GraphFileAssociationKey class.
		/// </summary>
		public GraphFileAssociationKey(GraphFileAssociationBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GraphFileID = entity.GraphFileID;
				this.GraphFileMachine = entity.GraphFileMachine;
				this.ChildObjectMachine = entity.ChildObjectMachine;
				this.CAid = entity.CAid;
				this.ObjectID = entity.ObjectID;
				this.ChildObjectID = entity.ChildObjectID;
				this.ObjectMachine = entity.ObjectMachine;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GraphFileAssociationKey class.
		/// </summary>
		public GraphFileAssociationKey(System.Int32 _graphFileID, System.String _graphFileMachine, System.String _childObjectMachine, System.Int32 _cAid, System.Int32 _objectID, System.Int32 _childObjectID, System.String _objectMachine)
		{
			#region Init Properties

			this.GraphFileID = _graphFileID;
			this.GraphFileMachine = _graphFileMachine;
			this.ChildObjectMachine = _childObjectMachine;
			this.CAid = _cAid;
			this.ObjectID = _objectID;
			this.ChildObjectID = _childObjectID;
			this.ObjectMachine = _objectMachine;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GraphFileAssociationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GraphFileAssociationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GraphFileID property
		private System.Int32 _graphFileID;
		
		/// <summary>
		/// Gets or sets the GraphFileID property.
		/// </summary>
		public System.Int32 GraphFileID
		{
			get { return _graphFileID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GraphFileID = value;
				
				_graphFileID = value;
			}
		}
		
		// member variable for the GraphFileMachine property
		private System.String _graphFileMachine;
		
		/// <summary>
		/// Gets or sets the GraphFileMachine property.
		/// </summary>
		public System.String GraphFileMachine
		{
			get { return _graphFileMachine; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GraphFileMachine = value;
				
				_graphFileMachine = value;
			}
		}
		
		// member variable for the ChildObjectMachine property
		private System.String _childObjectMachine;
		
		/// <summary>
		/// Gets or sets the ChildObjectMachine property.
		/// </summary>
		public System.String ChildObjectMachine
		{
			get { return _childObjectMachine; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ChildObjectMachine = value;
				
				_childObjectMachine = value;
			}
		}
		
		// member variable for the CAid property
		private System.Int32 _cAid;
		
		/// <summary>
		/// Gets or sets the CAid property.
		/// </summary>
		public System.Int32 CAid
		{
			get { return _cAid; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CAid = value;
				
				_cAid = value;
			}
		}
		
		// member variable for the ObjectID property
		private System.Int32 _objectID;
		
		/// <summary>
		/// Gets or sets the ObjectID property.
		/// </summary>
		public System.Int32 ObjectID
		{
			get { return _objectID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ObjectID = value;
				
				_objectID = value;
			}
		}
		
		// member variable for the ChildObjectID property
		private System.Int32 _childObjectID;
		
		/// <summary>
		/// Gets or sets the ChildObjectID property.
		/// </summary>
		public System.Int32 ChildObjectID
		{
			get { return _childObjectID; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ChildObjectID = value;
				
				_childObjectID = value;
			}
		}
		
		// member variable for the ObjectMachine property
		private System.String _objectMachine;
		
		/// <summary>
		/// Gets or sets the ObjectMachine property.
		/// </summary>
		public System.String ObjectMachine
		{
			get { return _objectMachine; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ObjectMachine = value;
				
				_objectMachine = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GraphFileID = ( values["GraphFileID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["GraphFileID"], typeof(System.Int32)) : (int)0;
				GraphFileMachine = ( values["GraphFileMachine"] != null ) ? (System.String) EntityUtil.ChangeType(values["GraphFileMachine"], typeof(System.String)) : string.Empty;
				ChildObjectMachine = ( values["ChildObjectMachine"] != null ) ? (System.String) EntityUtil.ChangeType(values["ChildObjectMachine"], typeof(System.String)) : string.Empty;
				CAid = ( values["CAid"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CAid"], typeof(System.Int32)) : (int)0;
				ObjectID = ( values["ObjectID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ObjectID"], typeof(System.Int32)) : (int)0;
				ChildObjectID = ( values["ChildObjectID"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ChildObjectID"], typeof(System.Int32)) : (int)0;
				ObjectMachine = ( values["ObjectMachine"] != null ) ? (System.String) EntityUtil.ChangeType(values["ObjectMachine"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GraphFileID", GraphFileID);
			values.Add("GraphFileMachine", GraphFileMachine);
			values.Add("ChildObjectMachine", ChildObjectMachine);
			values.Add("CAid", CAid);
			values.Add("ObjectID", ObjectID);
			values.Add("ChildObjectID", ChildObjectID);
			values.Add("ObjectMachine", ObjectMachine);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GraphFileID: {0}{7}GraphFileMachine: {1}{7}ChildObjectMachine: {2}{7}CAid: {3}{7}ObjectID: {4}{7}ChildObjectID: {5}{7}ObjectMachine: {6}{7}",
								GraphFileID,
								GraphFileMachine,
								ChildObjectMachine,
								CAid,
								ObjectID,
								ChildObjectID,
								ObjectMachine,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GraphFileAssociationColumn Enum
	
	/// <summary>
	/// Enumerate the GraphFileAssociation columns.
	/// </summary>
	[Serializable]
	public enum GraphFileAssociationColumn : int
	{
		/// <summary>
		/// GraphFileID : 
		/// </summary>
		[EnumTextValue("GraphFileID")]
		[ColumnEnum("GraphFileID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		GraphFileID = 1,
		/// <summary>
		/// GraphFileMachine : 
		/// </summary>
		[EnumTextValue("GraphFileMachine")]
		[ColumnEnum("GraphFileMachine", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		GraphFileMachine = 2,
		/// <summary>
		/// ChildObjectMachine : 
		/// </summary>
		[EnumTextValue("ChildObjectMachine")]
		[ColumnEnum("ChildObjectMachine", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		ChildObjectMachine = 3,
		/// <summary>
		/// CAid : 
		/// </summary>
		[EnumTextValue("CAid")]
		[ColumnEnum("CAid", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		CAid = 4,
		/// <summary>
		/// ObjectID : 
		/// </summary>
		[EnumTextValue("ObjectID")]
		[ColumnEnum("ObjectID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ObjectID = 5,
		/// <summary>
		/// ChildObjectID : 
		/// </summary>
		[EnumTextValue("ChildObjectID")]
		[ColumnEnum("ChildObjectID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ChildObjectID = 6,
		/// <summary>
		/// ObjectMachine : 
		/// </summary>
		[EnumTextValue("ObjectMachine")]
		[ColumnEnum("ObjectMachine", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		ObjectMachine = 7
	}//End enum

	#endregion GraphFileAssociationColumn Enum

} // end namespace
