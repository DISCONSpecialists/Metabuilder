/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VisioAddKeyAttributes.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'VISIO_ADD_Key_Attributes' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VisioAddKeyAttributesBase")]
	public abstract partial class VisioAddKeyAttributesBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// Caption : 
		/// </summary>
		private System.String		  _caption = null;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = null;
		
		/// <summary>
		/// Type : 
		/// </summary>
		private System.String		  _type = null;
		
		/// <summary>
		/// ObjectID : 
		/// </summary>
		private System.Int32		  _objectId = (int)0;
		
		/// <summary>
		/// CAid : 
		/// </summary>
		private System.Int32		  _caid = (int)0;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VisioAddKeyAttributesBase"/> instance.
		///</summary>
		public VisioAddKeyAttributesBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VisioAddKeyAttributesBase"/> instance.
		///</summary>
		///<param name="_caption"></param>
		///<param name="_pkid"></param>
		///<param name="_name"></param>
		///<param name="_type"></param>
		///<param name="_objectId"></param>
		///<param name="_caid"></param>
		public VisioAddKeyAttributesBase(System.String _caption, System.Int32 _pkid, System.String _name, System.String _type, System.Int32 _objectId, System.Int32 _caid)
		{
			this._caption = _caption;
			this._pkid = _pkid;
			this._name = _name;
			this._type = _type;
			this._objectId = _objectId;
			this._caid = _caid;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VisioAddKeyAttributes"/> instance.
		///</summary>
		///<param name="_caption"></param>
		///<param name="_pkid"></param>
		///<param name="_name"></param>
		///<param name="_type"></param>
		///<param name="_objectId"></param>
		///<param name="_caid"></param>
		public static VisioAddKeyAttributes CreateVisioAddKeyAttributes(System.String _caption, System.Int32 _pkid, System.String _name, System.String _type, System.Int32 _objectId, System.Int32 _caid)
		{
			VisioAddKeyAttributes newVisioAddKeyAttributes = new VisioAddKeyAttributes();
			newVisioAddKeyAttributes.Caption = _caption;
			newVisioAddKeyAttributes.Pkid = _pkid;
			newVisioAddKeyAttributes.Name = _name;
			newVisioAddKeyAttributes.Type = _type;
			newVisioAddKeyAttributes.ObjectId = _objectId;
			newVisioAddKeyAttributes.Caid = _caid;
			return newVisioAddKeyAttributes;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the Caption property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Caption
		{
			get
			{
				return this._caption; 
			}
			set
			{
				if (_caption == value)
					return;
					
				this._caption = value;
				this._isDirty = true;
				
				OnPropertyChanged("Caption");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Type
		{
			get
			{
				return this._type; 
			}
			set
			{
				if (_type == value)
					return;
					
				this._type = value;
				this._isDirty = true;
				
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ObjectID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 ObjectId
		{
			get
			{
				return this._objectId; 
			}
			set
			{
				if (_objectId == value)
					return;
					
				this._objectId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ObjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CAid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Caid
		{
			get
			{
				return this._caid; 
			}
			set
			{
				if (_caid == value)
					return;
					
				this._caid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Caid");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VISIO_ADD_Key_Attributes"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VisioAddKeyAttributesBase Entity 
		///</summary>
		public virtual VisioAddKeyAttributesBase Copy()
		{
			//shallow copy entity
			VisioAddKeyAttributes copy = new VisioAddKeyAttributes();
				copy.Caption = this.Caption;
				copy.Pkid = this.Pkid;
				copy.Name = this.Name;
				copy.Type = this.Type;
				copy.ObjectId = this.ObjectId;
				copy.Caid = this.Caid;
			copy.AcceptChanges();
			return (VisioAddKeyAttributes)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VisioAddKeyAttributesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VisioAddKeyAttributesBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VisioAddKeyAttributesBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VisioAddKeyAttributesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VisioAddKeyAttributesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VisioAddKeyAttributesBase Object1, VisioAddKeyAttributesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Caption != null && Object2.Caption != null )
			{
				if (Object1.Caption != Object2.Caption)
					equal = false;
			}
			else if (Object1.Caption == null ^ Object1.Caption == null )
			{
				equal = false;
			}
			if (Object1.Pkid != Object2.Pkid)
				equal = false;
			if (Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object1.Type == null )
			{
				equal = false;
			}
			if (Object1.ObjectId != Object2.ObjectId)
				equal = false;
			if (Object1.Caid != Object2.Caid)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VisioAddKeyAttributes entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Caption":
					return entity.Caption;
				case "Pkid":
					return entity.Pkid;
				case "Name":
					return entity.Name;
				case "Type":
					return entity.Type;
				case "ObjectId":
					return entity.ObjectId;
				case "Caid":
					return entity.Caid;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VisioAddKeyAttributes, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- Caption: {0}{6}- Pkid: {1}{6}- Name: {2}{6}- Type: {3}{6}- ObjectId: {4}{6}- Caid: {5}{6}", 
				(this.Caption == null) ? string.Empty : this.Caption.ToString(),
			     
				this.Pkid,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
			     
				(this.Type == null) ? string.Empty : this.Type.ToString(),
			     
				this.ObjectId,
				this.Caid,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VisioAddKeyAttributes columns.
	/// </summary>
	[Serializable]
	public enum VisioAddKeyAttributesColumn
	{
		/// <summary>
		/// Caption : 
		/// </summary>
		[EnumTextValue("Caption")]
		[ColumnEnum("Caption", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Caption,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Pkid,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Name,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Type,
		/// <summary>
		/// ObjectID : 
		/// </summary>
		[EnumTextValue("ObjectID")]
		[ColumnEnum("ObjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ObjectId,
		/// <summary>
		/// CAid : 
		/// </summary>
		[EnumTextValue("CAid")]
		[ColumnEnum("CAid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Caid
	}//End enum

} // end namespace
