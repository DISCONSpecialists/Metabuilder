/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file METAViewStorageComponentRetrieval.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'METAView_StorageComponent_Retrieval' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("METAViewStorageComponentRetrievalBase")]
	public abstract partial class METAViewStorageComponentRetrievalBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		private System.String		  _workspaceName = string.Empty;
		
		/// <summary>
		/// WorkspaceTypeID : 
		/// </summary>
		private System.Int32?		  _workspaceTypeID = null;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		private System.Int32		  _vCStatusID = (int)0;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Machine : 
		/// </summary>
		private System.String		  _machine = string.Empty;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		private System.String		  _vCMachineID = null;
		
		/// <summary>
		/// Type : 
		/// </summary>
		private System.String		  _type = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = null;
		
		/// <summary>
		/// SeverityIndicator : 
		/// </summary>
		private System.String		  _severityIndicator = null;
		
		/// <summary>
		/// Configuration : 
		/// </summary>
		private System.String		  _configuration = null;
		
		/// <summary>
		/// NetworkAddress1 : 
		/// </summary>
		private System.String		  _networkAddress1 = null;
		
		/// <summary>
		/// NetworkAddress2 : 
		/// </summary>
		private System.String		  _networkAddress2 = null;
		
		/// <summary>
		/// NetworkAddress3 : 
		/// </summary>
		private System.String		  _networkAddress3 = null;
		
		/// <summary>
		/// NetworkAddress4 : 
		/// </summary>
		private System.String		  _networkAddress4 = null;
		
		/// <summary>
		/// NetworkAddress5 : 
		/// </summary>
		private System.String		  _networkAddress5 = null;
		
		/// <summary>
		/// Make : 
		/// </summary>
		private System.String		  _make = null;
		
		/// <summary>
		/// Model : 
		/// </summary>
		private System.String		  _model = null;
		
		/// <summary>
		/// SerialNumber : 
		/// </summary>
		private System.String		  _serialNumber = null;
		
		/// <summary>
		/// AssetNumber : 
		/// </summary>
		private System.String		  _assetNumber = null;
		
		/// <summary>
		/// Capacity : 
		/// </summary>
		private System.String		  _capacity = null;
		
		/// <summary>
		/// Number_of_Disks : 
		/// </summary>
		private System.String		  _numberOfDisks = null;
		
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		private System.String		  _datePurchased = null;
		
		/// <summary>
		/// UnderWarranty : 
		/// </summary>
		private System.String		  _underWarranty = null;
		
		/// <summary>
		/// FileSystem : 
		/// </summary>
		private System.String		  _fileSystem = null;
		
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		private System.String		  _customField1 = null;
		
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		private System.String		  _customField2 = null;
		
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		private System.String		  _customField3 = null;
		
		/// <summary>
		/// GapType : 
		/// </summary>
		private System.String		  _gapType = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="METAViewStorageComponentRetrievalBase"/> instance.
		///</summary>
		public METAViewStorageComponentRetrievalBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="METAViewStorageComponentRetrievalBase"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeID"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_type"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_severityIndicator"></param>
		///<param name="_configuration"></param>
		///<param name="_networkAddress1"></param>
		///<param name="_networkAddress2"></param>
		///<param name="_networkAddress3"></param>
		///<param name="_networkAddress4"></param>
		///<param name="_networkAddress5"></param>
		///<param name="_make"></param>
		///<param name="_model"></param>
		///<param name="_serialNumber"></param>
		///<param name="_assetNumber"></param>
		///<param name="_capacity"></param>
		///<param name="_numberOfDisks"></param>
		///<param name="_datePurchased"></param>
		///<param name="_underWarranty"></param>
		///<param name="_fileSystem"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_gapType"></param>
		public METAViewStorageComponentRetrievalBase(System.String _workspaceName, System.Int32? _workspaceTypeID, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _type, System.String _name, System.String _description, System.String _severityIndicator, System.String _configuration, System.String _networkAddress1, System.String _networkAddress2, System.String _networkAddress3, System.String _networkAddress4, System.String _networkAddress5, System.String _make, System.String _model, System.String _serialNumber, System.String _assetNumber, System.String _capacity, System.String _numberOfDisks, System.String _datePurchased, System.String _underWarranty, System.String _fileSystem, System.String _customField1, System.String _customField2, System.String _customField3, System.String _gapType)
		{
			this._workspaceName = _workspaceName;
			this._workspaceTypeID = _workspaceTypeID;
			this._vCStatusID = _vCStatusID;
			this._pkid = _pkid;
			this._machine = _machine;
			this._vCMachineID = _vCMachineID;
			this._type = _type;
			this._name = _name;
			this._description = _description;
			this._severityIndicator = _severityIndicator;
			this._configuration = _configuration;
			this._networkAddress1 = _networkAddress1;
			this._networkAddress2 = _networkAddress2;
			this._networkAddress3 = _networkAddress3;
			this._networkAddress4 = _networkAddress4;
			this._networkAddress5 = _networkAddress5;
			this._make = _make;
			this._model = _model;
			this._serialNumber = _serialNumber;
			this._assetNumber = _assetNumber;
			this._capacity = _capacity;
			this._numberOfDisks = _numberOfDisks;
			this._datePurchased = _datePurchased;
			this._underWarranty = _underWarranty;
			this._fileSystem = _fileSystem;
			this._customField1 = _customField1;
			this._customField2 = _customField2;
			this._customField3 = _customField3;
			this._gapType = _gapType;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="METAViewStorageComponentRetrieval"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeID"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_type"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_severityIndicator"></param>
		///<param name="_configuration"></param>
		///<param name="_networkAddress1"></param>
		///<param name="_networkAddress2"></param>
		///<param name="_networkAddress3"></param>
		///<param name="_networkAddress4"></param>
		///<param name="_networkAddress5"></param>
		///<param name="_make"></param>
		///<param name="_model"></param>
		///<param name="_serialNumber"></param>
		///<param name="_assetNumber"></param>
		///<param name="_capacity"></param>
		///<param name="_numberOfDisks"></param>
		///<param name="_datePurchased"></param>
		///<param name="_underWarranty"></param>
		///<param name="_fileSystem"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_gapType"></param>
		public static METAViewStorageComponentRetrieval CreateMETAViewStorageComponentRetrieval(System.String _workspaceName, System.Int32? _workspaceTypeID, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _type, System.String _name, System.String _description, System.String _severityIndicator, System.String _configuration, System.String _networkAddress1, System.String _networkAddress2, System.String _networkAddress3, System.String _networkAddress4, System.String _networkAddress5, System.String _make, System.String _model, System.String _serialNumber, System.String _assetNumber, System.String _capacity, System.String _numberOfDisks, System.String _datePurchased, System.String _underWarranty, System.String _fileSystem, System.String _customField1, System.String _customField2, System.String _customField3, System.String _gapType)
		{
			METAViewStorageComponentRetrieval newMETAViewStorageComponentRetrieval = new METAViewStorageComponentRetrieval();
			newMETAViewStorageComponentRetrieval.WorkspaceName = _workspaceName;
			newMETAViewStorageComponentRetrieval.WorkspaceTypeID = _workspaceTypeID;
			newMETAViewStorageComponentRetrieval.VCStatusID = _vCStatusID;
			newMETAViewStorageComponentRetrieval.Pkid = _pkid;
			newMETAViewStorageComponentRetrieval.Machine = _machine;
			newMETAViewStorageComponentRetrieval.VCMachineID = _vCMachineID;
			newMETAViewStorageComponentRetrieval.Type = _type;
			newMETAViewStorageComponentRetrieval.Name = _name;
			newMETAViewStorageComponentRetrieval.Description = _description;
			newMETAViewStorageComponentRetrieval.SeverityIndicator = _severityIndicator;
			newMETAViewStorageComponentRetrieval.Configuration = _configuration;
			newMETAViewStorageComponentRetrieval.NetworkAddress1 = _networkAddress1;
			newMETAViewStorageComponentRetrieval.NetworkAddress2 = _networkAddress2;
			newMETAViewStorageComponentRetrieval.NetworkAddress3 = _networkAddress3;
			newMETAViewStorageComponentRetrieval.NetworkAddress4 = _networkAddress4;
			newMETAViewStorageComponentRetrieval.NetworkAddress5 = _networkAddress5;
			newMETAViewStorageComponentRetrieval.Make = _make;
			newMETAViewStorageComponentRetrieval.Model = _model;
			newMETAViewStorageComponentRetrieval.SerialNumber = _serialNumber;
			newMETAViewStorageComponentRetrieval.AssetNumber = _assetNumber;
			newMETAViewStorageComponentRetrieval.Capacity = _capacity;
			newMETAViewStorageComponentRetrieval.NumberOfDisks = _numberOfDisks;
			newMETAViewStorageComponentRetrieval.DatePurchased = _datePurchased;
			newMETAViewStorageComponentRetrieval.UnderWarranty = _underWarranty;
			newMETAViewStorageComponentRetrieval.FileSystem = _fileSystem;
			newMETAViewStorageComponentRetrieval.CustomField1 = _customField1;
			newMETAViewStorageComponentRetrieval.CustomField2 = _customField2;
			newMETAViewStorageComponentRetrieval.CustomField3 = _customField3;
			newMETAViewStorageComponentRetrieval.GapType = _gapType;
			return newMETAViewStorageComponentRetrieval;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this._workspaceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WorkspaceName does not allow null values.");
				if (_workspaceName == value)
					return;
					
				this._workspaceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceTypeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIDNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? WorkspaceTypeID
		{
			get
			{
				return this._workspaceTypeID; 
			}
			set
			{
				if (_workspaceTypeID == value && WorkspaceTypeID != null )
					return;
					
				this._workspaceTypeID = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceTypeID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this._vCStatusID; 
			}
			set
			{
				if (_vCStatusID == value)
					return;
					
				this._vCStatusID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Machine
		{
			get
			{
				return this._machine; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Machine does not allow null values.");
				if (_machine == value)
					return;
					
				this._machine = value;
				this._isDirty = true;
				
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this._vCMachineID; 
			}
			set
			{
				if (_vCMachineID == value)
					return;
					
				this._vCMachineID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Type
		{
			get
			{
				return this._type; 
			}
			set
			{
				if (_type == value)
					return;
					
				this._type = value;
				this._isDirty = true;
				
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeverityIndicator property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeverityIndicator
		{
			get
			{
				return this._severityIndicator; 
			}
			set
			{
				if (_severityIndicator == value)
					return;
					
				this._severityIndicator = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeverityIndicator");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Configuration property. 
		///		
		/// </summary>
		/// <value>This type is text</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Configuration
		{
			get
			{
				return this._configuration; 
			}
			set
			{
				if (_configuration == value)
					return;
					
				this._configuration = value;
				this._isDirty = true;
				
				OnPropertyChanged("Configuration");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NetworkAddress1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NetworkAddress1
		{
			get
			{
				return this._networkAddress1; 
			}
			set
			{
				if (_networkAddress1 == value)
					return;
					
				this._networkAddress1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("NetworkAddress1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NetworkAddress2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NetworkAddress2
		{
			get
			{
				return this._networkAddress2; 
			}
			set
			{
				if (_networkAddress2 == value)
					return;
					
				this._networkAddress2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("NetworkAddress2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NetworkAddress3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NetworkAddress3
		{
			get
			{
				return this._networkAddress3; 
			}
			set
			{
				if (_networkAddress3 == value)
					return;
					
				this._networkAddress3 = value;
				this._isDirty = true;
				
				OnPropertyChanged("NetworkAddress3");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NetworkAddress4 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NetworkAddress4
		{
			get
			{
				return this._networkAddress4; 
			}
			set
			{
				if (_networkAddress4 == value)
					return;
					
				this._networkAddress4 = value;
				this._isDirty = true;
				
				OnPropertyChanged("NetworkAddress4");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NetworkAddress5 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NetworkAddress5
		{
			get
			{
				return this._networkAddress5; 
			}
			set
			{
				if (_networkAddress5 == value)
					return;
					
				this._networkAddress5 = value;
				this._isDirty = true;
				
				OnPropertyChanged("NetworkAddress5");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Make property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Make
		{
			get
			{
				return this._make; 
			}
			set
			{
				if (_make == value)
					return;
					
				this._make = value;
				this._isDirty = true;
				
				OnPropertyChanged("Make");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Model property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Model
		{
			get
			{
				return this._model; 
			}
			set
			{
				if (_model == value)
					return;
					
				this._model = value;
				this._isDirty = true;
				
				OnPropertyChanged("Model");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SerialNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SerialNumber
		{
			get
			{
				return this._serialNumber; 
			}
			set
			{
				if (_serialNumber == value)
					return;
					
				this._serialNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("SerialNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AssetNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AssetNumber
		{
			get
			{
				return this._assetNumber; 
			}
			set
			{
				if (_assetNumber == value)
					return;
					
				this._assetNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("AssetNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Capacity property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Capacity
		{
			get
			{
				return this._capacity; 
			}
			set
			{
				if (_capacity == value)
					return;
					
				this._capacity = value;
				this._isDirty = true;
				
				OnPropertyChanged("Capacity");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Number_of_Disks property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NumberOfDisks
		{
			get
			{
				return this._numberOfDisks; 
			}
			set
			{
				if (_numberOfDisks == value)
					return;
					
				this._numberOfDisks = value;
				this._isDirty = true;
				
				OnPropertyChanged("NumberOfDisks");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DatePurchased property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DatePurchased
		{
			get
			{
				return this._datePurchased; 
			}
			set
			{
				if (_datePurchased == value)
					return;
					
				this._datePurchased = value;
				this._isDirty = true;
				
				OnPropertyChanged("DatePurchased");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UnderWarranty property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UnderWarranty
		{
			get
			{
				return this._underWarranty; 
			}
			set
			{
				if (_underWarranty == value)
					return;
					
				this._underWarranty = value;
				this._isDirty = true;
				
				OnPropertyChanged("UnderWarranty");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FileSystem property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FileSystem
		{
			get
			{
				return this._fileSystem; 
			}
			set
			{
				if (_fileSystem == value)
					return;
					
				this._fileSystem = value;
				this._isDirty = true;
				
				OnPropertyChanged("FileSystem");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField1
		{
			get
			{
				return this._customField1; 
			}
			set
			{
				if (_customField1 == value)
					return;
					
				this._customField1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField2
		{
			get
			{
				return this._customField2; 
			}
			set
			{
				if (_customField2 == value)
					return;
					
				this._customField2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField3
		{
			get
			{
				return this._customField3; 
			}
			set
			{
				if (_customField3 == value)
					return;
					
				this._customField3 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField3");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GapType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GapType
		{
			get
			{
				return this._gapType; 
			}
			set
			{
				if (_gapType == value)
					return;
					
				this._gapType = value;
				this._isDirty = true;
				
				OnPropertyChanged("GapType");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "METAView_StorageComponent_Retrieval"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed METAViewStorageComponentRetrievalBase Entity 
		///</summary>
		public virtual METAViewStorageComponentRetrievalBase Copy()
		{
			//shallow copy entity
			METAViewStorageComponentRetrieval copy = new METAViewStorageComponentRetrieval();
				copy.WorkspaceName = this.WorkspaceName;
				copy.WorkspaceTypeID = this.WorkspaceTypeID;
				copy.VCStatusID = this.VCStatusID;
				copy.Pkid = this.Pkid;
				copy.Machine = this.Machine;
				copy.VCMachineID = this.VCMachineID;
				copy.Type = this.Type;
				copy.Name = this.Name;
				copy.Description = this.Description;
				copy.SeverityIndicator = this.SeverityIndicator;
				copy.Configuration = this.Configuration;
				copy.NetworkAddress1 = this.NetworkAddress1;
				copy.NetworkAddress2 = this.NetworkAddress2;
				copy.NetworkAddress3 = this.NetworkAddress3;
				copy.NetworkAddress4 = this.NetworkAddress4;
				copy.NetworkAddress5 = this.NetworkAddress5;
				copy.Make = this.Make;
				copy.Model = this.Model;
				copy.SerialNumber = this.SerialNumber;
				copy.AssetNumber = this.AssetNumber;
				copy.Capacity = this.Capacity;
				copy.NumberOfDisks = this.NumberOfDisks;
				copy.DatePurchased = this.DatePurchased;
				copy.UnderWarranty = this.UnderWarranty;
				copy.FileSystem = this.FileSystem;
				copy.CustomField1 = this.CustomField1;
				copy.CustomField2 = this.CustomField2;
				copy.CustomField3 = this.CustomField3;
				copy.GapType = this.GapType;
			copy.AcceptChanges();
			return (METAViewStorageComponentRetrieval)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="METAViewStorageComponentRetrievalBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(METAViewStorageComponentRetrievalBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="METAViewStorageComponentRetrievalBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="METAViewStorageComponentRetrievalBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="METAViewStorageComponentRetrievalBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(METAViewStorageComponentRetrievalBase Object1, METAViewStorageComponentRetrievalBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.WorkspaceTypeID != null && Object2.WorkspaceTypeID != null )
			{
				if (Object1.WorkspaceTypeID != Object2.WorkspaceTypeID)
					equal = false;
			}
			else if (Object1.WorkspaceTypeID == null ^ Object1.WorkspaceTypeID == null )
			{
				equal = false;
			}
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if (Object1.Pkid != Object2.Pkid)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object1.VCMachineID == null )
			{
				equal = false;
			}
			if (Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object1.Type == null )
			{
				equal = false;
			}
			if (Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object1.Description == null )
			{
				equal = false;
			}
			if (Object1.SeverityIndicator != null && Object2.SeverityIndicator != null )
			{
				if (Object1.SeverityIndicator != Object2.SeverityIndicator)
					equal = false;
			}
			else if (Object1.SeverityIndicator == null ^ Object1.SeverityIndicator == null )
			{
				equal = false;
			}
			if (Object1.Configuration != null && Object2.Configuration != null )
			{
				if (Object1.Configuration != Object2.Configuration)
					equal = false;
			}
			else if (Object1.Configuration == null ^ Object1.Configuration == null )
			{
				equal = false;
			}
			if (Object1.NetworkAddress1 != null && Object2.NetworkAddress1 != null )
			{
				if (Object1.NetworkAddress1 != Object2.NetworkAddress1)
					equal = false;
			}
			else if (Object1.NetworkAddress1 == null ^ Object1.NetworkAddress1 == null )
			{
				equal = false;
			}
			if (Object1.NetworkAddress2 != null && Object2.NetworkAddress2 != null )
			{
				if (Object1.NetworkAddress2 != Object2.NetworkAddress2)
					equal = false;
			}
			else if (Object1.NetworkAddress2 == null ^ Object1.NetworkAddress2 == null )
			{
				equal = false;
			}
			if (Object1.NetworkAddress3 != null && Object2.NetworkAddress3 != null )
			{
				if (Object1.NetworkAddress3 != Object2.NetworkAddress3)
					equal = false;
			}
			else if (Object1.NetworkAddress3 == null ^ Object1.NetworkAddress3 == null )
			{
				equal = false;
			}
			if (Object1.NetworkAddress4 != null && Object2.NetworkAddress4 != null )
			{
				if (Object1.NetworkAddress4 != Object2.NetworkAddress4)
					equal = false;
			}
			else if (Object1.NetworkAddress4 == null ^ Object1.NetworkAddress4 == null )
			{
				equal = false;
			}
			if (Object1.NetworkAddress5 != null && Object2.NetworkAddress5 != null )
			{
				if (Object1.NetworkAddress5 != Object2.NetworkAddress5)
					equal = false;
			}
			else if (Object1.NetworkAddress5 == null ^ Object1.NetworkAddress5 == null )
			{
				equal = false;
			}
			if (Object1.Make != null && Object2.Make != null )
			{
				if (Object1.Make != Object2.Make)
					equal = false;
			}
			else if (Object1.Make == null ^ Object1.Make == null )
			{
				equal = false;
			}
			if (Object1.Model != null && Object2.Model != null )
			{
				if (Object1.Model != Object2.Model)
					equal = false;
			}
			else if (Object1.Model == null ^ Object1.Model == null )
			{
				equal = false;
			}
			if (Object1.SerialNumber != null && Object2.SerialNumber != null )
			{
				if (Object1.SerialNumber != Object2.SerialNumber)
					equal = false;
			}
			else if (Object1.SerialNumber == null ^ Object1.SerialNumber == null )
			{
				equal = false;
			}
			if (Object1.AssetNumber != null && Object2.AssetNumber != null )
			{
				if (Object1.AssetNumber != Object2.AssetNumber)
					equal = false;
			}
			else if (Object1.AssetNumber == null ^ Object1.AssetNumber == null )
			{
				equal = false;
			}
			if (Object1.Capacity != null && Object2.Capacity != null )
			{
				if (Object1.Capacity != Object2.Capacity)
					equal = false;
			}
			else if (Object1.Capacity == null ^ Object1.Capacity == null )
			{
				equal = false;
			}
			if (Object1.NumberOfDisks != null && Object2.NumberOfDisks != null )
			{
				if (Object1.NumberOfDisks != Object2.NumberOfDisks)
					equal = false;
			}
			else if (Object1.NumberOfDisks == null ^ Object1.NumberOfDisks == null )
			{
				equal = false;
			}
			if (Object1.DatePurchased != null && Object2.DatePurchased != null )
			{
				if (Object1.DatePurchased != Object2.DatePurchased)
					equal = false;
			}
			else if (Object1.DatePurchased == null ^ Object1.DatePurchased == null )
			{
				equal = false;
			}
			if (Object1.UnderWarranty != null && Object2.UnderWarranty != null )
			{
				if (Object1.UnderWarranty != Object2.UnderWarranty)
					equal = false;
			}
			else if (Object1.UnderWarranty == null ^ Object1.UnderWarranty == null )
			{
				equal = false;
			}
			if (Object1.FileSystem != null && Object2.FileSystem != null )
			{
				if (Object1.FileSystem != Object2.FileSystem)
					equal = false;
			}
			else if (Object1.FileSystem == null ^ Object1.FileSystem == null )
			{
				equal = false;
			}
			if (Object1.CustomField1 != null && Object2.CustomField1 != null )
			{
				if (Object1.CustomField1 != Object2.CustomField1)
					equal = false;
			}
			else if (Object1.CustomField1 == null ^ Object1.CustomField1 == null )
			{
				equal = false;
			}
			if (Object1.CustomField2 != null && Object2.CustomField2 != null )
			{
				if (Object1.CustomField2 != Object2.CustomField2)
					equal = false;
			}
			else if (Object1.CustomField2 == null ^ Object1.CustomField2 == null )
			{
				equal = false;
			}
			if (Object1.CustomField3 != null && Object2.CustomField3 != null )
			{
				if (Object1.CustomField3 != Object2.CustomField3)
					equal = false;
			}
			else if (Object1.CustomField3 == null ^ Object1.CustomField3 == null )
			{
				equal = false;
			}
			if (Object1.GapType != null && Object2.GapType != null )
			{
				if (Object1.GapType != Object2.GapType)
					equal = false;
			}
			else if (Object1.GapType == null ^ Object1.GapType == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(METAViewStorageComponentRetrieval entity, string propertyName)
		{
			switch (propertyName)
			{
				case "WorkspaceName":
					return entity.WorkspaceName;
				case "WorkspaceTypeID":
					return entity.WorkspaceTypeID;
				case "VCStatusID":
					return entity.VCStatusID;
				case "Pkid":
					return entity.Pkid;
				case "Machine":
					return entity.Machine;
				case "VCMachineID":
					return entity.VCMachineID;
				case "Type":
					return entity.Type;
				case "Name":
					return entity.Name;
				case "Description":
					return entity.Description;
				case "SeverityIndicator":
					return entity.SeverityIndicator;
				case "Configuration":
					return entity.Configuration;
				case "NetworkAddress1":
					return entity.NetworkAddress1;
				case "NetworkAddress2":
					return entity.NetworkAddress2;
				case "NetworkAddress3":
					return entity.NetworkAddress3;
				case "NetworkAddress4":
					return entity.NetworkAddress4;
				case "NetworkAddress5":
					return entity.NetworkAddress5;
				case "Make":
					return entity.Make;
				case "Model":
					return entity.Model;
				case "SerialNumber":
					return entity.SerialNumber;
				case "AssetNumber":
					return entity.AssetNumber;
				case "Capacity":
					return entity.Capacity;
				case "NumberOfDisks":
					return entity.NumberOfDisks;
				case "DatePurchased":
					return entity.DatePurchased;
				case "UnderWarranty":
					return entity.UnderWarranty;
				case "FileSystem":
					return entity.FileSystem;
				case "CustomField1":
					return entity.CustomField1;
				case "CustomField2":
					return entity.CustomField2;
				case "CustomField3":
					return entity.CustomField3;
				case "GapType":
					return entity.GapType;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as METAViewStorageComponentRetrieval, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{30}{29}- WorkspaceName: {0}{29}- WorkspaceTypeID: {1}{29}- VCStatusID: {2}{29}- Pkid: {3}{29}- Machine: {4}{29}- VCMachineID: {5}{29}- Type: {6}{29}- Name: {7}{29}- Description: {8}{29}- SeverityIndicator: {9}{29}- Configuration: {10}{29}- NetworkAddress1: {11}{29}- NetworkAddress2: {12}{29}- NetworkAddress3: {13}{29}- NetworkAddress4: {14}{29}- NetworkAddress5: {15}{29}- Make: {16}{29}- Model: {17}{29}- SerialNumber: {18}{29}- AssetNumber: {19}{29}- Capacity: {20}{29}- NumberOfDisks: {21}{29}- DatePurchased: {22}{29}- UnderWarranty: {23}{29}- FileSystem: {24}{29}- CustomField1: {25}{29}- CustomField2: {26}{29}- CustomField3: {27}{29}- GapType: {28}{29}", 
				this.WorkspaceName,
				(this.WorkspaceTypeID == null) ? string.Empty : this.WorkspaceTypeID.ToString(),
			     
				this.VCStatusID,
				this.Pkid,
				this.Machine,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
			     
				(this.Type == null) ? string.Empty : this.Type.ToString(),
			     
				(this.Name == null) ? string.Empty : this.Name.ToString(),
			     
				(this.Description == null) ? string.Empty : this.Description.ToString(),
			     
				(this.SeverityIndicator == null) ? string.Empty : this.SeverityIndicator.ToString(),
			     
				(this.Configuration == null) ? string.Empty : this.Configuration.ToString(),
			     
				(this.NetworkAddress1 == null) ? string.Empty : this.NetworkAddress1.ToString(),
			     
				(this.NetworkAddress2 == null) ? string.Empty : this.NetworkAddress2.ToString(),
			     
				(this.NetworkAddress3 == null) ? string.Empty : this.NetworkAddress3.ToString(),
			     
				(this.NetworkAddress4 == null) ? string.Empty : this.NetworkAddress4.ToString(),
			     
				(this.NetworkAddress5 == null) ? string.Empty : this.NetworkAddress5.ToString(),
			     
				(this.Make == null) ? string.Empty : this.Make.ToString(),
			     
				(this.Model == null) ? string.Empty : this.Model.ToString(),
			     
				(this.SerialNumber == null) ? string.Empty : this.SerialNumber.ToString(),
			     
				(this.AssetNumber == null) ? string.Empty : this.AssetNumber.ToString(),
			     
				(this.Capacity == null) ? string.Empty : this.Capacity.ToString(),
			     
				(this.NumberOfDisks == null) ? string.Empty : this.NumberOfDisks.ToString(),
			     
				(this.DatePurchased == null) ? string.Empty : this.DatePurchased.ToString(),
			     
				(this.UnderWarranty == null) ? string.Empty : this.UnderWarranty.ToString(),
			     
				(this.FileSystem == null) ? string.Empty : this.FileSystem.ToString(),
			     
				(this.CustomField1 == null) ? string.Empty : this.CustomField1.ToString(),
			     
				(this.CustomField2 == null) ? string.Empty : this.CustomField2.ToString(),
			     
				(this.CustomField3 == null) ? string.Empty : this.CustomField3.ToString(),
			     
				(this.GapType == null) ? string.Empty : this.GapType.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the METAViewStorageComponentRetrieval columns.
	/// </summary>
	[Serializable]
	public enum METAViewStorageComponentRetrievalColumn
	{
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName,
		/// <summary>
		/// WorkspaceTypeID : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeID")]
		[ColumnEnum("WorkspaceTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeID,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Pkid,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Machine,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Type,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Name,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Description,
		/// <summary>
		/// SeverityIndicator : 
		/// </summary>
		[EnumTextValue("SeverityIndicator")]
		[ColumnEnum("SeverityIndicator", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SeverityIndicator,
		/// <summary>
		/// Configuration : 
		/// </summary>
		[EnumTextValue("Configuration")]
		[ColumnEnum("Configuration", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2147483647)]
		Configuration,
		/// <summary>
		/// NetworkAddress1 : 
		/// </summary>
		[EnumTextValue("NetworkAddress1")]
		[ColumnEnum("NetworkAddress1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NetworkAddress1,
		/// <summary>
		/// NetworkAddress2 : 
		/// </summary>
		[EnumTextValue("NetworkAddress2")]
		[ColumnEnum("NetworkAddress2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NetworkAddress2,
		/// <summary>
		/// NetworkAddress3 : 
		/// </summary>
		[EnumTextValue("NetworkAddress3")]
		[ColumnEnum("NetworkAddress3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NetworkAddress3,
		/// <summary>
		/// NetworkAddress4 : 
		/// </summary>
		[EnumTextValue("NetworkAddress4")]
		[ColumnEnum("NetworkAddress4", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NetworkAddress4,
		/// <summary>
		/// NetworkAddress5 : 
		/// </summary>
		[EnumTextValue("NetworkAddress5")]
		[ColumnEnum("NetworkAddress5", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NetworkAddress5,
		/// <summary>
		/// Make : 
		/// </summary>
		[EnumTextValue("Make")]
		[ColumnEnum("Make", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Make,
		/// <summary>
		/// Model : 
		/// </summary>
		[EnumTextValue("Model")]
		[ColumnEnum("Model", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Model,
		/// <summary>
		/// SerialNumber : 
		/// </summary>
		[EnumTextValue("SerialNumber")]
		[ColumnEnum("SerialNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SerialNumber,
		/// <summary>
		/// AssetNumber : 
		/// </summary>
		[EnumTextValue("AssetNumber")]
		[ColumnEnum("AssetNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		AssetNumber,
		/// <summary>
		/// Capacity : 
		/// </summary>
		[EnumTextValue("Capacity")]
		[ColumnEnum("Capacity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Capacity,
		/// <summary>
		/// Number_of_Disks : 
		/// </summary>
		[EnumTextValue("Number_of_Disks")]
		[ColumnEnum("Number_of_Disks", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		NumberOfDisks,
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		[EnumTextValue("DatePurchased")]
		[ColumnEnum("DatePurchased", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DatePurchased,
		/// <summary>
		/// UnderWarranty : 
		/// </summary>
		[EnumTextValue("UnderWarranty")]
		[ColumnEnum("UnderWarranty", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		UnderWarranty,
		/// <summary>
		/// FileSystem : 
		/// </summary>
		[EnumTextValue("FileSystem")]
		[ColumnEnum("FileSystem", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		FileSystem,
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		[EnumTextValue("CustomField1")]
		[ColumnEnum("CustomField1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField1,
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		[EnumTextValue("CustomField2")]
		[ColumnEnum("CustomField2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField2,
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		[EnumTextValue("CustomField3")]
		[ColumnEnum("CustomField3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField3,
		/// <summary>
		/// GapType : 
		/// </summary>
		[EnumTextValue("GapType")]
		[ColumnEnum("GapType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GapType
	}//End enum

} // end namespace
