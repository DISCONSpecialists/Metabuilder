
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MetaObject.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using MetaBuilder.BusinessLogic.Validation;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'MetaObject' table. [No description found the database]	
	///</summary>
	[Serializable]


	[DataObject, CLSCompliant(true)]
	public abstract partial class MetaObjectBase : EntityBase, IMetaObject, IEntityId<MetaObjectKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MetaObjectEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MetaObjectEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MetaObjectEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MetaObject> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MetaObjectEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MetaObjectEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MetaObjectBase"/> instance.
		///</summary>
		public MetaObjectBase()
		{
			this.entityData = new MetaObjectEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MetaObjectBase"/> instance.
		///</summary>
		///<param name="_class"></param>
		///<param name="_workspaceName"></param>
		///<param name="_userID"></param>
		///<param name="_machine"></param>
		///<param name="_VCStatusID"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_WorkspaceTypeId"></param>
		///<param name="_dateCreated"></param>
		///<param name="_lastModified"></param>
		public MetaObjectBase(System.String _class, System.String _workspaceName, System.Int32 _userID, 
			System.String _machine, System.Int32 _VCStatusID, System.String _vCMachineID, System.Int32? _WorkspaceTypeId, 
			System.DateTime? _dateCreated, System.DateTime? _lastModified)
		{
			this.entityData = new MetaObjectEntityData();
			this.backupData = null;

			this.Class = _class;
			this.WorkspaceName = _workspaceName;
			this.UserID = _userID;
			this.Machine = _machine;
			this.VCStatusID = _VCStatusID;
			this.VCMachineID = _vCMachineID;
			this.WorkspaceTypeId = _WorkspaceTypeId;
			this.DateCreated = _dateCreated;
			this.LastModified = _lastModified;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MetaObject"/> instance.
		///</summary>
		///<param name="_class"></param>
		///<param name="_workspaceName"></param>
		///<param name="_userID"></param>
		///<param name="_machine"></param>
		///<param name="_VCStatusID"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_WorkspaceTypeId"></param>
		///<param name="_dateCreated"></param>
		///<param name="_lastModified"></param>
		public static MetaObject CreateMetaObject(System.String _class, System.String _workspaceName, System.Int32 _userID, 
			System.String _machine, System.Int32 _VCStatusID, System.String _vCMachineID, System.Int32? _WorkspaceTypeId, 
			System.DateTime? _dateCreated, System.DateTime? _lastModified)
		{
			MetaObject newMetaObject = new MetaObject();
			newMetaObject.Class = _class;
			newMetaObject.WorkspaceName = _workspaceName;
			newMetaObject.UserID = _userID;
			newMetaObject.Machine = _machine;
			newMetaObject.VCStatusID = _VCStatusID;
			newMetaObject.VCMachineID = _vCMachineID;
			newMetaObject.WorkspaceTypeId = _WorkspaceTypeId;
			newMetaObject.DateCreated = _dateCreated;
			newMetaObject.LastModified = _lastModified;
			return newMetaObject;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 pkid
		{
			get
			{
				return this.entityData.pkid; 
			}
			
			set
			{
				if (this.entityData.pkid == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.pkid, this.entityData.pkid);
				this.entityData.pkid = value;
				this.EntityId.pkid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.pkid, this.entityData.pkid);
				OnPropertyChanged("pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Class property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Class
		{
			get
			{
				return this.entityData.Class; 
			}
			
			set
			{
				if (this.entityData.Class == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.Class, this.entityData.Class);
				this.entityData.Class = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.Class, this.entityData.Class);
				OnPropertyChanged("Class");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this.entityData.WorkspaceName; 
			}
			
			set
			{
				if (this.entityData.WorkspaceName == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.WorkspaceName, this.entityData.WorkspaceName);
				this.entityData.WorkspaceName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.WorkspaceName, this.entityData.WorkspaceName);
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UserID
		{
			get
			{
				return this.entityData.UserID; 
			}
			
			set
			{
				if (this.entityData.UserID == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.UserID, this.entityData.UserID);
				this.entityData.UserID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.UserID, this.entityData.UserID);
				OnPropertyChanged("UserID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String Machine
		{
			get
			{
				return this.entityData.Machine; 
			}
			
			set
			{
				if (this.entityData.Machine == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.Machine, this.entityData.Machine);
				this.entityData.Machine = value;
				this.EntityId.Machine = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.Machine, this.entityData.Machine);
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Machine property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Machine property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMachine
		{
			get { return this.entityData.OriginalMachine; }
			set { this.entityData.OriginalMachine = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this.entityData.VCStatusID; 
			}
			
			set
			{
				if (this.entityData.VCStatusID == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.VCStatusID, this.entityData.VCStatusID);
				this.entityData.VCStatusID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.VCStatusID, this.entityData.VCStatusID);
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this.entityData.VCMachineID; 
			}
			
			set
			{
				if (this.entityData.VCMachineID == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.VCMachineID, this.entityData.VCMachineID);
				this.entityData.VCMachineID = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.VCMachineID, this.entityData.VCMachineID);
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkspaceTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? WorkspaceTypeId
		{
			get
			{
				return this.entityData.WorkspaceTypeId; 
			}
			
			set
			{
				if (this.entityData.WorkspaceTypeId == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.WorkspaceTypeId, this.entityData.WorkspaceTypeId);
				this.entityData.WorkspaceTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.WorkspaceTypeId, this.entityData.WorkspaceTypeId);
				OnPropertyChanged("WorkspaceTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateCreated property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsDateCreatedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateCreated
		{
			get
			{
				return this.entityData.DateCreated; 
			}
			
			set
			{
				if (this.entityData.DateCreated == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.DateCreated, this.entityData.DateCreated);
				this.entityData.DateCreated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.DateCreated, this.entityData.DateCreated);
				OnPropertyChanged("DateCreated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsLastModifiedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(MetaObjectColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MetaObjectColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for Class.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Class ClassSource
      	{
            get { return entityData.ClassSource; }
            set { entityData.ClassSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User UserIDSource
      	{
            get { return entityData.UserIDSource; }
            set { entityData.UserIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="VCStatus"/>.
		/// </summary>
		/// <value>The source VCStatus for VCStatusID.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual VCStatus VCStatusIDSource
      	{
            get { return entityData.VCStatusIDSource; }
            set { entityData.VCStatusIDSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Workspace"/>.
		/// </summary>
		/// <value>The source Workspace for WorkspaceNameWorkspaceTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Workspace WorkspaceNameWorkspaceTypeIdSource
      	{
            get { return entityData.WorkspaceNameWorkspaceTypeIdSource; }
            set { entityData.WorkspaceNameWorkspaceTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ObjectAssociation objects
		///	which are related to this object through the relation FK_ObjectAssociation_MetaObject1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ObjectAssociation> ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine
		{
			get { return entityData.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine; }
			set { entityData.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine = value; }	
		}

		/// <summary>
		///	Holds a collection of GraphFileFromGraphFileObject objects
		///	which are related to this object through the junction table GraphFileObject
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GraphFile> GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject
		{
			get { return entityData.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject; }
			set { entityData.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ObjectAssociation objects
		///	which are related to this object through the relation FK_ObjectAssociation_MetaObject
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ObjectAssociation> ObjectAssociationCollectionGetByObjectIDObjectMachine
		{
			get { return entityData.ObjectAssociationCollectionGetByObjectIDObjectMachine; }
			set { entityData.ObjectAssociationCollectionGetByObjectIDObjectMachine = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Artifact objects
		///	which are related to this object through the relation FK_Artifact_MetaObject2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Artifact> ArtifactCollectionGetByArtifactObjectIDArtefactMachine
		{
			get { return entityData.ArtifactCollectionGetByArtifactObjectIDArtefactMachine; }
			set { entityData.ArtifactCollectionGetByArtifactObjectIDArtefactMachine = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Artifact objects
		///	which are related to this object through the relation FK_Artifact_MetaObject
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Artifact> ArtifactCollectionGetByObjectIDObjectMachine
		{
			get { return entityData.ArtifactCollectionGetByObjectIDObjectMachine; }
			set { entityData.ArtifactCollectionGetByObjectIDObjectMachine = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ObjectFieldValue objects
		///	which are related to this object through the relation FK_ObjectFieldValue_MetaObject
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ObjectFieldValue> ObjectFieldValueCollection
		{
			get { return entityData.ObjectFieldValueCollection; }
			set { entityData.ObjectFieldValueCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of ClassAssociationFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ClassAssociation> CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation
		{
			get { return entityData.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation; }
			set { entityData.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = value; }	
		}

		/// <summary>
		///	Holds a collection of ClassAssociationFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ClassAssociation> CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation
		{
			get { return entityData.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation; }
			set { entityData.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GraphFileObject objects
		///	which are related to this object through the relation FK_GraphFileObject_MetaObject
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GraphFileObject> GraphFileObjectCollection
		{
			get { return entityData.GraphFileObjectCollection; }
			set { entityData.GraphFileObjectCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of MetaObjectFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MetaObject> ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get { return entityData.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation; }
			set { entityData.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Artifact objects
		///	which are related to this object through the relation FK_Artifact_MetaObject1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Artifact> ArtifactCollectionGetByChildObjectIDChildObjectMachine
		{
			get { return entityData.ArtifactCollectionGetByChildObjectIDChildObjectMachine; }
			set { entityData.ArtifactCollectionGetByChildObjectIDChildObjectMachine = value; }	
		}

		/// <summary>
		///	Holds a collection of MetaObjectFromObjectAssociation objects
		///	which are related to this object through the junction table ObjectAssociation
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MetaObject> ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get { return entityData.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation; }
			set { entityData.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }	
		}

		/// <summary>
		///	Holds a collection of FieldFromObjectFieldValue objects
		///	which are related to this object through the junction table ObjectFieldValue
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Field> FieldIDFieldCollection_From_ObjectFieldValue
		{
			get { return entityData.FieldIDFieldCollection_From_ObjectFieldValue; }
			set { entityData.FieldIDFieldCollection_From_ObjectFieldValue = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Class", "Class"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Class", "Class", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("WorkspaceName", "Workspace Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WorkspaceName", "Workspace Name", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Machine", "Machine"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Machine", "Machine", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VCMachineID", "VC Machine ID", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MetaObject"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"pkid", "Class", "WorkspaceName", "UserID", "Machine", "VCStatusID", "VCMachineID", "WorkspaceTypeId", "DateCreated", "LastModified"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MetaObjectEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MetaObject) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MetaObject>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MetaObject);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MetaObject Entity 
		///</summary>
		protected virtual MetaObject Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MetaObject copy = new MetaObject();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.pkid = this.pkid;
				copy.Class = this.Class;
				copy.WorkspaceName = this.WorkspaceName;
				copy.UserID = this.UserID;
				copy.Machine = this.Machine;
					copy.OriginalMachine = this.OriginalMachine;
				copy.VCStatusID = this.VCStatusID;
				copy.VCMachineID = this.VCMachineID;
				copy.WorkspaceTypeId = this.WorkspaceTypeId;
				copy.DateCreated = this.DateCreated;
				copy.LastModified = this.LastModified;
			
			if (this.ClassSource != null && existingCopies.Contains(this.ClassSource))
				copy.ClassSource = existingCopies[this.ClassSource] as Class;
			else
				copy.ClassSource = MakeCopyOf(this.ClassSource, existingCopies) as Class;
			if (this.UserIDSource != null && existingCopies.Contains(this.UserIDSource))
				copy.UserIDSource = existingCopies[this.UserIDSource] as User;
			else
				copy.UserIDSource = MakeCopyOf(this.UserIDSource, existingCopies) as User;
			if (this.VCStatusIDSource != null && existingCopies.Contains(this.VCStatusIDSource))
				copy.VCStatusIDSource = existingCopies[this.VCStatusIDSource] as VCStatus;
			else
				copy.VCStatusIDSource = MakeCopyOf(this.VCStatusIDSource, existingCopies) as VCStatus;
			if (this.WorkspaceNameWorkspaceTypeIdSource != null && existingCopies.Contains(this.WorkspaceNameWorkspaceTypeIdSource))
				copy.WorkspaceNameWorkspaceTypeIdSource = existingCopies[this.WorkspaceNameWorkspaceTypeIdSource] as Workspace;
			else
				copy.WorkspaceNameWorkspaceTypeIdSource = MakeCopyOf(this.WorkspaceNameWorkspaceTypeIdSource, existingCopies) as Workspace;
		
			//deep copy nested objects
			copy.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine, existingCopies); 
			copy.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = (TList<GraphFile>) MakeCopyOf(this.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject, existingCopies); 
			copy.ObjectAssociationCollectionGetByObjectIDObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByObjectIDObjectMachine, existingCopies); 
			copy.ArtifactCollectionGetByArtifactObjectIDArtefactMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByArtifactObjectIDArtefactMachine, existingCopies); 
			copy.ArtifactCollectionGetByObjectIDObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByObjectIDObjectMachine, existingCopies); 
			copy.ObjectFieldValueCollection = (TList<ObjectFieldValue>) MakeCopyOf(this.ObjectFieldValueCollection, existingCopies); 
			copy.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation, existingCopies); 
			copy.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation, existingCopies); 
			copy.GraphFileObjectCollection = (TList<GraphFileObject>) MakeCopyOf(this.GraphFileObjectCollection, existingCopies); 
			copy.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			copy.ArtifactCollectionGetByChildObjectIDChildObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByChildObjectIDChildObjectMachine, existingCopies); 
			copy.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			copy.FieldIDFieldCollection_From_ObjectFieldValue = (TList<Field>) MakeCopyOf(this.FieldIDFieldCollection_From_ObjectFieldValue, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MetaObject Entity 
		///</summary>
		public virtual MetaObject Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MetaObject Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MetaObject DeepCopy()
		{
			return EntityHelper.Clone<MetaObject>(this as MetaObject);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MetaObjectEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MetaObjectEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MetaObjectEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MetaObjectColumn column)
		{
			switch(column)
			{
					case MetaObjectColumn.pkid:
					return entityData.pkid != _originalData.pkid;
					case MetaObjectColumn.Class:
					return entityData.Class != _originalData.Class;
					case MetaObjectColumn.WorkspaceName:
					return entityData.WorkspaceName != _originalData.WorkspaceName;
					case MetaObjectColumn.UserID:
					return entityData.UserID != _originalData.UserID;
					case MetaObjectColumn.Machine:
					return entityData.Machine != _originalData.Machine;
					case MetaObjectColumn.VCStatusID:
					return entityData.VCStatusID != _originalData.VCStatusID;
					case MetaObjectColumn.VCMachineID:
					return entityData.VCMachineID != _originalData.VCMachineID;
					case MetaObjectColumn.WorkspaceTypeId:
					return entityData.WorkspaceTypeId != _originalData.WorkspaceTypeId;
					case MetaObjectColumn.DateCreated:
					return entityData.DateCreated != _originalData.DateCreated;
					case MetaObjectColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MetaObjectColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.pkid != _originalData.pkid;
			result = result || entityData.Class != _originalData.Class;
			result = result || entityData.WorkspaceName != _originalData.WorkspaceName;
			result = result || entityData.UserID != _originalData.UserID;
			result = result || entityData.Machine != _originalData.Machine;
			result = result || entityData.VCStatusID != _originalData.VCStatusID;
			result = result || entityData.VCMachineID != _originalData.VCMachineID;
			result = result || entityData.WorkspaceTypeId != _originalData.WorkspaceTypeId;
			result = result || entityData.DateCreated != _originalData.DateCreated;
			result = result || entityData.LastModified != _originalData.LastModified;
			return result;
		}	
		
		///<summary>
		///  Returns a MetaObject Entity with the original data.
		///</summary>
		public MetaObject GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMetaObject(
				_originalData.Class,
				_originalData.WorkspaceName,
				_originalData.UserID,
				_originalData.Machine,
				_originalData.VCStatusID,
				_originalData.VCMachineID,
				_originalData.WorkspaceTypeId,
				_originalData.DateCreated,
				_originalData.LastModified
				);
				
			return (MetaObject)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MetaObjectBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MetaObjectBase)
				return ValueEquals(this, (MetaObjectBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MetaObjectBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.pkid.GetHashCode() ^ 
					this.Class.GetHashCode() ^ 
					this.WorkspaceName.GetHashCode() ^ 
					this.UserID.GetHashCode() ^ 
					this.Machine.GetHashCode() ^ 
					this.VCStatusID.GetHashCode() ^ 
					((this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString()).GetHashCode() ^ 
					((this.WorkspaceTypeId == null) ? string.Empty : this.WorkspaceTypeId.ToString()).GetHashCode() ^ 
					((this.DateCreated == null) ? string.Empty : this.DateCreated.ToString()).GetHashCode() ^ 
					((this.LastModified == null) ? string.Empty : this.LastModified.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MetaObjectBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MetaObjectBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MetaObjectBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MetaObjectBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MetaObjectBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MetaObjectBase Object1, MetaObjectBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.pkid != Object2.pkid)
				equal = false;
			if (Object1.Class != Object2.Class)
				equal = false;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.UserID != Object2.UserID)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if ( Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object2.VCMachineID == null )
			{
				equal = false;
			}
			if ( Object1.WorkspaceTypeId != null && Object2.WorkspaceTypeId != null )
			{
				if (Object1.WorkspaceTypeId != Object2.WorkspaceTypeId)
					equal = false;
			}
			else if (Object1.WorkspaceTypeId == null ^ Object2.WorkspaceTypeId == null )
			{
				equal = false;
			}
			if ( Object1.DateCreated != null && Object2.DateCreated != null )
			{
				if (Object1.DateCreated != Object2.DateCreated)
					equal = false;
			}
			else if (Object1.DateCreated == null ^ Object2.DateCreated == null )
			{
				equal = false;
			}
			if ( Object1.LastModified != null && Object2.LastModified != null )
			{
				if (Object1.LastModified != Object2.LastModified)
					equal = false;
			}
			else if (Object1.LastModified == null ^ Object2.LastModified == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MetaObjectBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MetaObjectComparer GetComparer()
        {
            return new MetaObjectComparer();
        }
        */

        // Comparer delegates back to MetaObject
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MetaObject rhs, MetaObjectColumn which)
        {
            switch (which)
            {
            	
            	
            	case MetaObjectColumn.pkid:
            		return this.pkid.CompareTo(rhs.pkid);
            		
            		                 
            	
            	
            	case MetaObjectColumn.Class:
            		return this.Class.CompareTo(rhs.Class);
            		
            		                 
            	
            	
            	case MetaObjectColumn.WorkspaceName:
            		return this.WorkspaceName.CompareTo(rhs.WorkspaceName);
            		
            		                 
            	
            	
            	case MetaObjectColumn.UserID:
            		return this.UserID.CompareTo(rhs.UserID);
            		
            		                 
            	
            	
            	case MetaObjectColumn.Machine:
            		return this.Machine.CompareTo(rhs.Machine);
            		
            		                 
            	
            	
            	case MetaObjectColumn.VCStatusID:
            		return this.VCStatusID.CompareTo(rhs.VCStatusID);
            		
            		                 
            	
            	
            	case MetaObjectColumn.VCMachineID:
            		return this.VCMachineID.CompareTo(rhs.VCMachineID);
            		
            		                 
            	
            	
            	case MetaObjectColumn.WorkspaceTypeId:
            		return this.WorkspaceTypeId.Value.CompareTo(rhs.WorkspaceTypeId.Value);
            		
            		                 
            	
            	
            	case MetaObjectColumn.DateCreated:
            		return this.DateCreated.Value.CompareTo(rhs.DateCreated.Value);
            		
            		                 
            	
            	
            	case MetaObjectColumn.LastModified:
            		return this.LastModified.Value.CompareTo(rhs.LastModified.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MetaObjectKey> Members
		
		// member variable for the EntityId property
		private MetaObjectKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MetaObjectKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MetaObjectKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) ]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MetaObject")
					.Append("|").Append( this.pkid.ToString())
					.Append("|").Append( this.Machine.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- pkid: {0}{10}- Class: {1}{10}- WorkspaceName: {2}{10}- UserID: {3}{10}- Machine: {4}{10}- VCStatusID: {5}{10}- VCMachineID: {6}{10}- WorkspaceTypeId: {7}{10}- DateCreated: {8}{10}- LastModified: {9}{10}{12}", 
				this.pkid,
				this.Class,
				this.WorkspaceName,
				this.UserID,
				this.Machine,
				this.VCStatusID,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
				(this.WorkspaceTypeId == null) ? string.Empty : this.WorkspaceTypeId.ToString(),
				(this.DateCreated == null) ? string.Empty : this.DateCreated.ToString(),
				(this.LastModified == null) ? string.Empty : this.LastModified.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MetaObject' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MetaObjectEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// pkid : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MetaObject"</remarks>
		public System.Int32 pkid;
			
		/// <summary>			
		/// Machine : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MetaObject"</remarks>
		public System.String Machine;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalMachine;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Class : 
		/// </summary>
		public System.String		  Class = string.Empty;
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		public System.String		  WorkspaceName = string.Empty;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32		  UserID = (int)0;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		public System.Int32		  VCStatusID = (int)7;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		public System.String		  VCMachineID = null;
		
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		public System.Int32?		  WorkspaceTypeId = null;
		
		/// <summary>
		/// DateCreated : 
		/// </summary>
		public System.DateTime?		  DateCreated = DateTime.Now;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime?		  LastModified = DateTime.Now;
		#endregion
			
		#region Source Foreign Key Property
				
		private Class _classSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Class"/>.
		/// </summary>
		/// <value>The source Class for Class.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Class ClassSource
      	{
            get { return this._classSource; }
            set { this._classSource = value; }
      	}
		private User _userIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual User UserIDSource
      	{
            get { return this._userIDSource; }
            set { this._userIDSource = value; }
      	}
		private VCStatus _VCStatusIDSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="VCStatus"/>.
		/// </summary>
		/// <value>The source VCStatus for VCStatusID.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual VCStatus VCStatusIDSource
      	{
            get { return this._VCStatusIDSource; }
            set { this._VCStatusIDSource = value; }
      	}
		private Workspace _workspaceNameWorkspaceTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Workspace"/>.
		/// </summary>
		/// <value>The source Workspace for WorkspaceNameWorkspaceTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Workspace WorkspaceNameWorkspaceTypeIdSource
      	{
            get { return this._workspaceNameWorkspaceTypeIdSource; }
            set { this._workspaceNameWorkspaceTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine
		
		private TList<ObjectAssociation> _objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine
		/// </summary>
		
		public TList<ObjectAssociation> ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine
		{
			get
			{
				if (_objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine == null)
				{
				_objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine = new TList<ObjectAssociation>();
				}
	
				return _objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine;
			}
			set { _objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine = value; }
		}
		
		#endregion

		#region GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject
		
		private TList<GraphFile> graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject
		/// </summary>
		
		public TList<GraphFile> GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject
		{
			get
			{
				if (graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject == null)
				{
				graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = new TList<GraphFile>();
				}
	
				return graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject;
			}
			set { graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = value; }
		}
		
		#endregion 

		#region ObjectAssociationCollectionGetByObjectIDObjectMachine
		
		private TList<ObjectAssociation> _objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine
		/// </summary>
		
		public TList<ObjectAssociation> ObjectAssociationCollectionGetByObjectIDObjectMachine
		{
			get
			{
				if (_objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine == null)
				{
				_objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine = new TList<ObjectAssociation>();
				}
	
				return _objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine;
			}
			set { _objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine = value; }
		}
		
		#endregion

		#region ArtifactCollectionGetByArtifactObjectIDArtefactMachine
		
		private TList<Artifact> _artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine
		/// </summary>
		
		public TList<Artifact> ArtifactCollectionGetByArtifactObjectIDArtefactMachine
		{
			get
			{
				if (_artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine == null)
				{
				_artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine = new TList<Artifact>();
				}
	
				return _artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine;
			}
			set { _artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine = value; }
		}
		
		#endregion

		#region ArtifactCollectionGetByObjectIDObjectMachine
		
		private TList<Artifact> _artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine
		/// </summary>
		
		public TList<Artifact> ArtifactCollectionGetByObjectIDObjectMachine
		{
			get
			{
				if (_artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine == null)
				{
				_artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine = new TList<Artifact>();
				}
	
				return _artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine;
			}
			set { _artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine = value; }
		}
		
		#endregion

		#region ObjectFieldValueCollection
		
		private TList<ObjectFieldValue> _objectFieldValueObjectIDMachineID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _objectFieldValueObjectIDMachineID
		/// </summary>
		
		public TList<ObjectFieldValue> ObjectFieldValueCollection
		{
			get
			{
				if (_objectFieldValueObjectIDMachineID == null)
				{
				_objectFieldValueObjectIDMachineID = new TList<ObjectFieldValue>();
				}
	
				return _objectFieldValueObjectIDMachineID;
			}
			set { _objectFieldValueObjectIDMachineID = value; }
		}
		
		#endregion

		#region CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation
		
		private TList<ClassAssociation> cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation
		/// </summary>
		
		public TList<ClassAssociation> CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation
		{
			get
			{
				if (cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation == null)
				{
				cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = new TList<ClassAssociation>();
				}
	
				return cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation;
			}
			set { cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = value; }
		}
		
		#endregion 

		#region CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation
		
		private TList<ClassAssociation> cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation
		/// </summary>
		
		public TList<ClassAssociation> CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation
		{
			get
			{
				if (cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation == null)
				{
				cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = new TList<ClassAssociation>();
				}
	
				return cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation;
			}
			set { cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = value; }
		}
		
		#endregion 

		#region GraphFileObjectCollection
		
		private TList<GraphFileObject> _graphFileObjectMetaObjectIDMachineID;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _graphFileObjectMetaObjectIDMachineID
		/// </summary>
		
		public TList<GraphFileObject> GraphFileObjectCollection
		{
			get
			{
				if (_graphFileObjectMetaObjectIDMachineID == null)
				{
				_graphFileObjectMetaObjectIDMachineID = new TList<GraphFileObject>();
				}
	
				return _graphFileObjectMetaObjectIDMachineID;
			}
			set { _graphFileObjectMetaObjectIDMachineID = value; }
		}
		
		#endregion

		#region ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		
		private TList<MetaObject> objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		/// </summary>
		
		public TList<MetaObject> ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get
			{
				if (objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation == null)
				{
				objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = new TList<MetaObject>();
				}
	
				return objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation;
			}
			set { objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }
		}
		
		#endregion 

		#region ArtifactCollectionGetByChildObjectIDChildObjectMachine
		
		private TList<Artifact> _artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine
		/// </summary>
		
		public TList<Artifact> ArtifactCollectionGetByChildObjectIDChildObjectMachine
		{
			get
			{
				if (_artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine == null)
				{
				_artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine = new TList<Artifact>();
				}
	
				return _artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine;
			}
			set { _artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine = value; }
		}
		
		#endregion

		#region ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		
		private TList<MetaObject> childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		/// </summary>
		
		public TList<MetaObject> ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation
		{
			get
			{
				if (childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation == null)
				{
				childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = new TList<MetaObject>();
				}
	
				return childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation;
			}
			set { childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = value; }
		}
		
		#endregion 

		#region FieldIDFieldCollection_From_ObjectFieldValue
		
		private TList<Field> fieldIDFieldCollection_From_ObjectFieldValue;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table fieldIDFieldCollection_From_ObjectFieldValue
		/// </summary>
		
		public TList<Field> FieldIDFieldCollection_From_ObjectFieldValue
		{
			get
			{
				if (fieldIDFieldCollection_From_ObjectFieldValue == null)
				{
				fieldIDFieldCollection_From_ObjectFieldValue = new TList<Field>();
				}
	
				return fieldIDFieldCollection_From_ObjectFieldValue;
			}
			set { fieldIDFieldCollection_From_ObjectFieldValue = value; }
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MetaObjectEntityData _tmp = new MetaObjectEntityData();
						
			_tmp.pkid = this.pkid;
			_tmp.Machine = this.Machine;
			_tmp.OriginalMachine = this.OriginalMachine;
			
			_tmp.Class = this.Class;
			_tmp.WorkspaceName = this.WorkspaceName;
			_tmp.UserID = this.UserID;
			_tmp.VCStatusID = this.VCStatusID;
			_tmp.VCMachineID = this.VCMachineID;
			_tmp.WorkspaceTypeId = this.WorkspaceTypeId;
			_tmp.DateCreated = this.DateCreated;
			_tmp.LastModified = this.LastModified;
			
			#region Source Parent Composite Entities
			if (this.ClassSource != null)
				_tmp.ClassSource = MakeCopyOf(this.ClassSource) as Class;
			if (this.UserIDSource != null)
				_tmp.UserIDSource = MakeCopyOf(this.UserIDSource) as User;
			if (this.VCStatusIDSource != null)
				_tmp.VCStatusIDSource = MakeCopyOf(this.VCStatusIDSource) as VCStatus;
			if (this.WorkspaceNameWorkspaceTypeIdSource != null)
				_tmp.WorkspaceNameWorkspaceTypeIdSource = MakeCopyOf(this.WorkspaceNameWorkspaceTypeIdSource) as Workspace;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._objectAssociationChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine != null)
				_tmp.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine); 
			if (this.graphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject != null)
				_tmp.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = (TList<GraphFile>) MakeCopyOf(this.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject); 
			if (this._objectAssociationChildObjectIDChildObjectMachineGetByObjectIDObjectMachine != null)
				_tmp.ObjectAssociationCollectionGetByObjectIDObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByObjectIDObjectMachine); 
			if (this._artifactArtifactObjectIDArtefactMachineGetByArtifactObjectIDArtefactMachine != null)
				_tmp.ArtifactCollectionGetByArtifactObjectIDArtefactMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByArtifactObjectIDArtefactMachine); 
			if (this._artifactArtifactObjectIDArtefactMachineGetByObjectIDObjectMachine != null)
				_tmp.ArtifactCollectionGetByObjectIDObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByObjectIDObjectMachine); 
			if (this._objectFieldValueObjectIDMachineID != null)
				_tmp.ObjectFieldValueCollection = (TList<ObjectFieldValue>) MakeCopyOf(this.ObjectFieldValueCollection); 
			if (this.cAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation != null)
				_tmp.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation); 
			if (this.cAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation != null)
				_tmp.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation); 
			if (this._graphFileObjectMetaObjectIDMachineID != null)
				_tmp.GraphFileObjectCollection = (TList<GraphFileObject>) MakeCopyOf(this.GraphFileObjectCollection); 
			if (this.objectIDObjectMachineMetaObjectCollection_From_ObjectAssociation != null)
				_tmp.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation); 
			if (this._artifactChildObjectIDChildObjectMachineGetByChildObjectIDChildObjectMachine != null)
				_tmp.ArtifactCollectionGetByChildObjectIDChildObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByChildObjectIDChildObjectMachine); 
			if (this.childObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation != null)
				_tmp.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation); 
			if (this.fieldIDFieldCollection_From_ObjectFieldValue != null)
				_tmp.FieldIDFieldCollection_From_ObjectFieldValue = (TList<Field>) MakeCopyOf(this.FieldIDFieldCollection_From_ObjectFieldValue); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MetaObjectEntityData _tmp = new MetaObjectEntityData();
						
			_tmp.pkid = this.pkid;
			_tmp.Machine = this.Machine;
			_tmp.OriginalMachine = this.OriginalMachine;
			
			_tmp.Class = this.Class;
			_tmp.WorkspaceName = this.WorkspaceName;
			_tmp.UserID = this.UserID;
			_tmp.VCStatusID = this.VCStatusID;
			_tmp.VCMachineID = this.VCMachineID;
			_tmp.WorkspaceTypeId = this.WorkspaceTypeId;
			_tmp.DateCreated = this.DateCreated;
			_tmp.LastModified = this.LastModified;
			
			#region Source Parent Composite Entities
			if (this.ClassSource != null && existingCopies.Contains(this.ClassSource))
				_tmp.ClassSource = existingCopies[this.ClassSource] as Class;
			else
				_tmp.ClassSource = MakeCopyOf(this.ClassSource, existingCopies) as Class;
			if (this.UserIDSource != null && existingCopies.Contains(this.UserIDSource))
				_tmp.UserIDSource = existingCopies[this.UserIDSource] as User;
			else
				_tmp.UserIDSource = MakeCopyOf(this.UserIDSource, existingCopies) as User;
			if (this.VCStatusIDSource != null && existingCopies.Contains(this.VCStatusIDSource))
				_tmp.VCStatusIDSource = existingCopies[this.VCStatusIDSource] as VCStatus;
			else
				_tmp.VCStatusIDSource = MakeCopyOf(this.VCStatusIDSource, existingCopies) as VCStatus;
			if (this.WorkspaceNameWorkspaceTypeIdSource != null && existingCopies.Contains(this.WorkspaceNameWorkspaceTypeIdSource))
				_tmp.WorkspaceNameWorkspaceTypeIdSource = existingCopies[this.WorkspaceNameWorkspaceTypeIdSource] as Workspace;
			else
				_tmp.WorkspaceNameWorkspaceTypeIdSource = MakeCopyOf(this.WorkspaceNameWorkspaceTypeIdSource, existingCopies) as Workspace;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByChildObjectIDChildObjectMachine, existingCopies); 
			_tmp.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject = (TList<GraphFile>) MakeCopyOf(this.GraphFileIDGraphFileMachineGraphFileCollection_From_GraphFileObject, existingCopies); 
			_tmp.ObjectAssociationCollectionGetByObjectIDObjectMachine = (TList<ObjectAssociation>) MakeCopyOf(this.ObjectAssociationCollectionGetByObjectIDObjectMachine, existingCopies); 
			_tmp.ArtifactCollectionGetByArtifactObjectIDArtefactMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByArtifactObjectIDArtefactMachine, existingCopies); 
			_tmp.ArtifactCollectionGetByObjectIDObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByObjectIDObjectMachine, existingCopies); 
			_tmp.ObjectFieldValueCollection = (TList<ObjectFieldValue>) MakeCopyOf(this.ObjectFieldValueCollection, existingCopies); 
			_tmp.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationChildObjectIDChildObjectMachineFromObjectAssociation, existingCopies); 
			_tmp.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation = (TList<ClassAssociation>) MakeCopyOf(this.CAidClassAssociationCollection_From_ObjectAssociationObjectIDObjectMachineFromObjectAssociation, existingCopies); 
			_tmp.GraphFileObjectCollection = (TList<GraphFileObject>) MakeCopyOf(this.GraphFileObjectCollection, existingCopies); 
			_tmp.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ObjectIDObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			_tmp.ArtifactCollectionGetByChildObjectIDChildObjectMachine = (TList<Artifact>) MakeCopyOf(this.ArtifactCollectionGetByChildObjectIDChildObjectMachine, existingCopies); 
			_tmp.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation = (TList<MetaObject>) MakeCopyOf(this.ChildObjectIDChildObjectMachineMetaObjectCollection_From_ObjectAssociation, existingCopies); 
			_tmp.FieldIDFieldCollection_From_ObjectFieldValue = (TList<Field>) MakeCopyOf(this.FieldIDFieldCollection_From_ObjectFieldValue, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false)]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MetaObjectColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MetaObjectColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MetaObjectColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MetaObjectColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MetaObjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MetaObjectColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MetaObjectEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MetaObjectEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MetaObjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MetaObjectColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MetaObjectEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MetaObjectEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MetaObjectEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MetaObject"/> object.
	/// </remarks>
	public class MetaObjectEventArgs : System.EventArgs
	{
		private MetaObjectColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MetaObjectEventArgs class.
		///</summary>
		public MetaObjectEventArgs(MetaObjectColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MetaObjectEventArgs class.
		///</summary>
		public MetaObjectEventArgs(MetaObjectColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MetaObjectColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MetaObjectColumn" />
		public MetaObjectColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MetaObject related events.
	///</summary>
	public delegate void MetaObjectEventHandler(object sender, MetaObjectEventArgs e);
	
	#region MetaObjectComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MetaObjectComparer : System.Collections.Generic.IComparer<MetaObject>
	{
		MetaObjectColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MetaObjectComparer"/> class.
        /// </summary>
		public MetaObjectComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MetaObjectComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MetaObjectComparer(MetaObjectColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MetaObject"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MetaObject"/> to compare.</param>
        /// <param name="b">The second <c>MetaObject</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MetaObject a, MetaObject b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MetaObject entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MetaObject a, MetaObject b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MetaObjectColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MetaObjectKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MetaObject"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MetaObjectKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MetaObjectKey class.
		/// </summary>
		public MetaObjectKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MetaObjectKey class.
		/// </summary>
		public MetaObjectKey(MetaObjectBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.pkid = entity.pkid;
				this.Machine = entity.Machine;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MetaObjectKey class.
		/// </summary>
		public MetaObjectKey(System.Int32 _pkid, System.String _machine)
		{
			#region Init Properties

			this.pkid = _pkid;
			this.Machine = _machine;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MetaObjectBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MetaObjectBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the pkid property
		private System.Int32 _pkid;
		
		/// <summary>
		/// Gets or sets the pkid property.
		/// </summary>
		public System.Int32 pkid
		{
			get { return _pkid; }
			set
			{
				if ( this.Entity != null )
					this.Entity.pkid = value;
				
				_pkid = value;
			}
		}
		
		// member variable for the Machine property
		private System.String _machine;
		
		/// <summary>
		/// Gets or sets the Machine property.
		/// </summary>
		public System.String Machine
		{
			get { return _machine; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Machine = value;
				
				_machine = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				pkid = ( values["pkid"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["pkid"], typeof(System.Int32)) : (int)0;
				Machine = ( values["Machine"] != null ) ? (System.String) EntityUtil.ChangeType(values["Machine"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("pkid", pkid);
			values.Add("Machine", Machine);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("pkid: {0}{2}Machine: {1}{2}",
								pkid,
								Machine,
								System.Environment.NewLine);
		}

		#endregion Methods

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }
	}
	
	#endregion	

	#region MetaObjectColumn Enum
	
	/// <summary>
	/// Enumerate the MetaObject columns.
	/// </summary>
	[Serializable]
	public enum MetaObjectColumn : int
	{
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		pkid = 1,
		/// <summary>
		/// Class : 
		/// </summary>
		[EnumTextValue("Class")]
		[ColumnEnum("Class", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Class = 2,
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName = 3,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserID = 4,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 50)]
		Machine = 5,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID = 6,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID = 7,
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeId")]
		[ColumnEnum("WorkspaceTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeId = 8,
		/// <summary>
		/// DateCreated : 
		/// </summary>
		[EnumTextValue("DateCreated")]
		[ColumnEnum("DateCreated", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateCreated = 9,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModified = 10
	}//End enum

	#endregion MetaObjectColumn Enum

} // end namespace
