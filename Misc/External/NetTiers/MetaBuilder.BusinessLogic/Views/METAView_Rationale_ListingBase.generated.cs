/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file METAView_Rationale_Listing.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'METAView_Rationale_Listing' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("METAView_Rationale_ListingBase")]
	public abstract partial class METAView_Rationale_ListingBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		private System.String		  _workspaceName = string.Empty;
		
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		private System.Int32?		  _workspaceTypeId = null;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		private System.Int32		  _vCStatusID = (int)0;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Machine : 
		/// </summary>
		private System.String		  _machine = string.Empty;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		private System.String		  _vCMachineID = null;
		
		/// <summary>
		/// UniqueRef : 
		/// </summary>
		private System.String		  _uniqueRef = null;
		
		/// <summary>
		/// RationaleType : 
		/// </summary>
		private System.String		  _rationaleType = null;
		
		/// <summary>
		/// Value : 
		/// </summary>
		private System.String		  _value = null;
		
		/// <summary>
		/// AuthorName : 
		/// </summary>
		private System.String		  _authorName = null;
		
		/// <summary>
		/// EffectiveDate : 
		/// </summary>
		private System.String		  _effectiveDate = null;
		
		/// <summary>
		/// LongDescription : 
		/// </summary>
		private System.String		  _longDescription = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="METAView_Rationale_ListingBase"/> instance.
		///</summary>
		public METAView_Rationale_ListingBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="METAView_Rationale_ListingBase"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_uniqueRef"></param>
		///<param name="_rationaleType"></param>
		///<param name="_value"></param>
		///<param name="_authorName"></param>
		///<param name="_effectiveDate"></param>
		///<param name="_longDescription"></param>
		public METAView_Rationale_ListingBase(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _uniqueRef, System.String _rationaleType, System.String _value, System.String _authorName, System.String _effectiveDate, System.String _longDescription)
		{
			this._workspaceName = _workspaceName;
			this._workspaceTypeId = _workspaceTypeId;
			this._vCStatusID = _vCStatusID;
			this._pkid = _pkid;
			this._machine = _machine;
			this._vCMachineID = _vCMachineID;
			this._uniqueRef = _uniqueRef;
			this._rationaleType = _rationaleType;
			this._value = _value;
			this._authorName = _authorName;
			this._effectiveDate = _effectiveDate;
			this._longDescription = _longDescription;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="METAView_Rationale_Listing"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_uniqueRef"></param>
		///<param name="_rationaleType"></param>
		///<param name="_value"></param>
		///<param name="_authorName"></param>
		///<param name="_effectiveDate"></param>
		///<param name="_longDescription"></param>
		public static METAView_Rationale_Listing CreateMETAView_Rationale_Listing(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _uniqueRef, System.String _rationaleType, System.String _value, System.String _authorName, System.String _effectiveDate, System.String _longDescription)
		{
			METAView_Rationale_Listing newMETAView_Rationale_Listing = new METAView_Rationale_Listing();
			newMETAView_Rationale_Listing.WorkspaceName = _workspaceName;
			newMETAView_Rationale_Listing.WorkspaceTypeId = _workspaceTypeId;
			newMETAView_Rationale_Listing.VCStatusID = _vCStatusID;
			newMETAView_Rationale_Listing.pkid = _pkid;
			newMETAView_Rationale_Listing.Machine = _machine;
			newMETAView_Rationale_Listing.VCMachineID = _vCMachineID;
			newMETAView_Rationale_Listing.UniqueRef = _uniqueRef;
			newMETAView_Rationale_Listing.RationaleType = _rationaleType;
			newMETAView_Rationale_Listing.Value = _value;
			newMETAView_Rationale_Listing.AuthorName = _authorName;
			newMETAView_Rationale_Listing.EffectiveDate = _effectiveDate;
			newMETAView_Rationale_Listing.LongDescription = _longDescription;
			return newMETAView_Rationale_Listing;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this._workspaceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WorkspaceName does not allow null values.");
				if (_workspaceName == value)
					return;
					
				this._workspaceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? WorkspaceTypeId
		{
			get
			{
				return this._workspaceTypeId; 
			}
			set
			{
				if (_workspaceTypeId == value && WorkspaceTypeId != null )
					return;
					
				this._workspaceTypeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this._vCStatusID; 
			}
			set
			{
				if (_vCStatusID == value)
					return;
					
				this._vCStatusID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Machine
		{
			get
			{
				return this._machine; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Machine does not allow null values.");
				if (_machine == value)
					return;
					
				this._machine = value;
				this._isDirty = true;
				
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this._vCMachineID; 
			}
			set
			{
				if (_vCMachineID == value)
					return;
					
				this._vCMachineID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UniqueRef property. 
		///		
		/// </summary>
		/// <value>This type is text</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UniqueRef
		{
			get
			{
				return this._uniqueRef; 
			}
			set
			{
				if (_uniqueRef == value)
					return;
					
				this._uniqueRef = value;
				this._isDirty = true;
				
				OnPropertyChanged("UniqueRef");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RationaleType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RationaleType
		{
			get
			{
				return this._rationaleType; 
			}
			set
			{
				if (_rationaleType == value)
					return;
					
				this._rationaleType = value;
				this._isDirty = true;
				
				OnPropertyChanged("RationaleType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Value property. 
		///		
		/// </summary>
		/// <value>This type is text</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Value
		{
			get
			{
				return this._value; 
			}
			set
			{
				if (_value == value)
					return;
					
				this._value = value;
				this._isDirty = true;
				
				OnPropertyChanged("Value");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AuthorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AuthorName
		{
			get
			{
				return this._authorName; 
			}
			set
			{
				if (_authorName == value)
					return;
					
				this._authorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("AuthorName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EffectiveDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EffectiveDate
		{
			get
			{
				return this._effectiveDate; 
			}
			set
			{
				if (_effectiveDate == value)
					return;
					
				this._effectiveDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("EffectiveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LongDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LongDescription
		{
			get
			{
				return this._longDescription; 
			}
			set
			{
				if (_longDescription == value)
					return;
					
				this._longDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("LongDescription");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "METAView_Rationale_Listing"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed METAView_Rationale_ListingBase Entity 
		///</summary>
		public virtual METAView_Rationale_ListingBase Copy()
		{
			//shallow copy entity
			METAView_Rationale_Listing copy = new METAView_Rationale_Listing();
				copy.WorkspaceName = this.WorkspaceName;
				copy.WorkspaceTypeId = this.WorkspaceTypeId;
				copy.VCStatusID = this.VCStatusID;
				copy.pkid = this.pkid;
				copy.Machine = this.Machine;
				copy.VCMachineID = this.VCMachineID;
				copy.UniqueRef = this.UniqueRef;
				copy.RationaleType = this.RationaleType;
				copy.Value = this.Value;
				copy.AuthorName = this.AuthorName;
				copy.EffectiveDate = this.EffectiveDate;
				copy.LongDescription = this.LongDescription;
			copy.AcceptChanges();
			return (METAView_Rationale_Listing)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="METAView_Rationale_ListingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(METAView_Rationale_ListingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="METAView_Rationale_ListingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="METAView_Rationale_ListingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="METAView_Rationale_ListingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(METAView_Rationale_ListingBase Object1, METAView_Rationale_ListingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.WorkspaceTypeId != null && Object2.WorkspaceTypeId != null )
			{
				if (Object1.WorkspaceTypeId != Object2.WorkspaceTypeId)
					equal = false;
			}
			else if (Object1.WorkspaceTypeId == null ^ Object1.WorkspaceTypeId == null )
			{
				equal = false;
			}
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if (Object1.pkid != Object2.pkid)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object1.VCMachineID == null )
			{
				equal = false;
			}
			if (Object1.UniqueRef != null && Object2.UniqueRef != null )
			{
				if (Object1.UniqueRef != Object2.UniqueRef)
					equal = false;
			}
			else if (Object1.UniqueRef == null ^ Object1.UniqueRef == null )
			{
				equal = false;
			}
			if (Object1.RationaleType != null && Object2.RationaleType != null )
			{
				if (Object1.RationaleType != Object2.RationaleType)
					equal = false;
			}
			else if (Object1.RationaleType == null ^ Object1.RationaleType == null )
			{
				equal = false;
			}
			if (Object1.Value != null && Object2.Value != null )
			{
				if (Object1.Value != Object2.Value)
					equal = false;
			}
			else if (Object1.Value == null ^ Object1.Value == null )
			{
				equal = false;
			}
			if (Object1.AuthorName != null && Object2.AuthorName != null )
			{
				if (Object1.AuthorName != Object2.AuthorName)
					equal = false;
			}
			else if (Object1.AuthorName == null ^ Object1.AuthorName == null )
			{
				equal = false;
			}
			if (Object1.EffectiveDate != null && Object2.EffectiveDate != null )
			{
				if (Object1.EffectiveDate != Object2.EffectiveDate)
					equal = false;
			}
			else if (Object1.EffectiveDate == null ^ Object1.EffectiveDate == null )
			{
				equal = false;
			}
			if (Object1.LongDescription != null && Object2.LongDescription != null )
			{
				if (Object1.LongDescription != Object2.LongDescription)
					equal = false;
			}
			else if (Object1.LongDescription == null ^ Object1.LongDescription == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(METAView_Rationale_Listing entity, string propertyName)
		{
			switch (propertyName)
			{
				case "WorkspaceName":
					return entity.WorkspaceName;
				case "WorkspaceTypeId":
					return entity.WorkspaceTypeId;
				case "VCStatusID":
					return entity.VCStatusID;
				case "pkid":
					return entity.pkid;
				case "Machine":
					return entity.Machine;
				case "VCMachineID":
					return entity.VCMachineID;
				case "UniqueRef":
					return entity.UniqueRef;
				case "RationaleType":
					return entity.RationaleType;
				case "Value":
					return entity.Value;
				case "AuthorName":
					return entity.AuthorName;
				case "EffectiveDate":
					return entity.EffectiveDate;
				case "LongDescription":
					return entity.LongDescription;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as METAView_Rationale_Listing, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- WorkspaceName: {0}{12}- WorkspaceTypeId: {1}{12}- VCStatusID: {2}{12}- pkid: {3}{12}- Machine: {4}{12}- VCMachineID: {5}{12}- UniqueRef: {6}{12}- RationaleType: {7}{12}- Value: {8}{12}- AuthorName: {9}{12}- EffectiveDate: {10}{12}- LongDescription: {11}{12}", 
				this.WorkspaceName,
				(this.WorkspaceTypeId == null) ? string.Empty : this.WorkspaceTypeId.ToString(),
			     
				this.VCStatusID,
				this.pkid,
				this.Machine,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
			     
				(this.UniqueRef == null) ? string.Empty : this.UniqueRef.ToString(),
			     
				(this.RationaleType == null) ? string.Empty : this.RationaleType.ToString(),
			     
				(this.Value == null) ? string.Empty : this.Value.ToString(),
			     
				(this.AuthorName == null) ? string.Empty : this.AuthorName.ToString(),
			     
				(this.EffectiveDate == null) ? string.Empty : this.EffectiveDate.ToString(),
			     
				(this.LongDescription == null) ? string.Empty : this.LongDescription.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the METAView_Rationale_Listing columns.
	/// </summary>
	[Serializable]
	public enum METAView_Rationale_ListingColumn
	{
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName,
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeId")]
		[ColumnEnum("WorkspaceTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeId,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		pkid,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Machine,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID,
		/// <summary>
		/// UniqueRef : 
		/// </summary>
		[EnumTextValue("UniqueRef")]
		[ColumnEnum("UniqueRef", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		UniqueRef,
		/// <summary>
		/// RationaleType : 
		/// </summary>
		[EnumTextValue("RationaleType")]
		[ColumnEnum("RationaleType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		RationaleType,
		/// <summary>
		/// Value : 
		/// </summary>
		[EnumTextValue("Value")]
		[ColumnEnum("Value", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Value,
		/// <summary>
		/// AuthorName : 
		/// </summary>
		[EnumTextValue("AuthorName")]
		[ColumnEnum("AuthorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		AuthorName,
		/// <summary>
		/// EffectiveDate : 
		/// </summary>
		[EnumTextValue("EffectiveDate")]
		[ColumnEnum("EffectiveDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		EffectiveDate,
		/// <summary>
		/// LongDescription : 
		/// </summary>
		[EnumTextValue("LongDescription")]
		[ColumnEnum("LongDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LongDescription
	}//End enum

} // end namespace
