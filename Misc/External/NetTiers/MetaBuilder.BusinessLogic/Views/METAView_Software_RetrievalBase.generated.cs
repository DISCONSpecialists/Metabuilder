/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file METAView_Software_Retrieval.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace MetaBuilder.BusinessLogic
{
	///<summary>
	/// An object representation of the 'METAView_Software_Retrieval' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("METAView_Software_RetrievalBase")]
	public abstract partial class METAView_Software_RetrievalBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		private System.String		  _workspaceName = string.Empty;
		
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		private System.Int32?		  _workspaceTypeId = null;
		
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		private System.Int32		  _vCStatusID = (int)0;
		
		/// <summary>
		/// pkid : 
		/// </summary>
		private System.Int32		  _pkid = (int)0;
		
		/// <summary>
		/// Machine : 
		/// </summary>
		private System.String		  _machine = string.Empty;
		
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		private System.String		  _vCMachineID = null;
		
		/// <summary>
		/// Type : 
		/// </summary>
		private System.String		  _type = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		private System.String		  _name = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = null;
		
		/// <summary>
		/// SeverityRating : 
		/// </summary>
		private System.String		  _severityRating = null;
		
		/// <summary>
		/// Configuration : 
		/// </summary>
		private System.String		  _configuration = null;
		
		/// <summary>
		/// Copyright : 
		/// </summary>
		private System.String		  _copyright = null;
		
		/// <summary>
		/// Publisher : 
		/// </summary>
		private System.String		  _publisher = null;
		
		/// <summary>
		/// InternalName : 
		/// </summary>
		private System.String		  _internalName = null;
		
		/// <summary>
		/// Language : 
		/// </summary>
		private System.String		  _language = null;
		
		/// <summary>
		/// DateCreated : 
		/// </summary>
		private System.String		  _dateCreated = null;
		
		/// <summary>
		/// isDNS : 
		/// </summary>
		private System.String		  _isDNS = null;
		
		/// <summary>
		/// isDHCP : 
		/// </summary>
		private System.String		  _isDHCP = null;
		
		/// <summary>
		/// isLicensed : 
		/// </summary>
		private System.String		  _isLicensed = null;
		
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		private System.String		  _licenseNumber = null;
		
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		private System.String		  _datePurchased = null;
		
		/// <summary>
		/// Version : 
		/// </summary>
		private System.String		  _version = null;
		
		/// <summary>
		/// ID : 
		/// </summary>
		private System.String		  _iD = null;
		
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		private System.String		  _customField1 = null;
		
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		private System.String		  _customField2 = null;
		
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		private System.String		  _customField3 = null;
		
		/// <summary>
		/// UserInterface : 
		/// </summary>
		private System.String		  _userInterface = null;
		
		/// <summary>
		/// GapType : 
		/// </summary>
		private System.String		  _gapType = null;
		
		/// <summary>
		/// AbbreviatedName : 
		/// </summary>
		private System.String		  _abbreviatedName = null;
		
		/// <summary>
		/// Release : 
		/// </summary>
		private System.String		  _release = null;
		
		/// <summary>
		/// Edition : 
		/// </summary>
		private System.String		  _edition = null;
		
		/// <summary>
		/// ServicePack : 
		/// </summary>
		private System.String		  _servicePack = null;
		
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		private System.String		  _abbreviation = null;
		
		/// <summary>
		/// IsBusinessExternal : 
		/// </summary>
		private System.String		  _isBusinessExternal = null;
		
		/// <summary>
		/// StandardisationStatus : 
		/// </summary>
		private System.String		  _standardisationStatus = null;
		
		/// <summary>
		/// StandardisationStatusDate : 
		/// </summary>
		private System.String		  _standardisationStatusDate = null;
		
		/// <summary>
		/// DataSourceID : 
		/// </summary>
		private System.String		  _dataSourceID = null;
		
		/// <summary>
		/// DataSourceName : 
		/// </summary>
		private System.String		  _dataSourceName = null;
		
		/// <summary>
		/// GeneralRemarks : 
		/// </summary>
		private System.String		  _generalRemarks = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="METAView_Software_RetrievalBase"/> instance.
		///</summary>
		public METAView_Software_RetrievalBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="METAView_Software_RetrievalBase"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_type"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_severityRating"></param>
		///<param name="_configuration"></param>
		///<param name="_copyright"></param>
		///<param name="_publisher"></param>
		///<param name="_internalName"></param>
		///<param name="_language"></param>
		///<param name="_dateCreated"></param>
		///<param name="_isDNS"></param>
		///<param name="_isDHCP"></param>
		///<param name="_isLicensed"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_datePurchased"></param>
		///<param name="_version"></param>
		///<param name="_iD"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_userInterface"></param>
		///<param name="_gapType"></param>
		///<param name="_abbreviatedName"></param>
		///<param name="_release"></param>
		///<param name="_edition"></param>
		///<param name="_servicePack"></param>
		///<param name="_abbreviation"></param>
		///<param name="_isBusinessExternal"></param>
		///<param name="_standardisationStatus"></param>
		///<param name="_standardisationStatusDate"></param>
		///<param name="_dataSourceID"></param>
		///<param name="_dataSourceName"></param>
		///<param name="_generalRemarks"></param>
		public METAView_Software_RetrievalBase(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _type, System.String _name, System.String _description, System.String _severityRating, System.String _configuration, System.String _copyright, System.String _publisher, System.String _internalName, System.String _language, System.String _dateCreated, System.String _isDNS, System.String _isDHCP, System.String _isLicensed, System.String _licenseNumber, System.String _datePurchased, System.String _version, System.String _iD, System.String _customField1, System.String _customField2, System.String _customField3, System.String _userInterface, System.String _gapType, System.String _abbreviatedName, System.String _release, System.String _edition, System.String _servicePack, System.String _abbreviation, System.String _isBusinessExternal, System.String _standardisationStatus, System.String _standardisationStatusDate, System.String _dataSourceID, System.String _dataSourceName, System.String _generalRemarks)
		{
			this._workspaceName = _workspaceName;
			this._workspaceTypeId = _workspaceTypeId;
			this._vCStatusID = _vCStatusID;
			this._pkid = _pkid;
			this._machine = _machine;
			this._vCMachineID = _vCMachineID;
			this._type = _type;
			this._name = _name;
			this._description = _description;
			this._severityRating = _severityRating;
			this._configuration = _configuration;
			this._copyright = _copyright;
			this._publisher = _publisher;
			this._internalName = _internalName;
			this._language = _language;
			this._dateCreated = _dateCreated;
			this._isDNS = _isDNS;
			this._isDHCP = _isDHCP;
			this._isLicensed = _isLicensed;
			this._licenseNumber = _licenseNumber;
			this._datePurchased = _datePurchased;
			this._version = _version;
			this._iD = _iD;
			this._customField1 = _customField1;
			this._customField2 = _customField2;
			this._customField3 = _customField3;
			this._userInterface = _userInterface;
			this._gapType = _gapType;
			this._abbreviatedName = _abbreviatedName;
			this._release = _release;
			this._edition = _edition;
			this._servicePack = _servicePack;
			this._abbreviation = _abbreviation;
			this._isBusinessExternal = _isBusinessExternal;
			this._standardisationStatus = _standardisationStatus;
			this._standardisationStatusDate = _standardisationStatusDate;
			this._dataSourceID = _dataSourceID;
			this._dataSourceName = _dataSourceName;
			this._generalRemarks = _generalRemarks;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="METAView_Software_Retrieval"/> instance.
		///</summary>
		///<param name="_workspaceName"></param>
		///<param name="_workspaceTypeId"></param>
		///<param name="_vCStatusID"></param>
		///<param name="_pkid"></param>
		///<param name="_machine"></param>
		///<param name="_vCMachineID"></param>
		///<param name="_type"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_severityRating"></param>
		///<param name="_configuration"></param>
		///<param name="_copyright"></param>
		///<param name="_publisher"></param>
		///<param name="_internalName"></param>
		///<param name="_language"></param>
		///<param name="_dateCreated"></param>
		///<param name="_isDNS"></param>
		///<param name="_isDHCP"></param>
		///<param name="_isLicensed"></param>
		///<param name="_licenseNumber"></param>
		///<param name="_datePurchased"></param>
		///<param name="_version"></param>
		///<param name="_iD"></param>
		///<param name="_customField1"></param>
		///<param name="_customField2"></param>
		///<param name="_customField3"></param>
		///<param name="_userInterface"></param>
		///<param name="_gapType"></param>
		///<param name="_abbreviatedName"></param>
		///<param name="_release"></param>
		///<param name="_edition"></param>
		///<param name="_servicePack"></param>
		///<param name="_abbreviation"></param>
		///<param name="_isBusinessExternal"></param>
		///<param name="_standardisationStatus"></param>
		///<param name="_standardisationStatusDate"></param>
		///<param name="_dataSourceID"></param>
		///<param name="_dataSourceName"></param>
		///<param name="_generalRemarks"></param>
		public static METAView_Software_Retrieval CreateMETAView_Software_Retrieval(System.String _workspaceName, System.Int32? _workspaceTypeId, System.Int32 _vCStatusID, System.Int32 _pkid, System.String _machine, System.String _vCMachineID, System.String _type, System.String _name, System.String _description, System.String _severityRating, System.String _configuration, System.String _copyright, System.String _publisher, System.String _internalName, System.String _language, System.String _dateCreated, System.String _isDNS, System.String _isDHCP, System.String _isLicensed, System.String _licenseNumber, System.String _datePurchased, System.String _version, System.String _iD, System.String _customField1, System.String _customField2, System.String _customField3, System.String _userInterface, System.String _gapType, System.String _abbreviatedName, System.String _release, System.String _edition, System.String _servicePack, System.String _abbreviation, System.String _isBusinessExternal, System.String _standardisationStatus, System.String _standardisationStatusDate, System.String _dataSourceID, System.String _dataSourceName, System.String _generalRemarks)
		{
			METAView_Software_Retrieval newMETAView_Software_Retrieval = new METAView_Software_Retrieval();
			newMETAView_Software_Retrieval.WorkspaceName = _workspaceName;
			newMETAView_Software_Retrieval.WorkspaceTypeId = _workspaceTypeId;
			newMETAView_Software_Retrieval.VCStatusID = _vCStatusID;
			newMETAView_Software_Retrieval.pkid = _pkid;
			newMETAView_Software_Retrieval.Machine = _machine;
			newMETAView_Software_Retrieval.VCMachineID = _vCMachineID;
			newMETAView_Software_Retrieval.Type = _type;
			newMETAView_Software_Retrieval.Name = _name;
			newMETAView_Software_Retrieval.Description = _description;
			newMETAView_Software_Retrieval.SeverityRating = _severityRating;
			newMETAView_Software_Retrieval.Configuration = _configuration;
			newMETAView_Software_Retrieval.Copyright = _copyright;
			newMETAView_Software_Retrieval.Publisher = _publisher;
			newMETAView_Software_Retrieval.InternalName = _internalName;
			newMETAView_Software_Retrieval.Language = _language;
			newMETAView_Software_Retrieval.DateCreated = _dateCreated;
			newMETAView_Software_Retrieval.isDNS = _isDNS;
			newMETAView_Software_Retrieval.isDHCP = _isDHCP;
			newMETAView_Software_Retrieval.isLicensed = _isLicensed;
			newMETAView_Software_Retrieval.LicenseNumber = _licenseNumber;
			newMETAView_Software_Retrieval.DatePurchased = _datePurchased;
			newMETAView_Software_Retrieval.Version = _version;
			newMETAView_Software_Retrieval.ID = _iD;
			newMETAView_Software_Retrieval.CustomField1 = _customField1;
			newMETAView_Software_Retrieval.CustomField2 = _customField2;
			newMETAView_Software_Retrieval.CustomField3 = _customField3;
			newMETAView_Software_Retrieval.UserInterface = _userInterface;
			newMETAView_Software_Retrieval.GapType = _gapType;
			newMETAView_Software_Retrieval.AbbreviatedName = _abbreviatedName;
			newMETAView_Software_Retrieval.Release = _release;
			newMETAView_Software_Retrieval.Edition = _edition;
			newMETAView_Software_Retrieval.ServicePack = _servicePack;
			newMETAView_Software_Retrieval.Abbreviation = _abbreviation;
			newMETAView_Software_Retrieval.IsBusinessExternal = _isBusinessExternal;
			newMETAView_Software_Retrieval.StandardisationStatus = _standardisationStatus;
			newMETAView_Software_Retrieval.StandardisationStatusDate = _standardisationStatusDate;
			newMETAView_Software_Retrieval.DataSourceID = _dataSourceID;
			newMETAView_Software_Retrieval.DataSourceName = _dataSourceName;
			newMETAView_Software_Retrieval.GeneralRemarks = _generalRemarks;
			return newMETAView_Software_Retrieval;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the WorkspaceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WorkspaceName
		{
			get
			{
				return this._workspaceName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WorkspaceName does not allow null values.");
				if (_workspaceName == value)
					return;
					
				this._workspaceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WorkspaceTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWorkspaceTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? WorkspaceTypeId
		{
			get
			{
				return this._workspaceTypeId; 
			}
			set
			{
				if (_workspaceTypeId == value && WorkspaceTypeId != null )
					return;
					
				this._workspaceTypeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WorkspaceTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCStatusID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 VCStatusID
		{
			get
			{
				return this._vCStatusID; 
			}
			set
			{
				if (_vCStatusID == value)
					return;
					
				this._vCStatusID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCStatusID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the pkid property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 pkid
		{
			get
			{
				return this._pkid; 
			}
			set
			{
				if (_pkid == value)
					return;
					
				this._pkid = value;
				this._isDirty = true;
				
				OnPropertyChanged("pkid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Machine property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Machine
		{
			get
			{
				return this._machine; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Machine does not allow null values.");
				if (_machine == value)
					return;
					
				this._machine = value;
				this._isDirty = true;
				
				OnPropertyChanged("Machine");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VCMachineID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String VCMachineID
		{
			get
			{
				return this._vCMachineID; 
			}
			set
			{
				if (_vCMachineID == value)
					return;
					
				this._vCMachineID = value;
				this._isDirty = true;
				
				OnPropertyChanged("VCMachineID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Type
		{
			get
			{
				return this._type; 
			}
			set
			{
				if (_type == value)
					return;
					
				this._type = value;
				this._isDirty = true;
				
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Name
		{
			get
			{
				return this._name; 
			}
			set
			{
				if (_name == value)
					return;
					
				this._name = value;
				this._isDirty = true;
				
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeverityRating property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeverityRating
		{
			get
			{
				return this._severityRating; 
			}
			set
			{
				if (_severityRating == value)
					return;
					
				this._severityRating = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeverityRating");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Configuration property. 
		///		
		/// </summary>
		/// <value>This type is text</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Configuration
		{
			get
			{
				return this._configuration; 
			}
			set
			{
				if (_configuration == value)
					return;
					
				this._configuration = value;
				this._isDirty = true;
				
				OnPropertyChanged("Configuration");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Copyright property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Copyright
		{
			get
			{
				return this._copyright; 
			}
			set
			{
				if (_copyright == value)
					return;
					
				this._copyright = value;
				this._isDirty = true;
				
				OnPropertyChanged("Copyright");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Publisher property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Publisher
		{
			get
			{
				return this._publisher; 
			}
			set
			{
				if (_publisher == value)
					return;
					
				this._publisher = value;
				this._isDirty = true;
				
				OnPropertyChanged("Publisher");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InternalName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String InternalName
		{
			get
			{
				return this._internalName; 
			}
			set
			{
				if (_internalName == value)
					return;
					
				this._internalName = value;
				this._isDirty = true;
				
				OnPropertyChanged("InternalName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Language property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Language
		{
			get
			{
				return this._language; 
			}
			set
			{
				if (_language == value)
					return;
					
				this._language = value;
				this._isDirty = true;
				
				OnPropertyChanged("Language");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DateCreated property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DateCreated
		{
			get
			{
				return this._dateCreated; 
			}
			set
			{
				if (_dateCreated == value)
					return;
					
				this._dateCreated = value;
				this._isDirty = true;
				
				OnPropertyChanged("DateCreated");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the isDNS property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String isDNS
		{
			get
			{
				return this._isDNS; 
			}
			set
			{
				if (_isDNS == value)
					return;
					
				this._isDNS = value;
				this._isDirty = true;
				
				OnPropertyChanged("isDNS");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the isDHCP property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String isDHCP
		{
			get
			{
				return this._isDHCP; 
			}
			set
			{
				if (_isDHCP == value)
					return;
					
				this._isDHCP = value;
				this._isDirty = true;
				
				OnPropertyChanged("isDHCP");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the isLicensed property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String isLicensed
		{
			get
			{
				return this._isLicensed; 
			}
			set
			{
				if (_isLicensed == value)
					return;
					
				this._isLicensed = value;
				this._isDirty = true;
				
				OnPropertyChanged("isLicensed");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LicenseNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LicenseNumber
		{
			get
			{
				return this._licenseNumber; 
			}
			set
			{
				if (_licenseNumber == value)
					return;
					
				this._licenseNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("LicenseNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DatePurchased property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DatePurchased
		{
			get
			{
				return this._datePurchased; 
			}
			set
			{
				if (_datePurchased == value)
					return;
					
				this._datePurchased = value;
				this._isDirty = true;
				
				OnPropertyChanged("DatePurchased");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Version property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Version
		{
			get
			{
				return this._version; 
			}
			set
			{
				if (_version == value)
					return;
					
				this._version = value;
				this._isDirty = true;
				
				OnPropertyChanged("Version");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ID
		{
			get
			{
				return this._iD; 
			}
			set
			{
				if (_iD == value)
					return;
					
				this._iD = value;
				this._isDirty = true;
				
				OnPropertyChanged("ID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField1
		{
			get
			{
				return this._customField1; 
			}
			set
			{
				if (_customField1 == value)
					return;
					
				this._customField1 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField1");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField2
		{
			get
			{
				return this._customField2; 
			}
			set
			{
				if (_customField2 == value)
					return;
					
				this._customField2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomField3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomField3
		{
			get
			{
				return this._customField3; 
			}
			set
			{
				if (_customField3 == value)
					return;
					
				this._customField3 = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomField3");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserInterface property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserInterface
		{
			get
			{
				return this._userInterface; 
			}
			set
			{
				if (_userInterface == value)
					return;
					
				this._userInterface = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserInterface");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GapType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GapType
		{
			get
			{
				return this._gapType; 
			}
			set
			{
				if (_gapType == value)
					return;
					
				this._gapType = value;
				this._isDirty = true;
				
				OnPropertyChanged("GapType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AbbreviatedName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AbbreviatedName
		{
			get
			{
				return this._abbreviatedName; 
			}
			set
			{
				if (_abbreviatedName == value)
					return;
					
				this._abbreviatedName = value;
				this._isDirty = true;
				
				OnPropertyChanged("AbbreviatedName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Release property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Release
		{
			get
			{
				return this._release; 
			}
			set
			{
				if (_release == value)
					return;
					
				this._release = value;
				this._isDirty = true;
				
				OnPropertyChanged("Release");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Edition property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Edition
		{
			get
			{
				return this._edition; 
			}
			set
			{
				if (_edition == value)
					return;
					
				this._edition = value;
				this._isDirty = true;
				
				OnPropertyChanged("Edition");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ServicePack property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ServicePack
		{
			get
			{
				return this._servicePack; 
			}
			set
			{
				if (_servicePack == value)
					return;
					
				this._servicePack = value;
				this._isDirty = true;
				
				OnPropertyChanged("ServicePack");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Abbreviation property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Abbreviation
		{
			get
			{
				return this._abbreviation; 
			}
			set
			{
				if (_abbreviation == value)
					return;
					
				this._abbreviation = value;
				this._isDirty = true;
				
				OnPropertyChanged("Abbreviation");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsBusinessExternal property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String IsBusinessExternal
		{
			get
			{
				return this._isBusinessExternal; 
			}
			set
			{
				if (_isBusinessExternal == value)
					return;
					
				this._isBusinessExternal = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsBusinessExternal");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StandardisationStatus property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StandardisationStatus
		{
			get
			{
				return this._standardisationStatus; 
			}
			set
			{
				if (_standardisationStatus == value)
					return;
					
				this._standardisationStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("StandardisationStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StandardisationStatusDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StandardisationStatusDate
		{
			get
			{
				return this._standardisationStatusDate; 
			}
			set
			{
				if (_standardisationStatusDate == value)
					return;
					
				this._standardisationStatusDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("StandardisationStatusDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DataSourceID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DataSourceID
		{
			get
			{
				return this._dataSourceID; 
			}
			set
			{
				if (_dataSourceID == value)
					return;
					
				this._dataSourceID = value;
				this._isDirty = true;
				
				OnPropertyChanged("DataSourceID");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DataSourceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DataSourceName
		{
			get
			{
				return this._dataSourceName; 
			}
			set
			{
				if (_dataSourceName == value)
					return;
					
				this._dataSourceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DataSourceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the GeneralRemarks property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String GeneralRemarks
		{
			get
			{
				return this._generalRemarks; 
			}
			set
			{
				if (_generalRemarks == value)
					return;
					
				this._generalRemarks = value;
				this._isDirty = true;
				
				OnPropertyChanged("GeneralRemarks");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "METAView_Software_Retrieval"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed METAView_Software_RetrievalBase Entity 
		///</summary>
		public virtual METAView_Software_RetrievalBase Copy()
		{
			//shallow copy entity
			METAView_Software_Retrieval copy = new METAView_Software_Retrieval();
				copy.WorkspaceName = this.WorkspaceName;
				copy.WorkspaceTypeId = this.WorkspaceTypeId;
				copy.VCStatusID = this.VCStatusID;
				copy.pkid = this.pkid;
				copy.Machine = this.Machine;
				copy.VCMachineID = this.VCMachineID;
				copy.Type = this.Type;
				copy.Name = this.Name;
				copy.Description = this.Description;
				copy.SeverityRating = this.SeverityRating;
				copy.Configuration = this.Configuration;
				copy.Copyright = this.Copyright;
				copy.Publisher = this.Publisher;
				copy.InternalName = this.InternalName;
				copy.Language = this.Language;
				copy.DateCreated = this.DateCreated;
				copy.isDNS = this.isDNS;
				copy.isDHCP = this.isDHCP;
				copy.isLicensed = this.isLicensed;
				copy.LicenseNumber = this.LicenseNumber;
				copy.DatePurchased = this.DatePurchased;
				copy.Version = this.Version;
				copy.ID = this.ID;
				copy.CustomField1 = this.CustomField1;
				copy.CustomField2 = this.CustomField2;
				copy.CustomField3 = this.CustomField3;
				copy.UserInterface = this.UserInterface;
				copy.GapType = this.GapType;
				copy.AbbreviatedName = this.AbbreviatedName;
				copy.Release = this.Release;
				copy.Edition = this.Edition;
				copy.ServicePack = this.ServicePack;
				copy.Abbreviation = this.Abbreviation;
				copy.IsBusinessExternal = this.IsBusinessExternal;
				copy.StandardisationStatus = this.StandardisationStatus;
				copy.StandardisationStatusDate = this.StandardisationStatusDate;
				copy.DataSourceID = this.DataSourceID;
				copy.DataSourceName = this.DataSourceName;
				copy.GeneralRemarks = this.GeneralRemarks;
			copy.AcceptChanges();
			return (METAView_Software_Retrieval)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="METAView_Software_RetrievalBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(METAView_Software_RetrievalBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="METAView_Software_RetrievalBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="METAView_Software_RetrievalBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="METAView_Software_RetrievalBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(METAView_Software_RetrievalBase Object1, METAView_Software_RetrievalBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.WorkspaceName != Object2.WorkspaceName)
				equal = false;
			if (Object1.WorkspaceTypeId != null && Object2.WorkspaceTypeId != null )
			{
				if (Object1.WorkspaceTypeId != Object2.WorkspaceTypeId)
					equal = false;
			}
			else if (Object1.WorkspaceTypeId == null ^ Object1.WorkspaceTypeId == null )
			{
				equal = false;
			}
			if (Object1.VCStatusID != Object2.VCStatusID)
				equal = false;
			if (Object1.pkid != Object2.pkid)
				equal = false;
			if (Object1.Machine != Object2.Machine)
				equal = false;
			if (Object1.VCMachineID != null && Object2.VCMachineID != null )
			{
				if (Object1.VCMachineID != Object2.VCMachineID)
					equal = false;
			}
			else if (Object1.VCMachineID == null ^ Object1.VCMachineID == null )
			{
				equal = false;
			}
			if (Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object1.Type == null )
			{
				equal = false;
			}
			if (Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object1.Name == null )
			{
				equal = false;
			}
			if (Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object1.Description == null )
			{
				equal = false;
			}
			if (Object1.SeverityRating != null && Object2.SeverityRating != null )
			{
				if (Object1.SeverityRating != Object2.SeverityRating)
					equal = false;
			}
			else if (Object1.SeverityRating == null ^ Object1.SeverityRating == null )
			{
				equal = false;
			}
			if (Object1.Configuration != null && Object2.Configuration != null )
			{
				if (Object1.Configuration != Object2.Configuration)
					equal = false;
			}
			else if (Object1.Configuration == null ^ Object1.Configuration == null )
			{
				equal = false;
			}
			if (Object1.Copyright != null && Object2.Copyright != null )
			{
				if (Object1.Copyright != Object2.Copyright)
					equal = false;
			}
			else if (Object1.Copyright == null ^ Object1.Copyright == null )
			{
				equal = false;
			}
			if (Object1.Publisher != null && Object2.Publisher != null )
			{
				if (Object1.Publisher != Object2.Publisher)
					equal = false;
			}
			else if (Object1.Publisher == null ^ Object1.Publisher == null )
			{
				equal = false;
			}
			if (Object1.InternalName != null && Object2.InternalName != null )
			{
				if (Object1.InternalName != Object2.InternalName)
					equal = false;
			}
			else if (Object1.InternalName == null ^ Object1.InternalName == null )
			{
				equal = false;
			}
			if (Object1.Language != null && Object2.Language != null )
			{
				if (Object1.Language != Object2.Language)
					equal = false;
			}
			else if (Object1.Language == null ^ Object1.Language == null )
			{
				equal = false;
			}
			if (Object1.DateCreated != null && Object2.DateCreated != null )
			{
				if (Object1.DateCreated != Object2.DateCreated)
					equal = false;
			}
			else if (Object1.DateCreated == null ^ Object1.DateCreated == null )
			{
				equal = false;
			}
			if (Object1.isDNS != null && Object2.isDNS != null )
			{
				if (Object1.isDNS != Object2.isDNS)
					equal = false;
			}
			else if (Object1.isDNS == null ^ Object1.isDNS == null )
			{
				equal = false;
			}
			if (Object1.isDHCP != null && Object2.isDHCP != null )
			{
				if (Object1.isDHCP != Object2.isDHCP)
					equal = false;
			}
			else if (Object1.isDHCP == null ^ Object1.isDHCP == null )
			{
				equal = false;
			}
			if (Object1.isLicensed != null && Object2.isLicensed != null )
			{
				if (Object1.isLicensed != Object2.isLicensed)
					equal = false;
			}
			else if (Object1.isLicensed == null ^ Object1.isLicensed == null )
			{
				equal = false;
			}
			if (Object1.LicenseNumber != null && Object2.LicenseNumber != null )
			{
				if (Object1.LicenseNumber != Object2.LicenseNumber)
					equal = false;
			}
			else if (Object1.LicenseNumber == null ^ Object1.LicenseNumber == null )
			{
				equal = false;
			}
			if (Object1.DatePurchased != null && Object2.DatePurchased != null )
			{
				if (Object1.DatePurchased != Object2.DatePurchased)
					equal = false;
			}
			else if (Object1.DatePurchased == null ^ Object1.DatePurchased == null )
			{
				equal = false;
			}
			if (Object1.Version != null && Object2.Version != null )
			{
				if (Object1.Version != Object2.Version)
					equal = false;
			}
			else if (Object1.Version == null ^ Object1.Version == null )
			{
				equal = false;
			}
			if (Object1.ID != null && Object2.ID != null )
			{
				if (Object1.ID != Object2.ID)
					equal = false;
			}
			else if (Object1.ID == null ^ Object1.ID == null )
			{
				equal = false;
			}
			if (Object1.CustomField1 != null && Object2.CustomField1 != null )
			{
				if (Object1.CustomField1 != Object2.CustomField1)
					equal = false;
			}
			else if (Object1.CustomField1 == null ^ Object1.CustomField1 == null )
			{
				equal = false;
			}
			if (Object1.CustomField2 != null && Object2.CustomField2 != null )
			{
				if (Object1.CustomField2 != Object2.CustomField2)
					equal = false;
			}
			else if (Object1.CustomField2 == null ^ Object1.CustomField2 == null )
			{
				equal = false;
			}
			if (Object1.CustomField3 != null && Object2.CustomField3 != null )
			{
				if (Object1.CustomField3 != Object2.CustomField3)
					equal = false;
			}
			else if (Object1.CustomField3 == null ^ Object1.CustomField3 == null )
			{
				equal = false;
			}
			if (Object1.UserInterface != null && Object2.UserInterface != null )
			{
				if (Object1.UserInterface != Object2.UserInterface)
					equal = false;
			}
			else if (Object1.UserInterface == null ^ Object1.UserInterface == null )
			{
				equal = false;
			}
			if (Object1.GapType != null && Object2.GapType != null )
			{
				if (Object1.GapType != Object2.GapType)
					equal = false;
			}
			else if (Object1.GapType == null ^ Object1.GapType == null )
			{
				equal = false;
			}
			if (Object1.AbbreviatedName != null && Object2.AbbreviatedName != null )
			{
				if (Object1.AbbreviatedName != Object2.AbbreviatedName)
					equal = false;
			}
			else if (Object1.AbbreviatedName == null ^ Object1.AbbreviatedName == null )
			{
				equal = false;
			}
			if (Object1.Release != null && Object2.Release != null )
			{
				if (Object1.Release != Object2.Release)
					equal = false;
			}
			else if (Object1.Release == null ^ Object1.Release == null )
			{
				equal = false;
			}
			if (Object1.Edition != null && Object2.Edition != null )
			{
				if (Object1.Edition != Object2.Edition)
					equal = false;
			}
			else if (Object1.Edition == null ^ Object1.Edition == null )
			{
				equal = false;
			}
			if (Object1.ServicePack != null && Object2.ServicePack != null )
			{
				if (Object1.ServicePack != Object2.ServicePack)
					equal = false;
			}
			else if (Object1.ServicePack == null ^ Object1.ServicePack == null )
			{
				equal = false;
			}
			if (Object1.Abbreviation != null && Object2.Abbreviation != null )
			{
				if (Object1.Abbreviation != Object2.Abbreviation)
					equal = false;
			}
			else if (Object1.Abbreviation == null ^ Object1.Abbreviation == null )
			{
				equal = false;
			}
			if (Object1.IsBusinessExternal != null && Object2.IsBusinessExternal != null )
			{
				if (Object1.IsBusinessExternal != Object2.IsBusinessExternal)
					equal = false;
			}
			else if (Object1.IsBusinessExternal == null ^ Object1.IsBusinessExternal == null )
			{
				equal = false;
			}
			if (Object1.StandardisationStatus != null && Object2.StandardisationStatus != null )
			{
				if (Object1.StandardisationStatus != Object2.StandardisationStatus)
					equal = false;
			}
			else if (Object1.StandardisationStatus == null ^ Object1.StandardisationStatus == null )
			{
				equal = false;
			}
			if (Object1.StandardisationStatusDate != null && Object2.StandardisationStatusDate != null )
			{
				if (Object1.StandardisationStatusDate != Object2.StandardisationStatusDate)
					equal = false;
			}
			else if (Object1.StandardisationStatusDate == null ^ Object1.StandardisationStatusDate == null )
			{
				equal = false;
			}
			if (Object1.DataSourceID != null && Object2.DataSourceID != null )
			{
				if (Object1.DataSourceID != Object2.DataSourceID)
					equal = false;
			}
			else if (Object1.DataSourceID == null ^ Object1.DataSourceID == null )
			{
				equal = false;
			}
			if (Object1.DataSourceName != null && Object2.DataSourceName != null )
			{
				if (Object1.DataSourceName != Object2.DataSourceName)
					equal = false;
			}
			else if (Object1.DataSourceName == null ^ Object1.DataSourceName == null )
			{
				equal = false;
			}
			if (Object1.GeneralRemarks != null && Object2.GeneralRemarks != null )
			{
				if (Object1.GeneralRemarks != Object2.GeneralRemarks)
					equal = false;
			}
			else if (Object1.GeneralRemarks == null ^ Object1.GeneralRemarks == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(METAView_Software_Retrieval entity, string propertyName)
		{
			switch (propertyName)
			{
				case "WorkspaceName":
					return entity.WorkspaceName;
				case "WorkspaceTypeId":
					return entity.WorkspaceTypeId;
				case "VCStatusID":
					return entity.VCStatusID;
				case "pkid":
					return entity.pkid;
				case "Machine":
					return entity.Machine;
				case "VCMachineID":
					return entity.VCMachineID;
				case "Type":
					return entity.Type;
				case "Name":
					return entity.Name;
				case "Description":
					return entity.Description;
				case "SeverityRating":
					return entity.SeverityRating;
				case "Configuration":
					return entity.Configuration;
				case "Copyright":
					return entity.Copyright;
				case "Publisher":
					return entity.Publisher;
				case "InternalName":
					return entity.InternalName;
				case "Language":
					return entity.Language;
				case "DateCreated":
					return entity.DateCreated;
				case "isDNS":
					return entity.isDNS;
				case "isDHCP":
					return entity.isDHCP;
				case "isLicensed":
					return entity.isLicensed;
				case "LicenseNumber":
					return entity.LicenseNumber;
				case "DatePurchased":
					return entity.DatePurchased;
				case "Version":
					return entity.Version;
				case "ID":
					return entity.ID;
				case "CustomField1":
					return entity.CustomField1;
				case "CustomField2":
					return entity.CustomField2;
				case "CustomField3":
					return entity.CustomField3;
				case "UserInterface":
					return entity.UserInterface;
				case "GapType":
					return entity.GapType;
				case "AbbreviatedName":
					return entity.AbbreviatedName;
				case "Release":
					return entity.Release;
				case "Edition":
					return entity.Edition;
				case "ServicePack":
					return entity.ServicePack;
				case "Abbreviation":
					return entity.Abbreviation;
				case "IsBusinessExternal":
					return entity.IsBusinessExternal;
				case "StandardisationStatus":
					return entity.StandardisationStatus;
				case "StandardisationStatusDate":
					return entity.StandardisationStatusDate;
				case "DataSourceID":
					return entity.DataSourceID;
				case "DataSourceName":
					return entity.DataSourceName;
				case "GeneralRemarks":
					return entity.GeneralRemarks;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as METAView_Software_Retrieval, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{40}{39}- WorkspaceName: {0}{39}- WorkspaceTypeId: {1}{39}- VCStatusID: {2}{39}- pkid: {3}{39}- Machine: {4}{39}- VCMachineID: {5}{39}- Type: {6}{39}- Name: {7}{39}- Description: {8}{39}- SeverityRating: {9}{39}- Configuration: {10}{39}- Copyright: {11}{39}- Publisher: {12}{39}- InternalName: {13}{39}- Language: {14}{39}- DateCreated: {15}{39}- isDNS: {16}{39}- isDHCP: {17}{39}- isLicensed: {18}{39}- LicenseNumber: {19}{39}- DatePurchased: {20}{39}- Version: {21}{39}- ID: {22}{39}- CustomField1: {23}{39}- CustomField2: {24}{39}- CustomField3: {25}{39}- UserInterface: {26}{39}- GapType: {27}{39}- AbbreviatedName: {28}{39}- Release: {29}{39}- Edition: {30}{39}- ServicePack: {31}{39}- Abbreviation: {32}{39}- IsBusinessExternal: {33}{39}- StandardisationStatus: {34}{39}- StandardisationStatusDate: {35}{39}- DataSourceID: {36}{39}- DataSourceName: {37}{39}- GeneralRemarks: {38}{39}", 
				this.WorkspaceName,
				(this.WorkspaceTypeId == null) ? string.Empty : this.WorkspaceTypeId.ToString(),
			     
				this.VCStatusID,
				this.pkid,
				this.Machine,
				(this.VCMachineID == null) ? string.Empty : this.VCMachineID.ToString(),
			     
				(this.Type == null) ? string.Empty : this.Type.ToString(),
			     
				(this.Name == null) ? string.Empty : this.Name.ToString(),
			     
				(this.Description == null) ? string.Empty : this.Description.ToString(),
			     
				(this.SeverityRating == null) ? string.Empty : this.SeverityRating.ToString(),
			     
				(this.Configuration == null) ? string.Empty : this.Configuration.ToString(),
			     
				(this.Copyright == null) ? string.Empty : this.Copyright.ToString(),
			     
				(this.Publisher == null) ? string.Empty : this.Publisher.ToString(),
			     
				(this.InternalName == null) ? string.Empty : this.InternalName.ToString(),
			     
				(this.Language == null) ? string.Empty : this.Language.ToString(),
			     
				(this.DateCreated == null) ? string.Empty : this.DateCreated.ToString(),
			     
				(this.isDNS == null) ? string.Empty : this.isDNS.ToString(),
			     
				(this.isDHCP == null) ? string.Empty : this.isDHCP.ToString(),
			     
				(this.isLicensed == null) ? string.Empty : this.isLicensed.ToString(),
			     
				(this.LicenseNumber == null) ? string.Empty : this.LicenseNumber.ToString(),
			     
				(this.DatePurchased == null) ? string.Empty : this.DatePurchased.ToString(),
			     
				(this.Version == null) ? string.Empty : this.Version.ToString(),
			     
				(this.ID == null) ? string.Empty : this.ID.ToString(),
			     
				(this.CustomField1 == null) ? string.Empty : this.CustomField1.ToString(),
			     
				(this.CustomField2 == null) ? string.Empty : this.CustomField2.ToString(),
			     
				(this.CustomField3 == null) ? string.Empty : this.CustomField3.ToString(),
			     
				(this.UserInterface == null) ? string.Empty : this.UserInterface.ToString(),
			     
				(this.GapType == null) ? string.Empty : this.GapType.ToString(),
			     
				(this.AbbreviatedName == null) ? string.Empty : this.AbbreviatedName.ToString(),
			     
				(this.Release == null) ? string.Empty : this.Release.ToString(),
			     
				(this.Edition == null) ? string.Empty : this.Edition.ToString(),
			     
				(this.ServicePack == null) ? string.Empty : this.ServicePack.ToString(),
			     
				(this.Abbreviation == null) ? string.Empty : this.Abbreviation.ToString(),
			     
				(this.IsBusinessExternal == null) ? string.Empty : this.IsBusinessExternal.ToString(),
			     
				(this.StandardisationStatus == null) ? string.Empty : this.StandardisationStatus.ToString(),
			     
				(this.StandardisationStatusDate == null) ? string.Empty : this.StandardisationStatusDate.ToString(),
			     
				(this.DataSourceID == null) ? string.Empty : this.DataSourceID.ToString(),
			     
				(this.DataSourceName == null) ? string.Empty : this.DataSourceName.ToString(),
			     
				(this.GeneralRemarks == null) ? string.Empty : this.GeneralRemarks.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the METAView_Software_Retrieval columns.
	/// </summary>
	[Serializable]
	public enum METAView_Software_RetrievalColumn
	{
		/// <summary>
		/// WorkspaceName : 
		/// </summary>
		[EnumTextValue("WorkspaceName")]
		[ColumnEnum("WorkspaceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		WorkspaceName,
		/// <summary>
		/// WorkspaceTypeId : 
		/// </summary>
		[EnumTextValue("WorkspaceTypeId")]
		[ColumnEnum("WorkspaceTypeId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		WorkspaceTypeId,
		/// <summary>
		/// VCStatusID : 
		/// </summary>
		[EnumTextValue("VCStatusID")]
		[ColumnEnum("VCStatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VCStatusID,
		/// <summary>
		/// pkid : 
		/// </summary>
		[EnumTextValue("pkid")]
		[ColumnEnum("pkid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		pkid,
		/// <summary>
		/// Machine : 
		/// </summary>
		[EnumTextValue("Machine")]
		[ColumnEnum("Machine", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Machine,
		/// <summary>
		/// VCMachineID : 
		/// </summary>
		[EnumTextValue("VCMachineID")]
		[ColumnEnum("VCMachineID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		VCMachineID,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Type,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Name,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Description,
		/// <summary>
		/// SeverityRating : 
		/// </summary>
		[EnumTextValue("SeverityRating")]
		[ColumnEnum("SeverityRating", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		SeverityRating,
		/// <summary>
		/// Configuration : 
		/// </summary>
		[EnumTextValue("Configuration")]
		[ColumnEnum("Configuration", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Configuration,
		/// <summary>
		/// Copyright : 
		/// </summary>
		[EnumTextValue("Copyright")]
		[ColumnEnum("Copyright", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Copyright,
		/// <summary>
		/// Publisher : 
		/// </summary>
		[EnumTextValue("Publisher")]
		[ColumnEnum("Publisher", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Publisher,
		/// <summary>
		/// InternalName : 
		/// </summary>
		[EnumTextValue("InternalName")]
		[ColumnEnum("InternalName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		InternalName,
		/// <summary>
		/// Language : 
		/// </summary>
		[EnumTextValue("Language")]
		[ColumnEnum("Language", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Language,
		/// <summary>
		/// DateCreated : 
		/// </summary>
		[EnumTextValue("DateCreated")]
		[ColumnEnum("DateCreated", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DateCreated,
		/// <summary>
		/// isDNS : 
		/// </summary>
		[EnumTextValue("isDNS")]
		[ColumnEnum("isDNS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		isDNS,
		/// <summary>
		/// isDHCP : 
		/// </summary>
		[EnumTextValue("isDHCP")]
		[ColumnEnum("isDHCP", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		isDHCP,
		/// <summary>
		/// isLicensed : 
		/// </summary>
		[EnumTextValue("isLicensed")]
		[ColumnEnum("isLicensed", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		isLicensed,
		/// <summary>
		/// LicenseNumber : 
		/// </summary>
		[EnumTextValue("LicenseNumber")]
		[ColumnEnum("LicenseNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		LicenseNumber,
		/// <summary>
		/// DatePurchased : 
		/// </summary>
		[EnumTextValue("DatePurchased")]
		[ColumnEnum("DatePurchased", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DatePurchased,
		/// <summary>
		/// Version : 
		/// </summary>
		[EnumTextValue("Version")]
		[ColumnEnum("Version", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Version,
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ID,
		/// <summary>
		/// CustomField1 : 
		/// </summary>
		[EnumTextValue("CustomField1")]
		[ColumnEnum("CustomField1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField1,
		/// <summary>
		/// CustomField2 : 
		/// </summary>
		[EnumTextValue("CustomField2")]
		[ColumnEnum("CustomField2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField2,
		/// <summary>
		/// CustomField3 : 
		/// </summary>
		[EnumTextValue("CustomField3")]
		[ColumnEnum("CustomField3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		CustomField3,
		/// <summary>
		/// UserInterface : 
		/// </summary>
		[EnumTextValue("UserInterface")]
		[ColumnEnum("UserInterface", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		UserInterface,
		/// <summary>
		/// GapType : 
		/// </summary>
		[EnumTextValue("GapType")]
		[ColumnEnum("GapType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GapType,
		/// <summary>
		/// AbbreviatedName : 
		/// </summary>
		[EnumTextValue("AbbreviatedName")]
		[ColumnEnum("AbbreviatedName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		AbbreviatedName,
		/// <summary>
		/// Release : 
		/// </summary>
		[EnumTextValue("Release")]
		[ColumnEnum("Release", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Release,
		/// <summary>
		/// Edition : 
		/// </summary>
		[EnumTextValue("Edition")]
		[ColumnEnum("Edition", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Edition,
		/// <summary>
		/// ServicePack : 
		/// </summary>
		[EnumTextValue("ServicePack")]
		[ColumnEnum("ServicePack", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ServicePack,
		/// <summary>
		/// Abbreviation : 
		/// </summary>
		[EnumTextValue("Abbreviation")]
		[ColumnEnum("Abbreviation", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Abbreviation,
		/// <summary>
		/// IsBusinessExternal : 
		/// </summary>
		[EnumTextValue("IsBusinessExternal")]
		[ColumnEnum("IsBusinessExternal", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		IsBusinessExternal,
		/// <summary>
		/// StandardisationStatus : 
		/// </summary>
		[EnumTextValue("StandardisationStatus")]
		[ColumnEnum("StandardisationStatus", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		StandardisationStatus,
		/// <summary>
		/// StandardisationStatusDate : 
		/// </summary>
		[EnumTextValue("StandardisationStatusDate")]
		[ColumnEnum("StandardisationStatusDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		StandardisationStatusDate,
		/// <summary>
		/// DataSourceID : 
		/// </summary>
		[EnumTextValue("DataSourceID")]
		[ColumnEnum("DataSourceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DataSourceID,
		/// <summary>
		/// DataSourceName : 
		/// </summary>
		[EnumTextValue("DataSourceName")]
		[ColumnEnum("DataSourceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		DataSourceName,
		/// <summary>
		/// GeneralRemarks : 
		/// </summary>
		[EnumTextValue("GeneralRemarks")]
		[ColumnEnum("GeneralRemarks", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		GeneralRemarks
	}//End enum

} // end namespace
